{
  "address": "0x7feA56A04c4C476bf2cD776B5F8793be4DA460ff",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LiquidityWarning",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUTHORIZED_FUND_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_SOURCE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUND",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_DISTRIBUTION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_REPORTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LENDING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_CALLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_PENALIZER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_ACTIVATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEIGHT_TOTAL_10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "yieldQuotientFP",
          "type": "uint256"
        }
      ],
      "name": "applyBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balanceWithInterest",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bonds",
      "outputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "originalPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "runtime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldFP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowYieldAccumulators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulatorFP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hourlyYieldFP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFactorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingMarkupFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "runtime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "buyBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bondIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyHourlyBondSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "buyingSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "closeHourlyBondAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "diffMaxMinRuntime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hourlyBondAccounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldQuotientFP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "moduloHour",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hourlyBondBuyingSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hourlyBondWithdrawingSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hourlyBondYieldAccumulators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulatorFP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hourlyYieldFP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "incentiveTranches",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "initBorrowYieldAccumulator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastBought",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "lendingTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxHourlyYieldFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRuntime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRuntime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextBondIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payOff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "registerBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "runtimeWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowingFactor",
          "type": "uint256"
        }
      ],
      "name": "setBorrowingFactorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "aprPercent",
          "type": "uint256"
        }
      ],
      "name": "setHourlyYieldAPR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        }
      ],
      "name": "setIncentiveTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buffer",
          "type": "uint256"
        }
      ],
      "name": "setLendingBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "setLendingCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxYieldFP",
          "type": "uint256"
        }
      ],
      "name": "setMaxHourlyYieldFP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runtime",
          "type": "uint256"
        }
      ],
      "name": "setMaxRuntime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runtime",
          "type": "uint256"
        }
      ],
      "name": "setMinRuntime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "setRuntimeWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "yieldsFP",
          "type": "uint256[]"
        }
      ],
      "name": "setRuntimeYieldsFP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "changePerSecondFP",
          "type": "uint256"
        }
      ],
      "name": "setYieldChangePerSecondFP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalLending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalLendingPerRuntime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "role",
          "type": "uint16"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "role",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "runtime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "viewBondReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "yieldQuotientFP",
          "type": "uint256"
        }
      ],
      "name": "viewBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "viewBorrowingYieldFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        }
      ],
      "name": "withdrawBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawHourlyBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawingSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldChangePerSecondFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "yieldLastUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xffda516ceaac51514c5a660910d761f775d41b203e346585c630de8a7eec279d",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0x7feA56A04c4C476bf2cD776B5F8793be4DA460ff",
    "transactionIndex": 2,
    "gasUsed": "4305610",
    "logsBloom": "0x
    "blockHash": "0x0b2d8a64c85731e3b23f55072b8b5b2168ce2541fb6fb53e95d96631a03c229c",
    "transactionHash": "0xffda516ceaac51514c5a660910d761f775d41b203e346585c630de8a7eec279d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 23978814,
        "transactionHash": "0xffda516ceaac51514c5a660910d761f775d41b203e346585c630de8a7eec279d",
        "address": "0x7feA56A04c4C476bf2cD776B5F8793be4DA460ff",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023292e9ba8434e59e6bac1907ba7425211c4de27"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0b2d8a64c85731e3b23f55072b8b5b2168ce2541fb6fb53e95d96631a03c229c"
      }
    ],
    "blockNumber": 23978814,
    "cumulativeGasUsed": "8464911",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0aB4A3F2B1129A0595185e4a9A1548e9e7f984C0"
  ],
  "solcInputHash": "fe4ccaec56ebcbda1a00f5460db20335",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LiquidityWarning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORIZED_FUND_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_SOURCE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_REPORTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_CALLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_PENALIZER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ACTIVATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEIGHT_TOTAL_10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"}],\"name\":\"applyBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceWithInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowYieldAccumulators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatorFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hourlyYieldFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFactorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingMarkupFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"buyBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyHourlyBondSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyingSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"closeHourlyBondAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diffMaxMinRuntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hourlyBondAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moduloHour\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hourlyBondBuyingSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hourlyBondWithdrawingSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hourlyBondYieldAccumulators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatorFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hourlyYieldFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incentiveTranches\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initBorrowYieldAccumulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lendingTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHourlyYieldFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRuntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRuntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBondIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"runtimeWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowingFactor\",\"type\":\"uint256\"}],\"name\":\"setBorrowingFactorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aprPercent\",\"type\":\"uint256\"}],\"name\":\"setHourlyYieldAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"}],\"name\":\"setIncentiveTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buffer\",\"type\":\"uint256\"}],\"name\":\"setLendingBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setLendingCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxYieldFP\",\"type\":\"uint256\"}],\"name\":\"setMaxHourlyYieldFP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"}],\"name\":\"setMaxRuntime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"}],\"name\":\"setMinRuntime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"setRuntimeWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"yieldsFP\",\"type\":\"uint256[]\"}],\"name\":\"setRuntimeYieldsFP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"changePerSecondFP\",\"type\":\"uint256\"}],\"name\":\"setYieldChangePerSecondFP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalLendingPerRuntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"role\",\"type\":\"uint16\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"role\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"viewBondReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"}],\"name\":\"viewBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"viewBorrowingYieldFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"}],\"name\":\"withdrawBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawHourlyBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawingSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldChangePerSecondFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yieldLastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"applyBorrowInterest(uint256,address,uint256)\":{\"details\":\"how much interest has accrued to a borrowed balance over time\"},\"buyBond(address,uint256,uint256,uint256)\":{\"details\":\"buy fixed term bond that does not renew\"},\"buyHourlyBondSubscription(address,uint256)\":{\"details\":\"buy hourly bond subscription\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payOff(address,uint256)\":{\"details\":\"gets called by router if loan is extinguished\"},\"registerBorrow(address,uint256)\":{\"details\":\"gets called by router to register if a trader borrows tokens\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"viewBorrowInterest(uint256,address,uint256)\":{\"details\":\"view function to get current borrowing interest\"},\"viewBorrowingYieldFP(address)\":{\"details\":\"get the borrow yield\"},\"withdrawBond(uint256)\":{\"details\":\"send back funds of bond after maturity\"},\"withdrawHourlyBond(address,uint256)\":{\"details\":\"withdraw an hour bond\"}},\"stateVariables\":{\"bondIds\":{\"details\":\"IDs for all bonds held by an address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lending.sol\":\"Lending\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/BaseLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\nabstract contract BaseLending is RoleAware, Ownable {\\n    uint256 constant FP32 = 2**32;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    mapping(address => uint256) public totalLending;\\n    mapping(address => uint256) public totalBorrowed;\\n    mapping(address => uint256) public lendingBuffer;\\n    mapping(address => uint256) public lendingCap;\\n\\n    uint256 public maxHourlyYieldFP;\\n    uint256 public yieldChangePerSecondFP;\\n\\n    /// @dev simple formula for calculating interest relative to accumulator\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    /// update the yield for an asset based on recent supply and demand\\n    function updatedYieldFP(\\n        // previous yield\\n        uint256 _yieldFP,\\n        // timestamp\\n        uint256 lastUpdated,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketTarget,\\n        uint256 buyingSpeed,\\n        uint256 withdrawingSpeed,\\n        uint256 bucketMaxYield\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = _yieldFP;\\n        uint256 timeDiff = block.timestamp - lastUpdated;\\n        uint256 yieldDiff = timeDiff * yieldChangePerSecondFP;\\n\\n        if (\\n            totalLendingInBucket >= bucketTarget ||\\n            buyingSpeed >= withdrawingSpeed\\n        ) {\\n            yieldFP -= min(yieldFP, yieldDiff);\\n        } else if (\\n            bucketTarget > totalLendingInBucket &&\\n            withdrawingSpeed > buyingSpeed\\n        ) {\\n            yieldFP += yieldDiff;\\n            if (yieldFP > bucketMaxYield) {\\n                yieldFP = bucketMaxYield;\\n            }\\n        }\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function lendingTarget(address token) public view returns (uint256) {\\n        return\\n            min(lendingCap[token], totalBorrowed[token] + lendingBuffer[token]);\\n    }\\n\\n    function setLendingCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set lending cap\\\"\\n        );\\n        lendingCap[token] = cap;\\n    }\\n\\n    function setLendingBuffer(address token, uint256 buffer) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to set lending buffer\\\"\\n        );\\n        lendingBuffer[token] = buffer;\\n    }\\n\\n    function setMaxHourlyYieldFP(uint256 maxYieldFP) external onlyOwner {\\n        maxHourlyYieldFP = maxYieldFP;\\n    }\\n\\n    function setYieldChangePerSecondFP(uint256 changePerSecondFP)\\n        external\\n        onlyOwner\\n    {\\n        yieldChangePerSecondFP = changePerSecondFP;\\n    }\\n}\\n\",\"keccak256\":\"0x74026d83cd23380fdaec2a04c2df40fd7601bd9b58d4ed7e205c2c7f1ece7a3a\",\"license\":\"GPL-2.0-only\"},\"contracts/BondLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Bond {\\n    address holder;\\n    address token;\\n    uint256 originalPrice;\\n    uint256 returnAmount;\\n    uint256 maturityTimestamp;\\n    uint256 runtime;\\n    uint256 yieldFP;\\n}\\n\\n/// @dev Lending for fixed runtime, fixed interest\\n/// Lenders can pick their own bond maturity date --\\n/// In order to manage interest rates for the different\\n/// maturities and create a yield curve we bucket\\n/// bond runtimes into weighted baskets and adjust\\n/// rates individually per bucket, based on supply and demand.\\nabstract contract BondLending is BaseLending {\\n    uint256 public minRuntime = 30 days;\\n    uint256 public maxRuntime = 365 days;\\n    uint256 public diffMaxMinRuntime;\\n    // this is the numerator under runtimeWeights.\\n    // any excess left over is the weight of hourly bonds\\n    uint256 public constant WEIGHT_TOTAL_10k = 10_000;\\n    uint256 public borrowingMarkupFP;\\n\\n    mapping(address => uint256[]) public runtimeWeights;\\n    mapping(address => uint256[]) public buyingSpeed;\\n    mapping(address => uint256[]) public lastBought;\\n    mapping(address => uint256[]) public withdrawingSpeed;\\n    mapping(address => uint256[]) public lastWithdrawn;\\n    mapping(address => uint256[]) public yieldLastUpdated;\\n\\n    mapping(uint256 => Bond) public bonds;\\n\\n    mapping(address => uint256[]) public totalLendingPerRuntime;\\n    mapping(address => uint256[]) runtimeYieldsFP;\\n    uint256 public nextBondIndex = 1;\\n\\n    event LiquidityWarning(\\n        address indexed token,\\n        address indexed holder,\\n        uint256 value\\n    );\\n\\n    function _makeBond(\\n        address holder,\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) internal returns (uint256 bondIndex) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        uint256 bondReturn = (yieldFP * amount) / FP32;\\n        if (bondReturn >= minReturn) {\\n            if (Fund(fund()).depositFor(holder, token, amount)) {\\n                uint256 interpolatedAmount = (amount + bondReturn) / 2;\\n                totalLending[token] += interpolatedAmount;\\n\\n                totalLendingPerRuntime[token][\\n                    bucketIndex\\n                ] += interpolatedAmount;\\n\\n                bondIndex = nextBondIndex;\\n                nextBondIndex++;\\n\\n                bonds[bondIndex] = Bond({\\n                    holder: holder,\\n                    token: token,\\n                    originalPrice: amount,\\n                    returnAmount: bondReturn,\\n                    maturityTimestamp: block.timestamp + runtime,\\n                    runtime: runtime,\\n                    yieldFP: yieldFP\\n                });\\n\\n                updateSpeed(\\n                    buyingSpeed[token],\\n                    lastBought[token],\\n                    bucketIndex,\\n                    amount\\n                );\\n            }\\n        }\\n    }\\n\\n    function _withdrawBond(Bond storage bond) internal {\\n        address token = bond.token;\\n        uint256 bucketIndex = getBucketIndex(token, bond.runtime);\\n        uint256 interpolatedAmount =\\n            (bond.originalPrice + bond.returnAmount) / 2;\\n        totalLending[token] -= interpolatedAmount;\\n        totalLendingPerRuntime[token][bucketIndex] -= interpolatedAmount;\\n\\n        updateSpeed(\\n            withdrawingSpeed[token],\\n            lastWithdrawn[token],\\n            bucketIndex,\\n            bond.originalPrice\\n        );\\n\\n        if (\\n            totalBorrowed[token] > totalLending[token] ||\\n            !Fund(fund()).withdraw(token, bond.holder, bond.returnAmount)\\n        ) {\\n            // apparently there is a liquidity issue\\n            emit LiquidityWarning(token, bond.holder, bond.returnAmount);\\n            _makeFallbackBond(token, bond.holder, bond.returnAmount);\\n        }\\n    }\\n\\n    function getUpdatedBondYieldFP(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) internal returns (uint256 yieldFP, uint256 bucketIndex) {\\n        bucketIndex = getBucketIndex(token, runtime);\\n        yieldFP = calcBondYieldFP(\\n            token,\\n            amount + totalLendingPerRuntime[token][bucketIndex],\\n            bucketIndex\\n        );\\n        runtimeYieldsFP[token][bucketIndex] = yieldFP;\\n        yieldLastUpdated[token][bucketIndex] = block.timestamp;\\n    }\\n\\n    function calcBondYieldFP(\\n        address token,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketIndex\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = runtimeYieldsFP[token][bucketIndex];\\n        uint256 lastUpdated = yieldLastUpdated[token][bucketIndex];\\n\\n        uint256 bucketTarget =\\n            (lendingTarget(token) * runtimeWeights[token][bucketIndex]) /\\n                WEIGHT_TOTAL_10k;\\n\\n        uint256 buying = buyingSpeed[token][bucketIndex];\\n        uint256 withdrawing = withdrawingSpeed[token][bucketIndex];\\n\\n        uint256 runtime = minRuntime + bucketIndex * diffMaxMinRuntime;\\n        uint256 bucketMaxYield = maxHourlyYieldFP * (runtime / (1 hours));\\n\\n        yieldFP = updatedYieldFP(\\n            yieldFP,\\n            lastUpdated,\\n            totalLendingInBucket,\\n            bucketTarget,\\n            buying,\\n            withdrawing,\\n            bucketMaxYield\\n        );\\n    }\\n\\n    function viewBondReturn(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        return (yieldFP * amount) / FP32;\\n    }\\n\\n    function getBucketIndex(address token, uint256 runtime)\\n        internal\\n        view\\n        returns (uint256 bucketIndex)\\n    {\\n        uint256[] storage yieldsFP = runtimeYieldsFP[token];\\n        uint256 bucketSize = diffMaxMinRuntime / yieldsFP.length;\\n        bucketIndex = (runtime - minRuntime) / bucketSize;\\n    }\\n\\n    function updateSpeed(\\n        uint256[] storage speedRegister,\\n        uint256[] storage lastAction,\\n        uint256 bucketIndex,\\n        uint256 amount\\n    ) internal {\\n        uint256 bucketSize = diffMaxMinRuntime / speedRegister.length;\\n        uint256 runtime = minRuntime + bucketSize * bucketIndex;\\n        uint256 timeDiff = block.timestamp - lastAction[bucketIndex];\\n        uint256 currentSpeed = (amount * runtime) / (timeDiff + 1);\\n\\n        uint256 runtimeScale = runtime / (10 minutes);\\n        // scale adjustment relative togit  runtime\\n        speedRegister[bucketIndex] =\\n            (speedRegister[bucketIndex] *\\n                runtimeScale +\\n                currentSpeed *\\n                timeDiff) /\\n            (runtimeScale + timeDiff);\\n        lastAction[bucketIndex] = block.timestamp;\\n    }\\n\\n    function setRuntimeYieldsFP(address token, uint256[] memory yieldsFP)\\n        external\\n        onlyOwner\\n    {\\n        runtimeYieldsFP[token] = yieldsFP;\\n    }\\n\\n    function setRuntimeWeights(address token, uint256[] memory weights)\\n        external\\n    {\\n        //require(\\n        //    isTokenActivator(msg.sender),\\n        //    \\\"not autorized to set runtime weights\\\"\\n        //);\\n        require(\\n            runtimeWeights[token].length == 0 ||\\n                runtimeWeights[token].length == weights.length,\\n            \\\"Cannot change size of weight array\\\"\\n        );\\n        if (runtimeWeights[token].length == 0) {\\n            // we are initializing\\n\\n            runtimeYieldsFP[token] = new uint256[](weights.length);\\n            lastBought[token] = new uint256[](weights.length);\\n            lastWithdrawn[token] = new uint256[](weights.length);\\n            yieldLastUpdated[token] = new uint256[](weights.length);\\n            buyingSpeed[token] = new uint256[](weights.length);\\n            withdrawingSpeed[token] = new uint256[](weights.length);\\n\\n            uint256 hourlyYieldFP = (110 * FP32) / 100 / (24 * 365);\\n            uint256 bucketSize = diffMaxMinRuntime / weights.length;\\n\\n            for (uint24 i = 0; weights.length > i; i++) {\\n                uint256 runtime = minRuntime + bucketSize * i;\\n                // Do a best guess of initializing\\n                runtimeYieldsFP[token][i] =\\n                    hourlyYieldFP *\\n                    (runtime / (1 hours));\\n\\n                lastBought[token][i] = block.timestamp;\\n                lastWithdrawn[token][i] = block.timestamp;\\n                yieldLastUpdated[token][i] = block.timestamp;\\n            }\\n        }\\n\\n        runtimeWeights[token] = weights;\\n    }\\n\\n    function setMinRuntime(uint256 runtime) external onlyOwner {\\n        require(runtime > 1 hours, \\\"Min runtime needs to be at least 1 hour\\\");\\n        minRuntime = runtime;\\n    }\\n\\n    function setMaxRuntime(uint256 runtime) external onlyOwner {\\n        require(\\n            runtime > minRuntime,\\n            \\\"Max runtime must be greater than min runtime\\\"\\n        );\\n        maxRuntime = runtime;\\n    }\\n}\\n\",\"keccak256\":\"0x930816f1d0667cbc2aa9bc95c81be0143889158dfb375433c693a7f13a9d9a72\",\"license\":\"GPL-2.0-only\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\ncontract Fund is RoleAware, Ownable {\\n    address public WETH;\\n    mapping(address => bool) public activeTokens;\\n\\n    constructor(address _WETH, address _roles) Ownable() RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    function activateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = true;\\n    }\\n\\n    function deactivateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = false;\\n    }\\n\\n    function deposit(address depositToken, uint256 depositAmount)\\n        external\\n        returns (bool)\\n    {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external returns (bool) {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        require(isWithdrawer(msg.sender), \\\"Contract not authorized to deposit\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external returns (bool) {\\n        require(\\n            isWithdrawer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        return IERC20(withdrawalToken).transfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isWithdrawer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        payable(recipient).transfer(withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x0bb5339cb309267349880a96a90781bfc988c418ef69eb1d5cf09403bc4bb3d9\",\"license\":\"GPL-2.0-only\"},\"contracts/HourlyBondSubscriptionLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct YieldAccumulator {\\n    uint256 accumulatorFP;\\n    uint256 lastUpdated;\\n    uint256 hourlyYieldFP;\\n}\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n}\\n\\n/// @dev Here we offer subscriptions to auto-renewing hourly bonds\\n/// Funds are locked in for an 50 minutes per hour, while interest rates float\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    uint256 withdrawalWindow = 10 minutes;\\n    // token => holder => bond record\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n\\n    mapping(address => YieldAccumulator) public hourlyBondYieldAccumulators;\\n    /// @dev accumulate interest per token (like compound indices)\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    uint256 public borrowingFactorPercent = 200;\\n\\n    mapping(address => uint256) public hourlyBondBuyingSpeed;\\n    mapping(address => uint256) public hourlyBondWithdrawingSpeed;\\n\\n    function setHourlyYieldAPR(address token, uint256 aprPercent) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to set hourly yield\\\"\\n        );\\n        if (hourlyBondYieldAccumulators[token].accumulatorFP == 0) {\\n            hourlyBondYieldAccumulators[token] = YieldAccumulator({\\n                accumulatorFP: FP32,\\n                lastUpdated: block.timestamp,\\n                hourlyYieldFP: (FP32 * (100 + aprPercent)) / 100 / (24 * 365)\\n            });\\n        } else {\\n            hourlyBondYieldAccumulators[token].hourlyYieldFP =\\n                (FP32 * (100 + aprPercent)) /\\n                100 /\\n                (24 * 365);\\n        }\\n    }\\n\\n    function setWithdrawalWindow(uint256 window) external onlyOwner {\\n        withdrawalWindow = window;\\n    }\\n\\n    function _makeHourlyBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[token][holder];\\n        updateHourlyBondAmount(token, bond);\\n        bond.yieldQuotientFP = hourlyBondYieldAccumulators[token].accumulatorFP;\\n        bond.moduloHour = block.timestamp % (1 hours);\\n        bond.amount += amount;\\n        totalLending[token] += amount;\\n    }\\n\\n    function updateHourlyBondAmount(address token, HourlyBond storage bond)\\n        internal\\n    {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            YieldAccumulator storage yA = getUpdatedHourlyYield(token);\\n\\n            uint256 oldAmount = bond.amount;\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            totalLending[token] += deltaAmount;\\n        }\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address token,\\n        HourlyBond storage bond,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            withdrawalWindow >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        require(\\n            Fund(fund()).withdraw(token, recipient, amount),\\n            \\\"Insufficient liquidity\\\"\\n        );\\n\\n        bond.amount -= amount;\\n        totalLending[token] -= amount;\\n    }\\n\\n    function closeHourlyBondAccount(address token) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        _withdrawHourlyBond(token, bond, msg.sender, bond.amount);\\n        bond.amount = 0;\\n        bond.yieldQuotientFP = 0;\\n        bond.moduloHour = 0;\\n    }\\n\\n    function calcCumulativeYieldFP(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // accumulator * hourly_yield == seconds_per_hour * accumulator * hourly_yield / seconds_per_hour\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            (yieldAccumulator.accumulatorFP *\\n                yieldAccumulator.hourlyYieldFP *\\n                secondsDelta) /\\n            (FP32 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            // This loop should hardly ever 1 or more unless something bad happened\\n            // In which case it costs gas but there isn't overflow\\n            for (uint256 i = 0; hoursDelta > i; i++) {\\n                // FP32 * FP32 / FP32 = FP32\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP32;\\n            }\\n        }\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    function getUpdatedHourlyYield(address token)\\n        internal\\n        returns (YieldAccumulator storage accumulator)\\n    {\\n        accumulator = hourlyBondYieldAccumulators[token];\\n        uint256 timeDelta = (block.timestamp - accumulator.lastUpdated);\\n\\n        accumulator.accumulatorFP = calcCumulativeYieldFP(\\n            accumulator,\\n            timeDelta\\n        );\\n\\n        accumulator.hourlyYieldFP = updatedYieldFP(\\n            accumulator.hourlyYieldFP,\\n            accumulator.lastUpdated,\\n            totalLending[token],\\n            lendingTarget(token),\\n            hourlyBondBuyingSpeed[token],\\n            hourlyBondWithdrawingSpeed[token],\\n            maxHourlyYieldFP\\n        );\\n\\n        YieldAccumulator storage borrowAccumulator =\\n            borrowYieldAccumulators[token];\\n        timeDelta = block.timestamp - borrowAccumulator.lastUpdated;\\n        borrowAccumulator.accumulatorFP = calcCumulativeYieldFP(\\n            borrowAccumulator,\\n            timeDelta\\n        );\\n\\n        borrowYieldAccumulators[token].hourlyYieldFP =\\n            (borrowingFactorPercent * accumulator.hourlyYieldFP) /\\n            100;\\n\\n        accumulator.lastUpdated = block.timestamp;\\n        borrowAccumulator.lastUpdated = block.timestamp;\\n    }\\n\\n    function viewCumulativeYieldFP(\\n        address token,\\n        mapping(address => YieldAccumulator) storage yieldAccumulators,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yieldAccumulators[token].lastUpdated);\\n        return calcCumulativeYieldFP(yieldAccumulators[token], timeDelta);\\n    }\\n}\\n\",\"keccak256\":\"0x59c78dd3fd81337bcd6046c4ecb8862c430c6a3a4a975bf30f28431da2dafeff\",\"license\":\"GPL-2.0-only\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    address recipient;\\n    uint256 amount;\\n}\\n\\ncontract IncentiveDistribution is RoleAware, Ownable {\\n    // fixed point number factor\\n    uint256 constant FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    uint256 constant contractionPerMil = 999;\\n    // the period for which claims are batch updated\\n    uint256 constant period = 4 hours;\\n    uint256 constant periodsPerDay = 24 hours / period;\\n    address MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n        lastDailyDistributionUpdate = block.timestamp / (1 days);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n    // last day on which we updated currentDailyDistribution\\n    uint256 lastDailyDistributionUpdate;\\n    // portion of daily distribution per each tranche\\n    mapping(uint8 => uint256) public trancheShare;\\n    uint256 public trancheShareTotal;\\n\\n    // tranche => claim totals for the period we're currently aggregating\\n    mapping(uint8 => uint256) public currentPeriodTotals;\\n    // tranche => timestamp / period of last update\\n    mapping(uint8 => uint256) public lastUpdatedPeriods;\\n\\n    // how each claim unit would get if they had staked from the dawn of time\\n    // expressed as fixed point number\\n    // claim amounts are expressed relative to this ongoing aggregate\\n    mapping(uint8 => uint256) public aggregatePeriodicRewardRateFP;\\n    // claim records\\n    mapping(uint256 => Claim) public claims;\\n    uint256 public nextClaimId = 1;\\n\\n    function setTrancheShare(uint8 tranche, uint256 share) external onlyOwner {\\n        require(\\n            lastUpdatedPeriods[tranche] > 0,\\n            \\\"Tranche is not initialized, please initialize first\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint8 tranche, uint256 share) internal {\\n        if (share > trancheShare[tranche]) {\\n            trancheShareTotal += share - trancheShare[tranche];\\n        } else {\\n            trancheShareTotal -= trancheShare[tranche] - share;\\n        }\\n        trancheShare[tranche] = share;\\n    }\\n\\n    function initTranche(uint8 tranche, uint256 share) external onlyOwner {\\n        _setTrancheShare(tranche, share);\\n\\n        lastUpdatedPeriods[tranche] = block.timestamp / period;\\n        // simply initialize to 1.0\\n        aggregatePeriodicRewardRateFP[tranche] = FP32;\\n    }\\n\\n    function updatePeriodTotals(uint8 tranche) internal {\\n        uint256 currentPeriod = block.timestamp / period;\\n\\n        // update the amount that gets distributed per day, if there has been\\n        // a day transition\\n        updateCurrentDailyDistribution();\\n        // Do a bunch of updating of periodic variables when the period changes\\n        uint256 lU = lastUpdatedPeriods[tranche];\\n        uint256 periodDiff = currentPeriod - lU;\\n\\n        if (periodDiff > 0) {\\n            aggregatePeriodicRewardRateFP[tranche] +=\\n                currentPeriodicRewardRateFP(tranche) *\\n                periodDiff;\\n        }\\n\\n        lastUpdatedPeriods[tranche] = currentPeriod;\\n    }\\n\\n    function forcePeriodTotalUpdate(uint8 tranche) external {\\n        updatePeriodTotals(tranche);\\n    }\\n\\n    function updateCurrentDailyDistribution() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastDailyDistributionUpdate;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n        }\\n        // now update this memo\\n        lastDailyDistributionUpdate = nowDay;\\n    }\\n\\n    function currentPeriodicRewardRateFP(uint8 tranche)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // scale daily distribution down to tranche share\\n        uint256 tranchePeriodDistributionFP =\\n            (FP32 * currentDailyDistribution * trancheShare[tranche]) /\\n                trancheShareTotal /\\n                periodsPerDay;\\n\\n        // rate = (total_reward / total_claims) per period\\n        return tranchePeriodDistributionFP / currentPeriodTotals[tranche];\\n    }\\n\\n    function startClaim(\\n        uint8 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external returns (uint256) {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += claimAmount;\\n\\n            claims[nextClaimId] = Claim({\\n                startingRewardRateFP: aggregatePeriodicRewardRateFP[tranche],\\n                recipient: recipient,\\n                amount: claimAmount\\n            });\\n            nextClaimId += 1;\\n            return nextClaimId - 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function addToClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 additionalAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += additionalAmount;\\n\\n            Claim storage claim = claims[claimId];\\n            require(\\n                claim.startingRewardRateFP > 0,\\n                \\\"Trying to add to non-existant claim\\\"\\n            );\\n            _withdrawReward(tranche, claim);\\n            claim.amount += additionalAmount;\\n        }\\n    }\\n\\n    function subtractFromClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n\\n        currentPeriodTotals[tranche] -= subtractAmount;\\n\\n        Claim storage claim = claims[claimId];\\n        _withdrawReward((tranche), claim);\\n        claim.amount -= subtractAmount;\\n    }\\n\\n    function endClaim(uint8 tranche, uint256 claimId) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n\\n        if (claim.startingRewardRateFP > 0) {\\n            _withdrawReward(tranche, claim);\\n            delete claim.recipient;\\n            delete claim.startingRewardRateFP;\\n            delete claim.amount;\\n        }\\n    }\\n\\n    function calcRewardAmount(uint8 tranche, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (claim.amount *\\n                (aggregatePeriodicRewardRateFP[tranche] -\\n                    claim.startingRewardRateFP)) / FP32;\\n    }\\n\\n    function viewRewardAmount(uint8 tranche, uint256 claimId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return calcRewardAmount(tranche, claims[claimId]);\\n    }\\n\\n    function withdrawReward(uint8 tranche, uint256 claimId)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n        return _withdrawReward(tranche, claim);\\n    }\\n\\n    function _withdrawReward(uint8 tranche, Claim storage claim)\\n        internal\\n        returns (uint256 rewardAmount)\\n    {\\n        rewardAmount = calcRewardAmount(tranche, claim);\\n\\n        require(\\n            Fund(fund()).withdraw(MFI, claim.recipient, rewardAmount),\\n            \\\"There seems to be a lack of MFI in the incentive fund!\\\"\\n        );\\n\\n        claim.startingRewardRateFP = aggregatePeriodicRewardRateFP[tranche];\\n    }\\n}\\n\",\"keccak256\":\"0x18fda58acf66d325873d876d87856ded2f93017a3caba64f182c76a319d9ca0c\",\"license\":\"GPL-2.0-only\"},\"contracts/IncentivizedHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @dev helper class to facilitate staking and unstaking\\n/// within the incentive system\\nabstract contract IncentivizedHolder is RoleAware {\\n    // here we cache incentive tranches to save on a bit of gas\\n    mapping(address => uint8) public incentiveTranches;\\n    // claimant => token => claimId\\n    mapping(address => mapping(address => uint256)) public claimIds;\\n\\n    function setIncentiveTranche(address token, uint8 tranche) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set incentive tranche\\\"\\n        );\\n        incentiveTranches[token] = tranche;\\n    }\\n\\n    function stakeClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        IncentiveDistribution iD =\\n            IncentiveDistribution(incentiveDistributor());\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        if (claimId > 0) {\\n            iD.addToClaimAmount(tranche, claimId, amount);\\n        } else {\\n            claimId = iD.startClaim(tranche, claimant, amount);\\n            claimIds[claimant][token] = claimId;\\n        }\\n    }\\n\\n    function withdrawClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\\n            tranche,\\n            claimId,\\n            amount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7642b09d4964ef5ae3405e4dd1f391697bbbdfe808197bf520bfd7fe039c6bf8\",\"license\":\"GPL-2.0-only\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"./BondLending.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\ncontract Lending is\\n    BaseLending,\\n    HourlyBondSubscriptionLending,\\n    BondLending,\\n    IncentivizedHolder\\n{\\n    /// @dev IDs for all bonds held by an address\\n    mapping(address => uint256[]) public bondIds;\\n\\n    constructor(address _roles) RoleAware(_roles) Ownable() {\\n        uint256 APR = 899;\\n        maxHourlyYieldFP = (FP32 * APR) / 100 / (24 * 365);\\n\\n        uint256 aprChangePerMil = 3;\\n        yieldChangePerSecondFP = (FP32 * aprChangePerMil) / 1000;\\n    }\\n\\n    /// @dev how much interest has accrued to a borrowed balance over time\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256 balanceWithInterest) {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[token];\\n        balanceWithInterest = applyInterest(\\n            balance,\\n            yA.accumulatorFP,\\n            yieldQuotientFP\\n        );\\n\\n        uint256 deltaAmount = balanceWithInterest - balance;\\n        totalBorrowed[token] += deltaAmount;\\n    }\\n\\n    /// @dev view function to get current borrowing interest\\n    function viewBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYieldFP(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    /// @dev gets called by router to register if a trader borrows tokens\\n    function registerBorrow(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        require(Fund(fund()).activeTokens(token), \\\"Not an approved token\\\");\\n        totalBorrowed[token] += amount;\\n        require(\\n            totalLending[token] >= totalBorrowed[token],\\n            \\\"Insufficient capital to lend, try again later!\\\"\\n        );\\n    }\\n\\n    /// @dev gets called by router if loan is extinguished\\n    function payOff(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        totalBorrowed[token] -= amount;\\n    }\\n\\n    /// @dev get the borrow yield\\n    function viewBorrowingYieldFP(address token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            viewCumulativeYieldFP(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n    }\\n\\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal override {\\n        _makeHourlyBond(token, holder, amount);\\n    }\\n\\n    /// @dev withdraw an hour bond\\n    function withdrawHourlyBond(address token, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        super._withdrawHourlyBond(token, bond, msg.sender, amount);\\n\\n        withdrawClaim(msg.sender, token, amount);\\n    }\\n\\n    /// @dev buy hourly bond subscription\\n    function buyHourlyBondSubscription(address token, uint256 amount) external {\\n        if (lendingTarget(token) >= totalLending[token] + amount) {\\n            require(\\n                Fund(fund()).depositFor(msg.sender, token, amount),\\n                \\\"Could not transfer bond deposit token to fund\\\"\\n            );\\n            super._makeHourlyBond(token, msg.sender, amount);\\n\\n            stakeClaim(msg.sender, token, amount);\\n        }\\n    }\\n\\n    /// @dev buy fixed term bond that does not renew\\n    function buyBond(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) external returns (uint256 bondIndex) {\\n        if (\\n            lendingTarget(token) >= totalLending[token] + amount &&\\n            maxRuntime >= runtime &&\\n            runtime >= minRuntime\\n        ) {\\n            bondIndex = super._makeBond(\\n                msg.sender,\\n                token,\\n                runtime,\\n                amount,\\n                minReturn\\n            );\\n            bondIds[msg.sender].push(bondIndex);\\n\\n            stakeClaim(msg.sender, token, amount);\\n        }\\n    }\\n\\n    /// @dev send back funds of bond after maturity\\n    function withdrawBond(uint256 bondId) external {\\n        Bond storage bond = bonds[bondId];\\n        require(msg.sender == bond.holder, \\\"Not holder of bond\\\");\\n        require(\\n            block.timestamp > bond.maturityTimestamp,\\n            \\\"bond is still immature\\\"\\n        );\\n\\n        super._withdrawBond(bond);\\n        delete bonds[bondId];\\n        // in case of a shortfall, governance can step in to provide\\n        // additonal compensation beyond the usual incentive which\\n        // gets withdrawn here\\n        withdrawClaim(msg.sender, bond.token, bond.originalPrice);\\n    }\\n\\n    function initBorrowYieldAccumulator(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to init yield accumulator\\\"\\n        );\\n        borrowYieldAccumulators[token].accumulatorFP = FP32;\\n    }\\n\\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\\n        external\\n        onlyOwner\\n    {\\n        borrowingFactorPercent = borrowingFactor;\\n    }\\n}\\n\",\"keccak256\":\"0x74b28cdafc9c7b3baa12eef0cd594391a4a74d4eac564e5a6901c8f30210fa54\",\"license\":\"GPL-2.0-only\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    uint16 public constant WITHDRAWER = 1;\\n    uint16 public constant MARGIN_CALLER = 2;\\n    uint16 public constant BORROWER = 3;\\n    uint16 public constant MARGIN_TRADER = 4;\\n    uint16 public constant FEE_SOURCE = 5;\\n    uint16 public constant LIQUIDATOR = 6;\\n    uint16 public constant AUTHORIZED_FUND_TRADER = 7;\\n    uint16 public constant INCENTIVE_REPORTER = 8;\\n    uint16 public constant TOKEN_ACTIVATOR = 9;\\n    uint16 public constant STAKE_PENALIZER = 10;\\n\\n    uint16 public constant FUND = 101;\\n    uint16 public constant LENDING = 102;\\n    uint16 public constant ROUTER = 103;\\n    uint16 public constant MARGIN_TRADING = 104;\\n    uint16 public constant FEE_CONTROLLER = 105;\\n    uint16 public constant PRICE_CONTROLLER = 106;\\n    uint16 public constant ADMIN = 107;\\n    uint16 public constant INCENTIVE_DISTRIBUTION = 108;\\n\\n    Roles public roles;\\n    mapping(uint16 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint16 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint16 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint16 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function router() internal view returns (address) {\\n        return mainCharacterCache[ROUTER];\\n    }\\n\\n    function marginTrading() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isWithdrawer(address contr) internal view returns (bool) {\\n        return roleCache[contr][WITHDRAWER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roles.getRole(STAKE_PENALIZER, contr);\\n    }\\n}\\n\",\"keccak256\":\"0x779699aa9143f47f47fa1a42f1dcf168188654d923c76667edf723489bdbfbc6\",\"license\":\"GPL-2.0-only\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint16 => bool)) public roles;\\n    mapping(uint16 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][9] = true;\\n    }\\n\\n    function giveRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint16 role, address actor) external onlyOwner {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint16 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n}\\n\",\"keccak256\":\"0x7437a9ae57cabebc07d13141ac137ffbc5a3ed8c68f2f7f7685608a2bd6a6847\",\"license\":\"GPL-2.0-only\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"}},\"version\":1}",
  "bytecode": "0x6080604052610258600a5560c8600e5562278d006011556301e133806012556001601e553480156200003057600080fd5b5060405162004ba238038062004ba283398101604081905262000053916200012d565b600080546001600160a01b0319166001600160a01b0383161781556200007862000129565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506103836122386064620000df836401000000006200017e565b620000eb91906200015d565b620000f791906200015d565b60085560036103e862000110826401000000006200017e565b6200011c91906200015d565b60095550620001aa915050565b3390565b6000602082840312156200013f578081fd5b81516001600160a01b038116811462000156578182fd5b9392505050565b6000826200017957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615620001a557634e487b7160e01b81526011600452602481fd5b500290565b6149e880620001ba6000396000f3fe608060405234801561001057600080fd5b50600436106105805760003560e01c80638824cbba116102d7578063c94426a011610186578063e695fa68116100e3578063ef2cd3b811610097578063f2fde38b1161007c578063f2fde38b14610a60578063f884614b14610a73578063f90889c914610a8657610580565b8063ef2cd3b814610a45578063f11f979514610a5857610580565b8063e84bfdf4116100c8578063e84bfdf414610a0c578063ebc2273114610a1f578063ee0862bf14610a3257610580565b8063e695fa68146109e6578063e69f8959146109f957610580565b8063d3dc14b21161013a578063dcaf80291161011f578063dcaf8029146109ad578063e2e1ca2b146109c0578063e5ea6606146109d357610580565b8063d3dc14b214610992578063d5d7ed7f146109a557610580565b8063cc4b26a31161016b578063cc4b26a314610959578063cd3b5dfb1461096c578063d2b489341461097f57610580565b8063c94426a01461093e578063cacf8d451461095157610580565b8063b448165211610234578063c34316c3116101e8578063c4055ddf116101cd578063c4055ddf14610910578063c4f7d45d14610923578063c76139d01461093657610580565b8063c34316c3146108dd578063c3daab96146108fd57610580565b8063bfedc0bf11610219578063bfedc0bf146108a4578063c1cea807146108b7578063c2609c46146108ca57610580565b8063b448165214610889578063b8139c6d1461089c57610580565b8063a387832f1161028b578063a94c7c3411610270578063a94c7c3414610871578063a9cc053614610879578063aa7e321d1461088157610580565b8063a387832f1461084b578063a772404b1461085e57610580565b806391b46e05116102bc57806391b46e05146108285780639229e73f1461083b578063a0098d691461084357610580565b80638824cbba146108005780638da5cb5b1461082057610580565b80633aa58f4511610433578063687680ed116103905780637d34e4051161034457806381ca66001161032957806381ca6600146107ce57806383a04229146107d657806383a49c7c146107f857610580565b80637d34e405146107a8578063803a99b7146107bb57610580565b8063715018a611610375578063715018a614610785578063773bbb3b1461078d5780637b8b4ee21461079557610580565b8063687680ed1461075f5780636cd5cd601461077257610580565b80635adbeb15116103e75780635f1c17c0116103cc5780635f1c17c014610729578063669419841461074f57806367e2de921461075757610580565b80635adbeb151461070e5780635c275a391461072157610580565b80634804dd34116104185780634804dd34146106eb57806348fb27b8146106fe57806358d51f911461070657610580565b80633aa58f45146106d057806346b88796146106e357610580565b806320e8d819116104e15780632a6a897b1161049557806332fe7b261161047a57806332fe7b26146106a057806336953912146106a8578063392f5f64146106bb57610580565b80632a6a897b146106855780632fe94def1461069857610580565b8063267031b8116104c6578063267031b8146106625780632864f4011461066a5780632a0acc6a1461067d57610580565b806320e8d8191461063c578063247ae0a61461064f57610580565b806316de7a43116105385780631b6695071161051d5780631b669507146106195780631bc5d81d1461062157806320b155151461062957610580565b806316de7a43146105f35780631744a9b61461060657610580565b80630b550546116105695780630b550546146105c35780630bba92b3146105cb5780630f7c43dc146105de57610580565b80630196c36114610585578063065d570f146105ae575b600080fd5b610598610593366004613f8b565b610a99565b6040516105a59190614797565b60405180910390f35b6105b6610aca565b6040516105a5919061475e565b610598610acf565b6105986105d9366004613fb6565b610ad5565b6105f16105ec366004613f8b565b610ba3565b005b6105f1610601366004613f8b565b610bf9565b610598610614366004613dee565b610d27565b6105b6610d7b565b6105b6610d80565b610598610637366004613dee565b610d85565b6105f161064a366004614090565b610d97565b61059861065d366004613f8b565b610ea8565b610598610ec4565b6105f1610678366004614024565b610eca565b6105b6610f61565b6105f1610693366004613f8b565b610f66565b6105b6610fe3565b6105b6610fe8565b6105f16106b63660046140ab565b610fed565b6106c3611065565b6040516105a59190614112565b6105986106de366004613dee565b611081565b6105b6611093565b6105f16106f93660046140ab565b611098565b6105b6611110565b610598611115565b61059861071c366004613e2d565b61111b565b6105b6611136565b61073c6107373660046140ab565b61113b565b6040516105a59796959493929190614164565b6105b6611191565b610598611196565b61059861076d3660046140db565b61119c565b6105f1610780366004614076565b6111c1565b6105f16112c0565b6105986113a2565b6105986107a3366004613fea565b6113a8565b6105f16107b6366004613e65565b61144a565b6105f16107c93660046140ab565b6114f3565b6105b66115a6565b6107e96107e4366004613e2d565b6115ab565b6040516105a5939291906147a0565b6105b66115d7565b61081361080e366004613dee565b6115dc565b6040516105a591906147b6565b6106c36115f1565b6105f16108363660046140ab565b61160d565b610598611685565b6105b661168b565b6105f1610859366004613f8b565b611690565b6105f161086c366004613e65565b6116f8565b6105b6611e77565b6105b6611e7c565b610598611e81565b6106c3610897366004614076565b611e87565b610598611eaf565b6107e96108b2366004613dee565b611eb5565b6105986108c5366004613dee565b611ed6565b6105986108d8366004613dee565b611ee8565b6108f06108eb366004613f57565b611efa565b6040516105a591906141af565b6105f161090b3660046140ab565b611f1a565b61059861091e366004613dee565b612053565b610598610931366004613f8b565b612065565b6105b6612081565b6105f161094c3660046140ab565b612086565b6105b66120fe565b6105f1610967366004613dee565b612103565b6107e961097a366004613dee565b612170565b6105f161098d366004613f8b565b612191565b6105986109a0366004613f8b565b6121f9565b6105b6612215565b6105986109bb366004613f8b565b61221a565b6105986109ce366004613dee565b612236565b6105986109e1366004613dee565b612248565b6105986109f43660046140db565b612256565b610598610a07366004613f8b565b6122e0565b610598610a1a366004613f8b565b6122fc565b6105f1610a2d3660046140ab565b612318565b6105f1610a40366004613f8b565b6123cb565b610598610a53366004613f8b565b612574565b610598612590565b6105f1610a6e366004613dee565b612596565b6105f1610a81366004613dee565b6126e4565b6105f1610a94366004613f8b565b612743565b60186020528160005260406000208181548110610ab557600080fd5b90600052602060002001600091509150505481565b600381565b60135481565b600080610ae2858561289e565b90506000610b7d86601c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110610b61577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015486610b779190614810565b846128ee565b9050640100000000610b8f858361483c565b610b999190614828565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602090815260408083203384529091529020610bdd8382612bd2565b610be983823385612c54565b610bf4338484612dd7565b505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902054610c2a908290614810565b610c3383610d27565b10610d2357610c40612e93565b73ffffffffffffffffffffffffffffffffffffffff1663b3db428b3384846040518463ffffffff1660e01b8152600401610c7c93929190614133565b602060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce9190614056565b610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490614701565b60405180910390fd5b610d18823383612ed8565b610d23338383612fa9565b5050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040808320546006835281842054600590935290832054610d7392610d6e91614810565b61316f565b90505b919050565b600a81565b600881565b60106020526000908152604090205481565b6000546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290610def908590859060040161476d565b60206040518083038186803b158015610e0757600080fd5b505afa158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190614056565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020908152604080832061ffff90951683529390529190912080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b60176020528160005260406000208181548110610ab557600080fd5b600e5481565b610ed333613189565b610f09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490614217565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152601f6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055565b606b81565b610f6f336131c0565b610fa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906146ca565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081208054839290610fda908490614879565b90915550505050565b606981565b606781565b610ff56131f7565b73ffffffffffffffffffffffffffffffffffffffff166110136115f1565b73ffffffffffffffffffffffffffffffffffffffff1614611060576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b600a55565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600f6020526000908152604090205481565b600681565b6110a06131f7565b73ffffffffffffffffffffffffffffffffffffffff166110be6115f1565b73ffffffffffffffffffffffffffffffffffffffff161461110b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b600855565b606681565b60145481565b60208080526000928352604080842090915290825290205481565b606581565b601b60205260009081526040902080546001820154600283015460038401546004850154600586015460069096015473ffffffffffffffffffffffffffffffffffffffff95861696959094169492939192909187565b600181565b60085481565b6000806111ab84600d426131fb565b90506111b8858285613262565b95945050505050565b6000546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c9061121790849060040161475e565b60206040518083038186803b15801561122f57600080fd5b505afa158015611243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112679190613e11565b61ffff91909116600090815260016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6112c86131f7565b73ffffffffffffffffffffffffffffffffffffffff166112e66115f1565b73ffffffffffffffffffffffffffffffffffffffff1614611333576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b60035460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60115481565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600460205260408120546113d9908490614810565b6113e286610d27565b101580156113f257508360125410155b801561140057506011548410155b15611442576114123386868686613279565b33600081815260216020908152604082208054600181018255908352912001829055909150611442908685612fa9565b949350505050565b6114526131f7565b73ffffffffffffffffffffffffffffffffffffffff166114706115f1565b73ffffffffffffffffffffffffffffffffffffffff16146114bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b73ffffffffffffffffffffffffffffffffffffffff82166000908152601d602090815260409091208251610bf492840190613d7c565b6114fb6131f7565b73ffffffffffffffffffffffffffffffffffffffff166115196115f1565b73ffffffffffffffffffffffffffffffffffffffff1614611566576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b610e1081116115a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061456b565b601155565b606a81565b600b60209081526000928352604080842090915290825290208054600182015460029092015490919083565b600981565b601f6020526000908152604090205460ff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b6116156131f7565b73ffffffffffffffffffffffffffffffffffffffff166116336115f1565b73ffffffffffffffffffffffffffffffffffffffff1614611680576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b600e55565b60125481565b600281565b61169933613189565b6116cf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906145c8565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260066020526040902055565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260156020526040902054158061174f5750805173ffffffffffffffffffffffffffffffffffffffff8316600090815260156020526040902054145b611785576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906141ba565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260156020526040902054611e4157805167ffffffffffffffff8111156117f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611819578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff83166000908152601d6020908152604090912082516118549391929190910190613d7c565b50805167ffffffffffffffff811115611896577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156118bf578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff8316600090815260176020908152604090912082516118fa9391929190910190613d7c565b50805167ffffffffffffffff81111561193c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611965578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff8316600090815260196020908152604090912082516119a09391929190910190613d7c565b50805167ffffffffffffffff8111156119e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611a0b578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff83166000908152601a602090815260409091208251611a469391929190910190613d7c565b50805167ffffffffffffffff811115611a88577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611ab1578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff831660009081526016602090815260409091208251611aec9391929190910190613d7c565b50805167ffffffffffffffff811115611b2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611b57578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff831660009081526018602090815260409091208251611b929391929190910190613d7c565b5060006122386064611baa640100000000606e61483c565b611bb49190614828565b611bbe9190614828565b905060008251601354611bd19190614828565b905060005b8062ffffff1684511115611e3d576000611bf562ffffff83168461483c565b601154611c029190614810565b9050611c10610e1082614828565b611c1a908561483c565b73ffffffffffffffffffffffffffffffffffffffff87166000908152601d60205260409020805462ffffff8516908110611c7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555042601760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208362ffffff1681548110611d08577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555042601960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208362ffffff1681548110611d93577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555042601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208362ffffff1681548110611e1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001555080611e3581614890565b915050611bd6565b5050505b73ffffffffffffffffffffffffffffffffffffffff821660009081526015602090815260409091208251610bf492840190613d7c565b600581565b606881565b601e5481565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61271081565b600c6020526000908152604090208054600182015460029092015490919083565b60046020526000908152604090205481565b60076020526000908152604090205481565b600260209081526000928352604080842090915290825290205460ff1681565b6000818152601b60205260409020805473ffffffffffffffffffffffffffffffffffffffff163314611f78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490614625565b80600401544211611fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490614693565b611fbe816135fa565b6000828152601b6020526040812080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811682556001808301805490921690915560028083018490556003830184905560048301849055600583018490556006909201929092559082015490820154610d2391339173ffffffffffffffffffffffffffffffffffffffff90911690612dd7565b60066020526000908152604090205481565b601a6020528160005260406000208181548110610ab557600080fd5b606c81565b61208e6131f7565b73ffffffffffffffffffffffffffffffffffffffff166120ac6115f1565b73ffffffffffffffffffffffffffffffffffffffff16146120f9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b600955565b600481565b61210c33613189565b612142576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906143c2565b73ffffffffffffffffffffffffffffffffffffffff166000908152600d602052604090206401000000009055565b600d6020526000908152604090208054600182015460029092015490919083565b61219a33613189565b6121d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061441f565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260076020526040902055565b601c6020528160005260406000208181548110610ab557600080fd5b600781565b60196020528160005260406000208181548110610ab557600080fd5b60056020526000908152604090205481565b6000610d7382600d426131fb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600d60205260408120805461228990869085613262565b915060006122978684614879565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600560205260408120805492935083929091906122d1908490614810565b90915550929695505050505050565b60166020528160005260406000208181548110610ab557600080fd5b60156020528160005260406000208181548110610ab557600080fd5b6123206131f7565b73ffffffffffffffffffffffffffffffffffffffff1661233e6115f1565b73ffffffffffffffffffffffffffffffffffffffff161461238b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b60115481116123c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061450e565b601255565b6123d4336131c0565b61240a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906146ca565b612412612e93565b73ffffffffffffffffffffffffffffffffffffffff16635acf6903836040518263ffffffff1660e01b815260040161244a9190614112565b60206040518083038186803b15801561246257600080fd5b505afa158015612476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249a9190614056565b6124d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061465c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081208054839290612505908490614810565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600560209081526040808320546004909252909120541015610d23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906142d1565b60216020528160005260406000208181548110610ab557600080fd5b60095481565b61259e6131f7565b73ffffffffffffffffffffffffffffffffffffffff166125bc6115f1565b73ffffffffffffffffffffffffffffffffffffffff1614612609576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b73ffffffffffffffffffffffffffffffffffffffff8116612656576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061432e565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b60209081526040808320338452909152902061271e8282612bd2565b61272e8282338460000154612c54565b60008082556001820181905560029091015550565b61274c33613189565b612782576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490614274565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c602052604090205461283f5760408051606081018252640100000000815242602082015290810161223860646127d68582614810565b6127e59064010000000061483c565b6127ef9190614828565b6127f99190614828565b905273ffffffffffffffffffffffffffffffffffffffff83166000908152600c602090815260409182902083518155908301516001820155910151600290910155610d23565b612238606461284e8382614810565b61285d9064010000000061483c565b6128679190614828565b6128719190614828565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600c60205260409020600201555050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152601d60205260408120805460135483916128d391614828565b905080601154856128e49190614879565b6111b89190614828565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601d6020526040812080548390811061294c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106129d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000612710601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208581548110612a5b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154612a6f88610d27565b612a79919061483c565b612a839190614828565b73ffffffffffffffffffffffffffffffffffffffff871660009081526016602052604081208054929350909186908110612ae6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000601860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208681548110612b6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050600060135487612b89919061483c565b601154612b969190614810565b90506000612ba6610e1083614828565b600854612bb3919061483c565b9050612bc487878b888888876138d3565b9a9950505050505050505050565b60018101548015610bf4576000612be88461395b565b8354815491925090612bfc90829085613262565b808555600090612c0d908390614879565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260046020526040812080549293508392909190612c47908490614810565b9091555050505050505050565b6000610e10846002015442612c699190614879565b612c7391906148ec565b905080600a541015612cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061447c565b612cb9612e93565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed128685856040518463ffffffff1660e01b8152600401612cf593929190614133565b602060405180830381600087803b158015612d0f57600080fd5b505af1158015612d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d479190614056565b612d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061438b565b81846000016000828254612d919190614879565b909155505073ffffffffffffffffffffffffffffffffffffffff851660009081526004602052604081208054849290612dcb908490614879565b90915550505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260208080526040808320938616835292815282822054601f9091529190205460ff16612e1e613ac0565b73ffffffffffffffffffffffffffffffffffffffff1663a80167118284866040518463ffffffff1660e01b8152600401612e5a939291906147f5565b600060405180830381600087803b158015612e7457600080fd5b505af1158015612e88573d6000803e3d6000fd5b505050505050505050565b606560005260016020527f6def5a300acb6fcaa0dab3a41e9d6457b5147a641e641380f8cc4bf5308b16fe5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600b60209081526040808320938616835292905220612f148482612bd2565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600c60205260409020546001820155612f4b610e10426148ec565b6002820155805482908290600090612f64908490614810565b909155505073ffffffffffffffffffffffffffffffffffffffff841660009081526004602052604081208054849290612f9e908490614810565b909155505050505050565b6000612fb3613ac0565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260208080526040808320938816835292815282822054601f909152919020549192509060ff168115613089576040517ff542808700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f542808790613052908490869089906004016147f5565b600060405180830381600087803b15801561306c57600080fd5b505af1158015613080573d6000803e3d6000fd5b50505050613167565b6040517f583d861600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063583d8616906130df9084908a9089906004016147c4565b602060405180830381600087803b1580156130f957600080fd5b505af115801561310d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313191906140c3565b73ffffffffffffffffffffffffffffffffffffffff808816600090815260208080526040808320938a1683529290522081905591505b505050505050565b600081831115613180575080613183565b50815b92915050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206009845290915290205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206003845290915290205460ff1690565b3390565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020839052604081206001015481906132309084614879565b73ffffffffffffffffffffffffffffffffffffffff861660009081526020869052604090209091506111b89082613b05565b60008161326f848661483c565b6114429190614828565b600080613286868661289e565b9050600061331b87601c60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613305577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015487610b779190614810565b9050600064010000000061332f878461483c565b6133399190614828565b90508481106135ee5761334a612e93565b73ffffffffffffffffffffffffffffffffffffffff1663b3db428b8a8a896040518463ffffffff1660e01b815260040161338693929190614133565b602060405180830381600087803b1580156133a057600080fd5b505af11580156133b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d89190614056565b156135ee57600060026133eb8389614810565b6133f59190614828565b73ffffffffffffffffffffffffffffffffffffffff8a1660009081526004602052604081208054929350839290919061342f908490614810565b909155505073ffffffffffffffffffffffffffffffffffffffff89166000908152601c60205260409020805482919086908110613495577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160008282546134ae9190614810565b9091555050601e80549550859060006134c6836148b3565b91905055506040518060e001604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff16815260200188815260200183815260200189426135269190614810565b815260208082018b905260409182018690526000888152601b8252828120845181547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff92831617835586850151600184018054909216908316179055858501516002830155606086015160038301556080860151600483015560a0860151600583015560c090950151600690910155928c16835260168152818320601790915291206135ec9190868a613bae565b505b50505095945050505050565b6001810154600582015473ffffffffffffffffffffffffffffffffffffffff9091169060009061362b90839061289e565b905060006002846003015485600201546136459190614810565b61364f9190614828565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260046020526040812080549293508392909190613689908490614879565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152601c602052604090208054829190849081106136ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160008282546137089190614879565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526018602090815260408083206019909252909120600286015461374f9291908590613bae565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083205460059092529091205411806138435750613790612e93565b845460038601546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363d9caed12936137ef9389939290911691600401614133565b602060405180830381600087803b15801561380957600080fd5b505af115801561381d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138419190614056565b155b156138cd578354600385015460405173ffffffffffffffffffffffffffffffffffffffff928316928616917fbcab653cf73e12f7bb78aa625dccb002864f5de7de2518796fb5b82fd6e6ab059161389a9190614797565b60405180910390a3835460038501546138cd91859173ffffffffffffffffffffffffffffffffffffffff90911690613d71565b50505050565b8660006138e08842614879565b90506000600954826138f2919061483c565b905086881015806139035750848610155b1561392357613912838261316f565b61391c9084614879565b925061394e565b878711801561393157508585115b1561394e576139408184614810565b92508383111561394e578392505b5050979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c6020526040812060018101549091906139929042614879565b905061399e8282613b05565b82556002820154600183015473ffffffffffffffffffffffffffffffffffffffff8516600090815260046020526040902054613a199291906139df87610d27565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600f60209081526040808320546010909252909120546008546138d3565b600283015573ffffffffffffffffffffffffffffffffffffffff83166000908152600d602052604090206001810154613a529042614879565b9150613a5e8183613b05565b81556002830154600e54606491613a749161483c565b613a7e9190614828565b73ffffffffffffffffffffffffffffffffffffffff9094166000908152600d602052604090206002019390935550426001808301829055929092019190915590565b606c60005260016020527fd80c728dcb954e7539257f5b9090fa0c83e482d978be864c61ec2b155c05c2525473ffffffffffffffffffffffffffffffffffffffff1690565b600080613b14610e10846148ec565b9050613b27640100000000610e1061483c565b600285015485548391613b399161483c565b613b43919061483c565b613b4d9190614828565b91506000613b5d610e1085614828565b90508015613ba65760005b80821115613ba457640100000000866002015485613b86919061483c565b613b909190614828565b935080613b9c816148b3565b915050613b68565b505b505092915050565b8354601354600091613bbf91614828565b90506000613bcd848361483c565b601154613bda9190614810565b90506000858581548110613c17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015442613c2d9190614879565b90506000613c3c826001614810565b613c46848761483c565b613c509190614828565b90506000613c6061025885614828565b9050613c6c8382614810565b613c76848461483c565b828b8a81548110613cb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154613cc5919061483c565b613ccf9190614810565b613cd99190614828565b898881548110613d12577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555042888881548110613d5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260209091200155505050505050505050565b610bf4838383612ed8565b828054828255906000526020600020908101928215613db7579160200282015b82811115613db7578251825591602001919060010190613d9c565b50613dc3929150613dc7565b5090565b5b80821115613dc35760008155600101613dc8565b803561ffff81168114610d7657600080fd5b600060208284031215613dff578081fd5b8135613e0a8161498d565b9392505050565b600060208284031215613e22578081fd5b8151613e0a8161498d565b60008060408385031215613e3f578081fd5b8235613e4a8161498d565b91506020830135613e5a8161498d565b809150509250929050565b60008060408385031215613e77578182fd5b8235613e828161498d565b915060208381013567ffffffffffffffff80821115613e9f578384fd5b818601915086601f830112613eb2578384fd5b813581811115613ec457613ec461495e565b8381026040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715613f0657613f0661495e565b604052828152858101935084860182860187018b1015613f24578788fd5b8795505b83861015613f46578035855260019590950194938601938601613f28565b508096505050505050509250929050565b60008060408385031215613f69578182fd5b8235613f748161498d565b9150613f8260208401613ddc565b90509250929050565b60008060408385031215613f9d578182fd5b8235613fa88161498d565b946020939093013593505050565b600080600060608486031215613fca578081fd5b8335613fd58161498d565b95602085013595506040909401359392505050565b60008060008060808587031215613fff578081fd5b843561400a8161498d565b966020860135965060408601359560600135945092505050565b60008060408385031215614036578182fd5b82356140418161498d565b9150602083013560ff81168114613e5a578182fd5b600060208284031215614067578081fd5b81518015158114613e0a578182fd5b600060208284031215614087578081fd5b613e0a82613ddc565b600080604083850312156140a2578182fd5b613e4a83613ddc565b6000602082840312156140bc578081fd5b5035919050565b6000602082840312156140d4578081fd5b5051919050565b6000806000606084860312156140ef578081fd5b8335925060208401356141018161498d565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff978816815295909616602086015260408501939093526060840191909152608083015260a082015260c081019190915260e00190565b901515815260200190565b60208082526022908201527f43616e6e6f74206368616e67652073697a65206f66207765696768742061727260408201527f6179000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420696e6360408201527f656e74697665207472616e636865000000000000000000000000000000000000606082015260800190565b60208082526021908201527f6e6f74206175746f72697a656420746f2073657420686f75726c79207969656c60408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f496e73756666696369656e74206361706974616c20746f206c656e642c20747260408201527f7920616761696e206c6174657221000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526016908201527f496e73756666696369656e74206c697175696469747900000000000000000000604082015260600190565b60208082526027908201527f6e6f74206175746f72697a656420746f20696e6974207969656c64206163637560408201527f6d756c61746f7200000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f6e6f7420617574686f72697a656420746f20736574206c656e64696e6720636160408201527f7000000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252603f908201527f5472696564207769746864726177696e67206f7574736964652073756273637260408201527f697074696f6e2063616e63656c6c6174696f6e2074696d652077696e646f7700606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602c908201527f4d61782072756e74696d65206d7573742062652067726561746572207468616e60408201527f206d696e2072756e74696d650000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4d696e2072756e74696d65206e6565647320746f206265206174206c6561737460408201527f203120686f757200000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f6e6f74206175746f72697a656420746f20736574206c656e64696e672062756660408201527f6665720000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f4e6f7420686f6c646572206f6620626f6e640000000000000000000000000000604082015260600190565b60208082526015908201527f4e6f7420616e20617070726f76656420746f6b656e0000000000000000000000604082015260600190565b60208082526016908201527f626f6e64206973207374696c6c20696d6d617475726500000000000000000000604082015260600190565b60208082526018908201527f4e6f7420616e20617070726f76656420626f72726f7765720000000000000000604082015260600190565b6020808252602d908201527f436f756c64206e6f74207472616e7366657220626f6e64206465706f7369742060408201527f746f6b656e20746f2066756e6400000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60ff93909316835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60ff9390931683526020830191909152604082015260600190565b6000821982111561482357614823614900565b500190565b6000826148375761483761492f565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561487457614874614900565b500290565b60008282101561488b5761488b614900565b500390565b600062ffffff808316818114156148a9576148a9614900565b6001019392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156148e5576148e5614900565b5060010190565b6000826148fb576148fb61492f565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146149af57600080fd5b5056fea26469706673582212202a1739a60e2798d61f1898c9b1748854fd2bf292253ca4e9617d6a1f1171727a64736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106105805760003560e01c80638824cbba116102d7578063c94426a011610186578063e695fa68116100e3578063ef2cd3b811610097578063f2fde38b1161007c578063f2fde38b14610a60578063f884614b14610a73578063f90889c914610a8657610580565b8063ef2cd3b814610a45578063f11f979514610a5857610580565b8063e84bfdf4116100c8578063e84bfdf414610a0c578063ebc2273114610a1f578063ee0862bf14610a3257610580565b8063e695fa68146109e6578063e69f8959146109f957610580565b8063d3dc14b21161013a578063dcaf80291161011f578063dcaf8029146109ad578063e2e1ca2b146109c0578063e5ea6606146109d357610580565b8063d3dc14b214610992578063d5d7ed7f146109a557610580565b8063cc4b26a31161016b578063cc4b26a314610959578063cd3b5dfb1461096c578063d2b489341461097f57610580565b8063c94426a01461093e578063cacf8d451461095157610580565b8063b448165211610234578063c34316c3116101e8578063c4055ddf116101cd578063c4055ddf14610910578063c4f7d45d14610923578063c76139d01461093657610580565b8063c34316c3146108dd578063c3daab96146108fd57610580565b8063bfedc0bf11610219578063bfedc0bf146108a4578063c1cea807146108b7578063c2609c46146108ca57610580565b8063b448165214610889578063b8139c6d1461089c57610580565b8063a387832f1161028b578063a94c7c3411610270578063a94c7c3414610871578063a9cc053614610879578063aa7e321d1461088157610580565b8063a387832f1461084b578063a772404b1461085e57610580565b806391b46e05116102bc57806391b46e05146108285780639229e73f1461083b578063a0098d691461084357610580565b80638824cbba146108005780638da5cb5b1461082057610580565b80633aa58f4511610433578063687680ed116103905780637d34e4051161034457806381ca66001161032957806381ca6600146107ce57806383a04229146107d657806383a49c7c146107f857610580565b80637d34e405146107a8578063803a99b7146107bb57610580565b8063715018a611610375578063715018a614610785578063773bbb3b1461078d5780637b8b4ee21461079557610580565b8063687680ed1461075f5780636cd5cd601461077257610580565b80635adbeb15116103e75780635f1c17c0116103cc5780635f1c17c014610729578063669419841461074f57806367e2de921461075757610580565b80635adbeb151461070e5780635c275a391461072157610580565b80634804dd34116104185780634804dd34146106eb57806348fb27b8146106fe57806358d51f911461070657610580565b80633aa58f45146106d057806346b88796146106e357610580565b806320e8d819116104e15780632a6a897b1161049557806332fe7b261161047a57806332fe7b26146106a057806336953912146106a8578063392f5f64146106bb57610580565b80632a6a897b146106855780632fe94def1461069857610580565b8063267031b8116104c6578063267031b8146106625780632864f4011461066a5780632a0acc6a1461067d57610580565b806320e8d8191461063c578063247ae0a61461064f57610580565b806316de7a43116105385780631b6695071161051d5780631b669507146106195780631bc5d81d1461062157806320b155151461062957610580565b806316de7a43146105f35780631744a9b61461060657610580565b80630b550546116105695780630b550546146105c35780630bba92b3146105cb5780630f7c43dc146105de57610580565b80630196c36114610585578063065d570f146105ae575b600080fd5b610598610593366004613f8b565b610a99565b6040516105a59190614797565b60405180910390f35b6105b6610aca565b6040516105a5919061475e565b610598610acf565b6105986105d9366004613fb6565b610ad5565b6105f16105ec366004613f8b565b610ba3565b005b6105f1610601366004613f8b565b610bf9565b610598610614366004613dee565b610d27565b6105b6610d7b565b6105b6610d80565b610598610637366004613dee565b610d85565b6105f161064a366004614090565b610d97565b61059861065d366004613f8b565b610ea8565b610598610ec4565b6105f1610678366004614024565b610eca565b6105b6610f61565b6105f1610693366004613f8b565b610f66565b6105b6610fe3565b6105b6610fe8565b6105f16106b63660046140ab565b610fed565b6106c3611065565b6040516105a59190614112565b6105986106de366004613dee565b611081565b6105b6611093565b6105f16106f93660046140ab565b611098565b6105b6611110565b610598611115565b61059861071c366004613e2d565b61111b565b6105b6611136565b61073c6107373660046140ab565b61113b565b6040516105a59796959493929190614164565b6105b6611191565b610598611196565b61059861076d3660046140db565b61119c565b6105f1610780366004614076565b6111c1565b6105f16112c0565b6105986113a2565b6105986107a3366004613fea565b6113a8565b6105f16107b6366004613e65565b61144a565b6105f16107c93660046140ab565b6114f3565b6105b66115a6565b6107e96107e4366004613e2d565b6115ab565b6040516105a5939291906147a0565b6105b66115d7565b61081361080e366004613dee565b6115dc565b6040516105a591906147b6565b6106c36115f1565b6105f16108363660046140ab565b61160d565b610598611685565b6105b661168b565b6105f1610859366004613f8b565b611690565b6105f161086c366004613e65565b6116f8565b6105b6611e77565b6105b6611e7c565b610598611e81565b6106c3610897366004614076565b611e87565b610598611eaf565b6107e96108b2366004613dee565b611eb5565b6105986108c5366004613dee565b611ed6565b6105986108d8366004613dee565b611ee8565b6108f06108eb366004613f57565b611efa565b6040516105a591906141af565b6105f161090b3660046140ab565b611f1a565b61059861091e366004613dee565b612053565b610598610931366004613f8b565b612065565b6105b6612081565b6105f161094c3660046140ab565b612086565b6105b66120fe565b6105f1610967366004613dee565b612103565b6107e961097a366004613dee565b612170565b6105f161098d366004613f8b565b612191565b6105986109a0366004613f8b565b6121f9565b6105b6612215565b6105986109bb366004613f8b565b61221a565b6105986109ce366004613dee565b612236565b6105986109e1366004613dee565b612248565b6105986109f43660046140db565b612256565b610598610a07366004613f8b565b6122e0565b610598610a1a366004613f8b565b6122fc565b6105f1610a2d3660046140ab565b612318565b6105f1610a40366004613f8b565b6123cb565b610598610a53366004613f8b565b612574565b610598612590565b6105f1610a6e366004613dee565b612596565b6105f1610a81366004613dee565b6126e4565b6105f1610a94366004613f8b565b612743565b60186020528160005260406000208181548110610ab557600080fd5b90600052602060002001600091509150505481565b600381565b60135481565b600080610ae2858561289e565b90506000610b7d86601c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110610b61577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015486610b779190614810565b846128ee565b9050640100000000610b8f858361483c565b610b999190614828565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602090815260408083203384529091529020610bdd8382612bd2565b610be983823385612c54565b610bf4338484612dd7565b505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902054610c2a908290614810565b610c3383610d27565b10610d2357610c40612e93565b73ffffffffffffffffffffffffffffffffffffffff1663b3db428b3384846040518463ffffffff1660e01b8152600401610c7c93929190614133565b602060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce9190614056565b610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490614701565b60405180910390fd5b610d18823383612ed8565b610d23338383612fa9565b5050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040808320546006835281842054600590935290832054610d7392610d6e91614810565b61316f565b90505b919050565b600a81565b600881565b60106020526000908152604090205481565b6000546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290610def908590859060040161476d565b60206040518083038186803b158015610e0757600080fd5b505afa158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190614056565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020908152604080832061ffff90951683529390529190912080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b60176020528160005260406000208181548110610ab557600080fd5b600e5481565b610ed333613189565b610f09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490614217565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152601f6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055565b606b81565b610f6f336131c0565b610fa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906146ca565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081208054839290610fda908490614879565b90915550505050565b606981565b606781565b610ff56131f7565b73ffffffffffffffffffffffffffffffffffffffff166110136115f1565b73ffffffffffffffffffffffffffffffffffffffff1614611060576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b600a55565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600f6020526000908152604090205481565b600681565b6110a06131f7565b73ffffffffffffffffffffffffffffffffffffffff166110be6115f1565b73ffffffffffffffffffffffffffffffffffffffff161461110b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b600855565b606681565b60145481565b60208080526000928352604080842090915290825290205481565b606581565b601b60205260009081526040902080546001820154600283015460038401546004850154600586015460069096015473ffffffffffffffffffffffffffffffffffffffff95861696959094169492939192909187565b600181565b60085481565b6000806111ab84600d426131fb565b90506111b8858285613262565b95945050505050565b6000546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c9061121790849060040161475e565b60206040518083038186803b15801561122f57600080fd5b505afa158015611243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112679190613e11565b61ffff91909116600090815260016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6112c86131f7565b73ffffffffffffffffffffffffffffffffffffffff166112e66115f1565b73ffffffffffffffffffffffffffffffffffffffff1614611333576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b60035460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60115481565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600460205260408120546113d9908490614810565b6113e286610d27565b101580156113f257508360125410155b801561140057506011548410155b15611442576114123386868686613279565b33600081815260216020908152604082208054600181018255908352912001829055909150611442908685612fa9565b949350505050565b6114526131f7565b73ffffffffffffffffffffffffffffffffffffffff166114706115f1565b73ffffffffffffffffffffffffffffffffffffffff16146114bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b73ffffffffffffffffffffffffffffffffffffffff82166000908152601d602090815260409091208251610bf492840190613d7c565b6114fb6131f7565b73ffffffffffffffffffffffffffffffffffffffff166115196115f1565b73ffffffffffffffffffffffffffffffffffffffff1614611566576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b610e1081116115a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061456b565b601155565b606a81565b600b60209081526000928352604080842090915290825290208054600182015460029092015490919083565b600981565b601f6020526000908152604090205460ff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b6116156131f7565b73ffffffffffffffffffffffffffffffffffffffff166116336115f1565b73ffffffffffffffffffffffffffffffffffffffff1614611680576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b600e55565b60125481565b600281565b61169933613189565b6116cf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906145c8565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260066020526040902055565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260156020526040902054158061174f5750805173ffffffffffffffffffffffffffffffffffffffff8316600090815260156020526040902054145b611785576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906141ba565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260156020526040902054611e4157805167ffffffffffffffff8111156117f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611819578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff83166000908152601d6020908152604090912082516118549391929190910190613d7c565b50805167ffffffffffffffff811115611896577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156118bf578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff8316600090815260176020908152604090912082516118fa9391929190910190613d7c565b50805167ffffffffffffffff81111561193c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611965578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff8316600090815260196020908152604090912082516119a09391929190910190613d7c565b50805167ffffffffffffffff8111156119e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611a0b578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff83166000908152601a602090815260409091208251611a469391929190910190613d7c565b50805167ffffffffffffffff811115611a88577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611ab1578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff831660009081526016602090815260409091208251611aec9391929190910190613d7c565b50805167ffffffffffffffff811115611b2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611b57578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff831660009081526018602090815260409091208251611b929391929190910190613d7c565b5060006122386064611baa640100000000606e61483c565b611bb49190614828565b611bbe9190614828565b905060008251601354611bd19190614828565b905060005b8062ffffff1684511115611e3d576000611bf562ffffff83168461483c565b601154611c029190614810565b9050611c10610e1082614828565b611c1a908561483c565b73ffffffffffffffffffffffffffffffffffffffff87166000908152601d60205260409020805462ffffff8516908110611c7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555042601760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208362ffffff1681548110611d08577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555042601960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208362ffffff1681548110611d93577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555042601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208362ffffff1681548110611e1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001555080611e3581614890565b915050611bd6565b5050505b73ffffffffffffffffffffffffffffffffffffffff821660009081526015602090815260409091208251610bf492840190613d7c565b600581565b606881565b601e5481565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61271081565b600c6020526000908152604090208054600182015460029092015490919083565b60046020526000908152604090205481565b60076020526000908152604090205481565b600260209081526000928352604080842090915290825290205460ff1681565b6000818152601b60205260409020805473ffffffffffffffffffffffffffffffffffffffff163314611f78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490614625565b80600401544211611fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490614693565b611fbe816135fa565b6000828152601b6020526040812080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811682556001808301805490921690915560028083018490556003830184905560048301849055600583018490556006909201929092559082015490820154610d2391339173ffffffffffffffffffffffffffffffffffffffff90911690612dd7565b60066020526000908152604090205481565b601a6020528160005260406000208181548110610ab557600080fd5b606c81565b61208e6131f7565b73ffffffffffffffffffffffffffffffffffffffff166120ac6115f1565b73ffffffffffffffffffffffffffffffffffffffff16146120f9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b600955565b600481565b61210c33613189565b612142576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906143c2565b73ffffffffffffffffffffffffffffffffffffffff166000908152600d602052604090206401000000009055565b600d6020526000908152604090208054600182015460029092015490919083565b61219a33613189565b6121d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061441f565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260076020526040902055565b601c6020528160005260406000208181548110610ab557600080fd5b600781565b60196020528160005260406000208181548110610ab557600080fd5b60056020526000908152604090205481565b6000610d7382600d426131fb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600d60205260408120805461228990869085613262565b915060006122978684614879565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600560205260408120805492935083929091906122d1908490614810565b90915550929695505050505050565b60166020528160005260406000208181548110610ab557600080fd5b60156020528160005260406000208181548110610ab557600080fd5b6123206131f7565b73ffffffffffffffffffffffffffffffffffffffff1661233e6115f1565b73ffffffffffffffffffffffffffffffffffffffff161461238b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b60115481116123c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061450e565b601255565b6123d4336131c0565b61240a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906146ca565b612412612e93565b73ffffffffffffffffffffffffffffffffffffffff16635acf6903836040518263ffffffff1660e01b815260040161244a9190614112565b60206040518083038186803b15801561246257600080fd5b505afa158015612476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249a9190614056565b6124d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061465c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081208054839290612505908490614810565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600560209081526040808320546004909252909120541015610d23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906142d1565b60216020528160005260406000208181548110610ab557600080fd5b60095481565b61259e6131f7565b73ffffffffffffffffffffffffffffffffffffffff166125bc6115f1565b73ffffffffffffffffffffffffffffffffffffffff1614612609576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906144d9565b73ffffffffffffffffffffffffffffffffffffffff8116612656576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061432e565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b60209081526040808320338452909152902061271e8282612bd2565b61272e8282338460000154612c54565b60008082556001820181905560029091015550565b61274c33613189565b612782576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490614274565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c602052604090205461283f5760408051606081018252640100000000815242602082015290810161223860646127d68582614810565b6127e59064010000000061483c565b6127ef9190614828565b6127f99190614828565b905273ffffffffffffffffffffffffffffffffffffffff83166000908152600c602090815260409182902083518155908301516001820155910151600290910155610d23565b612238606461284e8382614810565b61285d9064010000000061483c565b6128679190614828565b6128719190614828565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600c60205260409020600201555050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152601d60205260408120805460135483916128d391614828565b905080601154856128e49190614879565b6111b89190614828565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601d6020526040812080548390811061294c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106129d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000612710601560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208581548110612a5b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154612a6f88610d27565b612a79919061483c565b612a839190614828565b73ffffffffffffffffffffffffffffffffffffffff871660009081526016602052604081208054929350909186908110612ae6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490506000601860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208681548110612b6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050600060135487612b89919061483c565b601154612b969190614810565b90506000612ba6610e1083614828565b600854612bb3919061483c565b9050612bc487878b888888876138d3565b9a9950505050505050505050565b60018101548015610bf4576000612be88461395b565b8354815491925090612bfc90829085613262565b808555600090612c0d908390614879565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260046020526040812080549293508392909190612c47908490614810565b9091555050505050505050565b6000610e10846002015442612c699190614879565b612c7391906148ec565b905080600a541015612cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061447c565b612cb9612e93565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed128685856040518463ffffffff1660e01b8152600401612cf593929190614133565b602060405180830381600087803b158015612d0f57600080fd5b505af1158015612d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d479190614056565b612d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d049061438b565b81846000016000828254612d919190614879565b909155505073ffffffffffffffffffffffffffffffffffffffff851660009081526004602052604081208054849290612dcb908490614879565b90915550505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260208080526040808320938616835292815282822054601f9091529190205460ff16612e1e613ac0565b73ffffffffffffffffffffffffffffffffffffffff1663a80167118284866040518463ffffffff1660e01b8152600401612e5a939291906147f5565b600060405180830381600087803b158015612e7457600080fd5b505af1158015612e88573d6000803e3d6000fd5b505050505050505050565b606560005260016020527f6def5a300acb6fcaa0dab3a41e9d6457b5147a641e641380f8cc4bf5308b16fe5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600b60209081526040808320938616835292905220612f148482612bd2565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600c60205260409020546001820155612f4b610e10426148ec565b6002820155805482908290600090612f64908490614810565b909155505073ffffffffffffffffffffffffffffffffffffffff841660009081526004602052604081208054849290612f9e908490614810565b909155505050505050565b6000612fb3613ac0565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260208080526040808320938816835292815282822054601f909152919020549192509060ff168115613089576040517ff542808700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f542808790613052908490869089906004016147f5565b600060405180830381600087803b15801561306c57600080fd5b505af1158015613080573d6000803e3d6000fd5b50505050613167565b6040517f583d861600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063583d8616906130df9084908a9089906004016147c4565b602060405180830381600087803b1580156130f957600080fd5b505af115801561310d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313191906140c3565b73ffffffffffffffffffffffffffffffffffffffff808816600090815260208080526040808320938a1683529290522081905591505b505050505050565b600081831115613180575080613183565b50815b92915050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206009845290915290205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206003845290915290205460ff1690565b3390565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020839052604081206001015481906132309084614879565b73ffffffffffffffffffffffffffffffffffffffff861660009081526020869052604090209091506111b89082613b05565b60008161326f848661483c565b6114429190614828565b600080613286868661289e565b9050600061331b87601c60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110613305577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015487610b779190614810565b9050600064010000000061332f878461483c565b6133399190614828565b90508481106135ee5761334a612e93565b73ffffffffffffffffffffffffffffffffffffffff1663b3db428b8a8a896040518463ffffffff1660e01b815260040161338693929190614133565b602060405180830381600087803b1580156133a057600080fd5b505af11580156133b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d89190614056565b156135ee57600060026133eb8389614810565b6133f59190614828565b73ffffffffffffffffffffffffffffffffffffffff8a1660009081526004602052604081208054929350839290919061342f908490614810565b909155505073ffffffffffffffffffffffffffffffffffffffff89166000908152601c60205260409020805482919086908110613495577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160008282546134ae9190614810565b9091555050601e80549550859060006134c6836148b3565b91905055506040518060e001604052808b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff16815260200188815260200183815260200189426135269190614810565b815260208082018b905260409182018690526000888152601b8252828120845181547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff92831617835586850151600184018054909216908316179055858501516002830155606086015160038301556080860151600483015560a0860151600583015560c090950151600690910155928c16835260168152818320601790915291206135ec9190868a613bae565b505b50505095945050505050565b6001810154600582015473ffffffffffffffffffffffffffffffffffffffff9091169060009061362b90839061289e565b905060006002846003015485600201546136459190614810565b61364f9190614828565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260046020526040812080549293508392909190613689908490614879565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152601c602052604090208054829190849081106136ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160008282546137089190614879565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526018602090815260408083206019909252909120600286015461374f9291908590613bae565b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083205460059092529091205411806138435750613790612e93565b845460038601546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363d9caed12936137ef9389939290911691600401614133565b602060405180830381600087803b15801561380957600080fd5b505af115801561381d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138419190614056565b155b156138cd578354600385015460405173ffffffffffffffffffffffffffffffffffffffff928316928616917fbcab653cf73e12f7bb78aa625dccb002864f5de7de2518796fb5b82fd6e6ab059161389a9190614797565b60405180910390a3835460038501546138cd91859173ffffffffffffffffffffffffffffffffffffffff90911690613d71565b50505050565b8660006138e08842614879565b90506000600954826138f2919061483c565b905086881015806139035750848610155b1561392357613912838261316f565b61391c9084614879565b925061394e565b878711801561393157508585115b1561394e576139408184614810565b92508383111561394e578392505b5050979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c6020526040812060018101549091906139929042614879565b905061399e8282613b05565b82556002820154600183015473ffffffffffffffffffffffffffffffffffffffff8516600090815260046020526040902054613a199291906139df87610d27565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600f60209081526040808320546010909252909120546008546138d3565b600283015573ffffffffffffffffffffffffffffffffffffffff83166000908152600d602052604090206001810154613a529042614879565b9150613a5e8183613b05565b81556002830154600e54606491613a749161483c565b613a7e9190614828565b73ffffffffffffffffffffffffffffffffffffffff9094166000908152600d602052604090206002019390935550426001808301829055929092019190915590565b606c60005260016020527fd80c728dcb954e7539257f5b9090fa0c83e482d978be864c61ec2b155c05c2525473ffffffffffffffffffffffffffffffffffffffff1690565b600080613b14610e10846148ec565b9050613b27640100000000610e1061483c565b600285015485548391613b399161483c565b613b43919061483c565b613b4d9190614828565b91506000613b5d610e1085614828565b90508015613ba65760005b80821115613ba457640100000000866002015485613b86919061483c565b613b909190614828565b935080613b9c816148b3565b915050613b68565b505b505092915050565b8354601354600091613bbf91614828565b90506000613bcd848361483c565b601154613bda9190614810565b90506000858581548110613c17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015442613c2d9190614879565b90506000613c3c826001614810565b613c46848761483c565b613c509190614828565b90506000613c6061025885614828565b9050613c6c8382614810565b613c76848461483c565b828b8a81548110613cb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154613cc5919061483c565b613ccf9190614810565b613cd99190614828565b898881548110613d12577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555042888881548110613d5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260209091200155505050505050505050565b610bf4838383612ed8565b828054828255906000526020600020908101928215613db7579160200282015b82811115613db7578251825591602001919060010190613d9c565b50613dc3929150613dc7565b5090565b5b80821115613dc35760008155600101613dc8565b803561ffff81168114610d7657600080fd5b600060208284031215613dff578081fd5b8135613e0a8161498d565b9392505050565b600060208284031215613e22578081fd5b8151613e0a8161498d565b60008060408385031215613e3f578081fd5b8235613e4a8161498d565b91506020830135613e5a8161498d565b809150509250929050565b60008060408385031215613e77578182fd5b8235613e828161498d565b915060208381013567ffffffffffffffff80821115613e9f578384fd5b818601915086601f830112613eb2578384fd5b813581811115613ec457613ec461495e565b8381026040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715613f0657613f0661495e565b604052828152858101935084860182860187018b1015613f24578788fd5b8795505b83861015613f46578035855260019590950194938601938601613f28565b508096505050505050509250929050565b60008060408385031215613f69578182fd5b8235613f748161498d565b9150613f8260208401613ddc565b90509250929050565b60008060408385031215613f9d578182fd5b8235613fa88161498d565b946020939093013593505050565b600080600060608486031215613fca578081fd5b8335613fd58161498d565b95602085013595506040909401359392505050565b60008060008060808587031215613fff578081fd5b843561400a8161498d565b966020860135965060408601359560600135945092505050565b60008060408385031215614036578182fd5b82356140418161498d565b9150602083013560ff81168114613e5a578182fd5b600060208284031215614067578081fd5b81518015158114613e0a578182fd5b600060208284031215614087578081fd5b613e0a82613ddc565b600080604083850312156140a2578182fd5b613e4a83613ddc565b6000602082840312156140bc578081fd5b5035919050565b6000602082840312156140d4578081fd5b5051919050565b6000806000606084860312156140ef578081fd5b8335925060208401356141018161498d565b929592945050506040919091013590565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff978816815295909616602086015260408501939093526060840191909152608083015260a082015260c081019190915260e00190565b901515815260200190565b60208082526022908201527f43616e6e6f74206368616e67652073697a65206f66207765696768742061727260408201527f6179000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420696e6360408201527f656e74697665207472616e636865000000000000000000000000000000000000606082015260800190565b60208082526021908201527f6e6f74206175746f72697a656420746f2073657420686f75726c79207969656c60408201527f6400000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f496e73756666696369656e74206361706974616c20746f206c656e642c20747260408201527f7920616761696e206c6174657221000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526016908201527f496e73756666696369656e74206c697175696469747900000000000000000000604082015260600190565b60208082526027908201527f6e6f74206175746f72697a656420746f20696e6974207969656c64206163637560408201527f6d756c61746f7200000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f6e6f7420617574686f72697a656420746f20736574206c656e64696e6720636160408201527f7000000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252603f908201527f5472696564207769746864726177696e67206f7574736964652073756273637260408201527f697074696f6e2063616e63656c6c6174696f6e2074696d652077696e646f7700606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602c908201527f4d61782072756e74696d65206d7573742062652067726561746572207468616e60408201527f206d696e2072756e74696d650000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4d696e2072756e74696d65206e6565647320746f206265206174206c6561737460408201527f203120686f757200000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f6e6f74206175746f72697a656420746f20736574206c656e64696e672062756660408201527f6665720000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f4e6f7420686f6c646572206f6620626f6e640000000000000000000000000000604082015260600190565b60208082526015908201527f4e6f7420616e20617070726f76656420746f6b656e0000000000000000000000604082015260600190565b60208082526016908201527f626f6e64206973207374696c6c20696d6d617475726500000000000000000000604082015260600190565b60208082526018908201527f4e6f7420616e20617070726f76656420626f72726f7765720000000000000000604082015260600190565b6020808252602d908201527f436f756c64206e6f74207472616e7366657220626f6e64206465706f7369742060408201527f746f6b656e20746f2066756e6400000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b9283526020830191909152604082015260600190565b60ff91909116815260200190565b60ff93909316835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60ff9390931683526020830191909152604082015260600190565b6000821982111561482357614823614900565b500190565b6000826148375761483761492f565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561487457614874614900565b500290565b60008282101561488b5761488b614900565b500390565b600062ffffff808316818114156148a9576148a9614900565b6001019392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156148e5576148e5614900565b5060010190565b6000826148fb576148fb61492f565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146149af57600080fd5b5056fea26469706673582212202a1739a60e2798d61f1898c9b1748854fd2bf292253ca4e9617d6a1f1171727a64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "applyBorrowInterest(uint256,address,uint256)": {
        "details": "how much interest has accrued to a borrowed balance over time"
      },
      "buyBond(address,uint256,uint256,uint256)": {
        "details": "buy fixed term bond that does not renew"
      },
      "buyHourlyBondSubscription(address,uint256)": {
        "details": "buy hourly bond subscription"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payOff(address,uint256)": {
        "details": "gets called by router if loan is extinguished"
      },
      "registerBorrow(address,uint256)": {
        "details": "gets called by router to register if a trader borrows tokens"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "viewBorrowInterest(uint256,address,uint256)": {
        "details": "view function to get current borrowing interest"
      },
      "viewBorrowingYieldFP(address)": {
        "details": "get the borrow yield"
      },
      "withdrawBond(uint256)": {
        "details": "send back funds of bond after maturity"
      },
      "withdrawHourlyBond(address,uint256)": {
        "details": "withdraw an hour bond"
      }
    },
    "stateVariables": {
      "bondIds": {
        "details": "IDs for all bonds held by an address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11727,
        "contract": "contracts/Lending.sol:Lending",
        "label": "roles",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Roles)12117"
      },
      {
        "astId": 11731,
        "contract": "contracts/Lending.sol:Lending",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 11737,
        "contract": "contracts/Lending.sol:Lending",
        "label": "roleCache",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_bool))"
      },
      {
        "astId": 381,
        "contract": "contracts/Lending.sol:Lending",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3509,
        "contract": "contracts/Lending.sol:Lending",
        "label": "totalLending",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3513,
        "contract": "contracts/Lending.sol:Lending",
        "label": "totalBorrowed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3517,
        "contract": "contracts/Lending.sol:Lending",
        "label": "lendingBuffer",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3521,
        "contract": "contracts/Lending.sol:Lending",
        "label": "lendingCap",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3523,
        "contract": "contracts/Lending.sol:Lending",
        "label": "maxHourlyYieldFP",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3525,
        "contract": "contracts/Lending.sol:Lending",
        "label": "yieldChangePerSecondFP",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 8099,
        "contract": "contracts/Lending.sol:Lending",
        "label": "withdrawalWindow",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 8106,
        "contract": "contracts/Lending.sol:Lending",
        "label": "hourlyBondAccounts",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(HourlyBond)8093_storage))"
      },
      {
        "astId": 8111,
        "contract": "contracts/Lending.sol:Lending",
        "label": "hourlyBondYieldAccumulators",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(YieldAccumulator)8086_storage)"
      },
      {
        "astId": 8117,
        "contract": "contracts/Lending.sol:Lending",
        "label": "borrowYieldAccumulators",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(YieldAccumulator)8086_storage)"
      },
      {
        "astId": 8120,
        "contract": "contracts/Lending.sol:Lending",
        "label": "borrowingFactorPercent",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8124,
        "contract": "contracts/Lending.sol:Lending",
        "label": "hourlyBondBuyingSpeed",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8128,
        "contract": "contracts/Lending.sol:Lending",
        "label": "hourlyBondWithdrawingSpeed",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3766,
        "contract": "contracts/Lending.sol:Lending",
        "label": "minRuntime",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3769,
        "contract": "contracts/Lending.sol:Lending",
        "label": "maxRuntime",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3771,
        "contract": "contracts/Lending.sol:Lending",
        "label": "diffMaxMinRuntime",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3776,
        "contract": "contracts/Lending.sol:Lending",
        "label": "borrowingMarkupFP",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3781,
        "contract": "contracts/Lending.sol:Lending",
        "label": "runtimeWeights",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3786,
        "contract": "contracts/Lending.sol:Lending",
        "label": "buyingSpeed",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3791,
        "contract": "contracts/Lending.sol:Lending",
        "label": "lastBought",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3796,
        "contract": "contracts/Lending.sol:Lending",
        "label": "withdrawingSpeed",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3801,
        "contract": "contracts/Lending.sol:Lending",
        "label": "lastWithdrawn",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3806,
        "contract": "contracts/Lending.sol:Lending",
        "label": "yieldLastUpdated",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3811,
        "contract": "contracts/Lending.sol:Lending",
        "label": "bonds",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_struct(Bond)3760_storage)"
      },
      {
        "astId": 3816,
        "contract": "contracts/Lending.sol:Lending",
        "label": "totalLendingPerRuntime",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3821,
        "contract": "contracts/Lending.sol:Lending",
        "label": "runtimeYieldsFP",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3824,
        "contract": "contracts/Lending.sol:Lending",
        "label": "nextBondIndex",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 9298,
        "contract": "contracts/Lending.sol:Lending",
        "label": "incentiveTranches",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 9304,
        "contract": "contracts/Lending.sol:Lending",
        "label": "claimIds",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9444,
        "contract": "contracts/Lending.sol:Lending",
        "label": "bondIds",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Roles)12117": {
        "encoding": "inplace",
        "label": "contract Roles",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(HourlyBond)8093_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct HourlyBond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(HourlyBond)8093_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bool)"
      },
      "t_mapping(t_address,t_struct(HourlyBond)8093_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HourlyBond)",
        "numberOfBytes": "32",
        "value": "t_struct(HourlyBond)8093_storage"
      },
      "t_mapping(t_address,t_struct(YieldAccumulator)8086_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YieldAccumulator)",
        "numberOfBytes": "32",
        "value": "t_struct(YieldAccumulator)8086_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Bond)3760_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)3760_storage"
      },
      "t_struct(Bond)3760_storage": {
        "encoding": "inplace",
        "label": "struct Bond",
        "members": [
          {
            "astId": 3747,
            "contract": "contracts/Lending.sol:Lending",
            "label": "holder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3749,
            "contract": "contracts/Lending.sol:Lending",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3751,
            "contract": "contracts/Lending.sol:Lending",
            "label": "originalPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3753,
            "contract": "contracts/Lending.sol:Lending",
            "label": "returnAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3755,
            "contract": "contracts/Lending.sol:Lending",
            "label": "maturityTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3757,
            "contract": "contracts/Lending.sol:Lending",
            "label": "runtime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3759,
            "contract": "contracts/Lending.sol:Lending",
            "label": "yieldFP",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(HourlyBond)8093_storage": {
        "encoding": "inplace",
        "label": "struct HourlyBond",
        "members": [
          {
            "astId": 8088,
            "contract": "contracts/Lending.sol:Lending",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8090,
            "contract": "contracts/Lending.sol:Lending",
            "label": "yieldQuotientFP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8092,
            "contract": "contracts/Lending.sol:Lending",
            "label": "moduloHour",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(YieldAccumulator)8086_storage": {
        "encoding": "inplace",
        "label": "struct YieldAccumulator",
        "members": [
          {
            "astId": 8081,
            "contract": "contracts/Lending.sol:Lending",
            "label": "accumulatorFP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8083,
            "contract": "contracts/Lending.sol:Lending",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8085,
            "contract": "contracts/Lending.sol:Lending",
            "label": "hourlyYieldFP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}