{
  "address": "0x6928f9717C49D5F20f112bdF6E21663FB36A3956",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_peg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidationShortfall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUTHORIZED_FUND_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIDENT_UPDATE_RATE_PERMIL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_SOURCE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUND",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_DISTRIBUTION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_REPORTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LENDING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_CUT_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_CALLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_PENALIZER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEPID_UPDATE_RATE_PERMIL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_ACTIVATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "avgLiquidationPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coolingOffPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "liquidatedAccounts",
          "type": "address[]"
        }
      ],
      "name": "disburseLiqStakeAttacks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failureThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "forcePriceUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getBorrowAmounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "borrowTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "borrowAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getHoldingAmounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "holdingTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "holdingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getLastDepositBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqStakeAttackWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "liquidationCandidates",
          "type": "address[]"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maintainerCut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationThresholdPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maintenanceFailures",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "peg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceUpdateWindow",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "registerBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "registerDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extinguishableDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "registerLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "name": "registerTradeAndBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extinguishableDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "registerWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setConfidentUpdateRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocks",
          "type": "uint256"
        }
      ],
      "name": "setCoolingOffPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshFactor",
          "type": "uint256"
        }
      ],
      "name": "setFailureThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leverage",
          "type": "uint256"
        }
      ],
      "name": "setLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "setLiqStakeAttackWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "setLiquidationPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationThresholdPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cut",
          "type": "uint256"
        }
      ],
      "name": "setMaintainerCutPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "window",
          "type": "uint16"
        }
      ],
      "name": "setPriceUpdateWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setTepidUpdateRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "setTokenCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setUpdateMaxPegAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setUpdateMinPegAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeAttackRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "loser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakeAttacker",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockLastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenPer1k",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalLong",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalShort",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "role",
          "type": "uint16"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "role",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x547c99c41ab2b21226e38160e7270736b40b8fc250f293f37e5558b4ad948a43",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0x6928f9717C49D5F20f112bdF6E21663FB36A3956",
    "transactionIndex": 4,
    "gasUsed": "5190132",
    "logsBloom": "0x
    "blockHash": "0x0c6cce615167782eb0d18ebfdeaf17232082e30f567271b2fecde18f7adaff12",
    "transactionHash": "0x547c99c41ab2b21226e38160e7270736b40b8fc250f293f37e5558b4ad948a43",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 23976649,
        "transactionHash": "0x547c99c41ab2b21226e38160e7270736b40b8fc250f293f37e5558b4ad948a43",
        "address": "0x6928f9717C49D5F20f112bdF6E21663FB36A3956",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023292e9ba8434e59e6bac1907ba7425211c4de27"
        ],
        "data": "0x",
        "logIndex": 78,
        "blockHash": "0x0c6cce615167782eb0d18ebfdeaf17232082e30f567271b2fecde18f7adaff12"
      }
    ],
    "blockNumber": 23976649,
    "cumulativeGasUsed": "5936049",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdac17f958d2ee523a2206206994597c13d831ec7",
    "0xa94DDbb3Ba629E637F63F54Bae6724c271ccA48f"
  ],
  "solcInputHash": "08be857727729141da45d726c3ea7073",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidationShortfall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORIZED_FUND_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIDENT_UPDATE_RATE_PERMIL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_SOURCE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_REPORTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_CUT_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_CALLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_PENALIZER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEPID_UPDATE_RATE_PERMIL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ACTIVATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgLiquidationPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolingOffPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"liquidatedAccounts\",\"type\":\"address[]\"}],\"name\":\"disburseLiqStakeAttacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failureThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"forcePriceUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getBorrowAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getHoldingAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"holdingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"holdingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getLastDepositBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqStakeAttackWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"liquidationCandidates\",\"type\":\"address[]\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maintainerCut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maintenanceFailures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceUpdateWindow\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"registerBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"registerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extinguishableDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"registerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"name\":\"registerTradeAndBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extinguishableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"registerWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setConfidentUpdateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"setCoolingOffPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshFactor\",\"type\":\"uint256\"}],\"name\":\"setFailureThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"}],\"name\":\"setLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"setLiqStakeAttackWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"setLiquidationPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setLiquidationThresholdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cut\",\"type\":\"uint256\"}],\"name\":\"setMaintainerCutPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"window\",\"type\":\"uint16\"}],\"name\":\"setPriceUpdateWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTepidUpdateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setTokenCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setUpdateMaxPegAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setUpdateMinPegAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeAttackRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"loser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeAttacker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPer1k\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"role\",\"type\":\"uint16\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"role\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBorrowAmounts(address)\":{\"details\":\"view function to display account borrowing state\"},\"getHoldingAmounts(address)\":{\"details\":\"view function to display account held assets state\"},\"getLastDepositBlock(address)\":{\"details\":\"last time this account deposited relevant for withdrawal window\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerBorrow(address,address,uint256)\":{\"details\":\"gets called by router to affirm isolated borrowing event\"},\"registerDeposit(address,address,uint256)\":{\"details\":\"gets called by router to affirm a deposit to an account\"},\"registerLiquidation(address)\":{\"details\":\"can get called by router to register the dissolution of an account\"},\"registerTradeAndBorrow(address,address,address,uint256,uint256)\":{\"details\":\"gets callled by router to register a trade and borrow and extinguis as necessary\"},\"registerWithdrawal(address,address,uint256)\":{\"details\":\"gets called by router to affirm withdrawal of tokens from account\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCoolingOffPeriod(uint256)\":{\"details\":\"setter for cooling off period for withdrawing funds after deposit\"},\"setLeverage(uint256)\":{\"details\":\"admin function to set leverage\"},\"setLiquidationThresholdPercent(uint256)\":{\"details\":\"admin function to set liquidation threshold\"},\"setTokenCap(address,uint256)\":{\"details\":\"admin function to set the token cap\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"liquidate(address[])\":{\"notice\":\"called by maintenance stakers to liquidate accounts below liquidation threshold\"},\"priceUpdateWindow()\":{\"notice\":\"update window in blocks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossMarginTrading.sol\":\"CrossMarginTrading\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./CrossMarginTrading.sol\\\";\\n\\n/// @dev Here we support staking for MFI incentives as well as\\n/// staking to perform the maintenance role.\\ncontract Admin is RoleAware, Ownable {\\n    address MFI;\\n    mapping(address => uint256) public stakes;\\n    uint256 public totalStakes;\\n    mapping(address => uint256) public claimIds;\\n\\n    uint256 feesPer10k;\\n    mapping(address => uint256) public collectedFees;\\n\\n    uint256 public maintenanceStakePerBlock = 10 ether;\\n    mapping(address => address) public nextMaintenanceStaker;\\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\\n    address public currentMaintenanceStaker;\\n    address public prevMaintenanceStaker;\\n    uint256 public currentMaintenanceStakerStartBlock;\\n    address public lockedMFI;\\n\\n    constructor(\\n        uint256 _feesPer10k,\\n        address _MFI,\\n        address _lockedMFI,\\n        address lockedMFIDelegate,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        feesPer10k = _feesPer10k;\\n        maintenanceStakePerBlock = 1 ether;\\n        lockedMFI = _lockedMFI;\\n\\n        // for initialization purposes and to ensure availability of service\\n        // the team's locked MFI participate in maintenance staking only\\n        // (not in the incentive staking part)\\n        // this implies some trust of the team to execute, which we deem reasonable\\n        // since the locked stake is temporary and diminishing as well as the fact\\n        // that the team is heavily invested in the protocol and incentivized\\n        // by fees like any other maintainer\\n        // furthermore others could step in to liquidate via the attacker route\\n        // and take away the team fees if they were delinquent\\n        nextMaintenanceStaker[lockedMFI] = lockedMFI;\\n        currentMaintenanceStaker = lockedMFI;\\n        prevMaintenanceStaker = lockedMFI;\\n        maintenanceDelegateTo[lockedMFI][lockedMFIDelegate];\\n        currentMaintenanceStakerStartBlock = block.number;\\n    }\\n\\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\\n        maintenanceStakePerBlock = amount;\\n    }\\n\\n    function _stake(address holder, uint256 amount) internal {\\n        require(\\n            Fund(fund()).depositFor(holder, MFI, amount),\\n            \\\"Could not deposit stake funds (perhaps make allowance to fund contract?\\\"\\n        );\\n        stakes[holder] += amount;\\n        totalStakes += amount;\\n\\n        if (claimIds[holder] > 0) {\\n            IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\\n                0,\\n                claimIds[holder],\\n                amount\\n            );\\n        } else {\\n            uint256 claimId =\\n                IncentiveDistribution(incentiveDistributor()).startClaim(\\n                    0,\\n                    holder,\\n                    amount\\n                );\\n            claimIds[holder] = claimId;\\n            require(claimId > 0, \\\"Distribution is over or paused\\\");\\n        }\\n    }\\n\\n    function depositStake(uint256 amount) external {\\n        _stake(msg.sender, amount);\\n    }\\n\\n    function _withdrawStake(\\n        address holder,\\n        uint256 amount,\\n        address recipient\\n    ) internal {\\n        uint256 stakeAmount = stakes[holder];\\n        // overflow failure desirable\\n        stakes[holder] = amount;\\n        totalStakes -= amount;\\n        require(\\n            Fund(fund()).withdraw(MFI, recipient, amount),\\n            \\\"Insufficient funds -- something went really wrong.\\\"\\n        );\\n        if (stakeAmount == amount) {\\n            IncentiveDistribution(incentiveDistributor()).endClaim(\\n                0,\\n                claimIds[holder]\\n            );\\n            claimIds[holder] = 0;\\n        } else {\\n            IncentiveDistribution(incentiveDistributor())\\n                .subtractFromClaimAmount(0, claimIds[holder], amount);\\n        }\\n    }\\n\\n    function withdrawStake(uint256 amount) external {\\n        require(\\n            !isAuthorizedStaker(msg.sender),\\n            \\\"You can't withdraw while you're authorized staker\\\"\\n        );\\n        _withdrawStake(msg.sender, amount, msg.sender);\\n    }\\n\\n    function addTradingFees(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / 10_000;\\n        collectedFees[token] += fees;\\n    }\\n\\n    function subtractTradingFees(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / (10_000 + feesPer10k);\\n        collectedFees[token] += fees;\\n    }\\n\\n    function depositMaintenanceStake(uint256 amount) external {\\n        require(\\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\\n            \\\"Insufficient stake to call even one block\\\"\\n        );\\n        _stake(msg.sender, amount);\\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\\n        }\\n    }\\n\\n    function getMaintenanceStakerStake(address staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (staker == lockedMFI) {\\n            return IERC20(MFI).balanceOf(lockedMFI) / 2;\\n        } else {\\n            return stakes[staker];\\n        }\\n    }\\n\\n    function getUpdatedCurrentStaker() public returns (address) {\\n        uint256 currentStake =\\n            getMaintenanceStakerStake(currentMaintenanceStaker);\\n        while (\\n            (block.number - currentMaintenanceStakerStartBlock) *\\n                maintenanceStakePerBlock >=\\n            currentStake\\n        ) {\\n            if (maintenanceStakePerBlock > currentStake) {\\n                // delete current from daisy chain\\n                address nextOne =\\n                    nextMaintenanceStaker[currentMaintenanceStaker];\\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\\n\\n                currentMaintenanceStaker = nextOne;\\n            } else {\\n                currentMaintenanceStakerStartBlock +=\\n                    stakes[currentMaintenanceStaker] /\\n                    maintenanceStakePerBlock;\\n\\n                prevMaintenanceStaker = currentMaintenanceStaker;\\n                currentMaintenanceStaker = nextMaintenanceStaker[\\n                    currentMaintenanceStaker\\n                ];\\n            }\\n            currentStake = getMaintenanceStakerStake(currentMaintenanceStaker);\\n        }\\n        return currentMaintenanceStaker;\\n    }\\n\\n    function viewCurrentMaintenanceStaker()\\n        public\\n        view\\n        returns (address staker, uint256 startBlock)\\n    {\\n        staker = currentMaintenanceStaker;\\n        uint256 currentStake = getMaintenanceStakerStake(staker);\\n        startBlock = currentMaintenanceStakerStartBlock;\\n        while (\\n            (block.number - startBlock) * maintenanceStakePerBlock >=\\n            currentStake\\n        ) {\\n            if (maintenanceStakePerBlock > currentStake) {\\n                // skip\\n                staker = nextMaintenanceStaker[staker];\\n                currentStake = getMaintenanceStakerStake(staker);\\n            } else {\\n                startBlock +=\\n                    stakes[currentMaintenanceStaker] /\\n                    maintenanceStakePerBlock;\\n                staker = nextMaintenanceStaker[staker];\\n                currentStake = getMaintenanceStakerStake(staker);\\n            }\\n        }\\n    }\\n\\n    function addDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = true;\\n    }\\n\\n    function removeDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = false;\\n    }\\n\\n    function isAuthorizedStaker(address caller)\\n        public\\n        returns (bool isAuthorized)\\n    {\\n        address currentStaker = getUpdatedCurrentStaker();\\n        isAuthorized =\\n            currentStaker == caller ||\\n            maintenanceDelegateTo[currentStaker][caller];\\n    }\\n\\n    function penalizeMaintenanceStake(\\n        address maintainer,\\n        uint256 penalty,\\n        address recipient\\n    ) external returns (uint256 stakeTaken) {\\n        require(\\n            isStakePenalizer(msg.sender),\\n            \\\"msg.sender not authorized to penalize stakers\\\"\\n        );\\n        if (penalty > stakes[maintainer]) {\\n            stakeTaken = stakes[maintainer];\\n        } else {\\n            stakeTaken = penalty;\\n        }\\n        _withdrawStake(maintainer, stakeTaken, recipient);\\n    }\\n}\\n\",\"keccak256\":\"0xb5e8c7e0f1eb101cc8f0a4a607d43fedc6d553b4a0ea8be54a26245d24dc7b88\",\"license\":\"GPL-2.0-only\"},\"contracts/BaseLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\nabstract contract BaseLending is RoleAware, Ownable {\\n    uint256 constant FP32 = 2**32;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    mapping(address => uint256) public totalLending;\\n    mapping(address => uint256) public totalBorrowed;\\n    mapping(address => uint256) public lendingBuffer;\\n    mapping(address => uint256) public lendingCap;\\n\\n    uint256 public maxHourlyYieldFP;\\n    uint256 public yieldChangePerSecondFP;\\n\\n    /// @dev simple formula for calculating interest relative to accumulator\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    /// update the yield for an asset based on recent supply and demand\\n    function updatedYieldFP(\\n        // previous yield\\n        uint256 _yieldFP,\\n        // timestamp\\n        uint256 lastUpdated,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketTarget,\\n        uint256 buyingSpeed,\\n        uint256 withdrawingSpeed,\\n        uint256 bucketMaxYield\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = _yieldFP;\\n        uint256 timeDiff = block.timestamp - lastUpdated;\\n        uint256 yieldDiff = timeDiff * yieldChangePerSecondFP;\\n\\n        if (\\n            totalLendingInBucket >= bucketTarget ||\\n            buyingSpeed >= withdrawingSpeed\\n        ) {\\n            yieldFP -= min(yieldFP, yieldDiff);\\n        } else if (\\n            bucketTarget > totalLendingInBucket &&\\n            withdrawingSpeed > buyingSpeed\\n        ) {\\n            yieldFP += yieldDiff;\\n            if (yieldFP > bucketMaxYield) {\\n                yieldFP = bucketMaxYield;\\n            }\\n        }\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function lendingTarget(address token) public view returns (uint256) {\\n        return\\n            min(lendingCap[token], totalBorrowed[token] + lendingBuffer[token]);\\n    }\\n\\n    function setLendingCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set lending cap\\\"\\n        );\\n        lendingCap[token] = cap;\\n    }\\n\\n    function setLendingBuffer(address token, uint256 buffer) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to set lending buffer\\\"\\n        );\\n        lendingBuffer[token] = buffer;\\n    }\\n\\n    function setMaxHourlyYieldFP(uint256 maxYieldFP) external onlyOwner {\\n        maxHourlyYieldFP = maxYieldFP;\\n    }\\n\\n    function setYieldChangePerSecondFP(uint256 changePerSecondFP)\\n        external\\n        onlyOwner\\n    {\\n        yieldChangePerSecondFP = changePerSecondFP;\\n    }\\n}\\n\",\"keccak256\":\"0x74026d83cd23380fdaec2a04c2df40fd7601bd9b58d4ed7e205c2c7f1ece7a3a\",\"license\":\"GPL-2.0-only\"},\"contracts/BondLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Bond {\\n    address holder;\\n    address token;\\n    uint256 originalPrice;\\n    uint256 returnAmount;\\n    uint256 maturityTimestamp;\\n    uint256 runtime;\\n    uint256 yieldFP;\\n}\\n\\n/// @dev Lending for fixed runtime, fixed interest\\n/// Lenders can pick their own bond maturity date --\\n/// In order to manage interest rates for the different\\n/// maturities and create a yield curve we bucket\\n/// bond runtimes into weighted baskets and adjust\\n/// rates individually per bucket, based on supply and demand.\\nabstract contract BondLending is BaseLending {\\n    uint256 public minRuntime = 30 days;\\n    uint256 public maxRuntime = 365 days;\\n    uint256 public diffMaxMinRuntime;\\n    // this is the numerator under runtimeWeights.\\n    // any excess left over is the weight of hourly bonds\\n    uint256 public constant WEIGHT_TOTAL_10k = 10_000;\\n    uint256 public borrowingMarkupFP;\\n\\n    mapping(address => uint256[]) public runtimeWeights;\\n    mapping(address => uint256[]) public buyingSpeed;\\n    mapping(address => uint256[]) public lastBought;\\n    mapping(address => uint256[]) public withdrawingSpeed;\\n    mapping(address => uint256[]) public lastWithdrawn;\\n    mapping(address => uint256[]) public yieldLastUpdated;\\n\\n    mapping(uint256 => Bond) public bonds;\\n\\n    mapping(address => uint256[]) public totalLendingPerRuntime;\\n    mapping(address => uint256[]) runtimeYieldsFP;\\n    uint256 public nextBondIndex = 1;\\n\\n    event LiquidityWarning(\\n        address indexed token,\\n        address indexed holder,\\n        uint256 value\\n    );\\n\\n    function _makeBond(\\n        address holder,\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) internal returns (uint256 bondIndex) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        uint256 bondReturn = (yieldFP * amount) / FP32;\\n        if (bondReturn >= minReturn) {\\n            if (Fund(fund()).depositFor(holder, token, amount)) {\\n                uint256 interpolatedAmount = (amount + bondReturn) / 2;\\n                totalLending[token] += interpolatedAmount;\\n\\n                totalLendingPerRuntime[token][\\n                    bucketIndex\\n                ] += interpolatedAmount;\\n\\n                bondIndex = nextBondIndex;\\n                nextBondIndex++;\\n\\n                bonds[bondIndex] = Bond({\\n                    holder: holder,\\n                    token: token,\\n                    originalPrice: amount,\\n                    returnAmount: bondReturn,\\n                    maturityTimestamp: block.timestamp + runtime,\\n                    runtime: runtime,\\n                    yieldFP: yieldFP\\n                });\\n\\n                updateSpeed(\\n                    buyingSpeed[token],\\n                    lastBought[token],\\n                    bucketIndex,\\n                    amount\\n                );\\n            }\\n        }\\n    }\\n\\n    function _withdrawBond(Bond storage bond) internal {\\n        address token = bond.token;\\n        uint256 bucketIndex = getBucketIndex(token, bond.runtime);\\n        uint256 interpolatedAmount =\\n            (bond.originalPrice + bond.returnAmount) / 2;\\n        totalLending[token] -= interpolatedAmount;\\n        totalLendingPerRuntime[token][bucketIndex] -= interpolatedAmount;\\n\\n        updateSpeed(\\n            withdrawingSpeed[token],\\n            lastWithdrawn[token],\\n            bucketIndex,\\n            bond.originalPrice\\n        );\\n\\n        if (\\n            totalBorrowed[token] > totalLending[token] ||\\n            !Fund(fund()).withdraw(token, bond.holder, bond.returnAmount)\\n        ) {\\n            // apparently there is a liquidity issue\\n            emit LiquidityWarning(token, bond.holder, bond.returnAmount);\\n            _makeFallbackBond(token, bond.holder, bond.returnAmount);\\n        }\\n    }\\n\\n    function getUpdatedBondYieldFP(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) internal returns (uint256 yieldFP, uint256 bucketIndex) {\\n        bucketIndex = getBucketIndex(token, runtime);\\n        yieldFP = calcBondYieldFP(\\n            token,\\n            amount + totalLendingPerRuntime[token][bucketIndex],\\n            bucketIndex\\n        );\\n        runtimeYieldsFP[token][bucketIndex] = yieldFP;\\n        yieldLastUpdated[token][bucketIndex] = block.timestamp;\\n    }\\n\\n    function calcBondYieldFP(\\n        address token,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketIndex\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = runtimeYieldsFP[token][bucketIndex];\\n        uint256 lastUpdated = yieldLastUpdated[token][bucketIndex];\\n\\n        uint256 bucketTarget =\\n            (lendingTarget(token) * runtimeWeights[token][bucketIndex]) /\\n                WEIGHT_TOTAL_10k;\\n\\n        uint256 buying = buyingSpeed[token][bucketIndex];\\n        uint256 withdrawing = withdrawingSpeed[token][bucketIndex];\\n\\n        uint256 runtime = minRuntime + bucketIndex * diffMaxMinRuntime;\\n        uint256 bucketMaxYield = maxHourlyYieldFP * (runtime / (1 hours));\\n\\n        yieldFP = updatedYieldFP(\\n            yieldFP,\\n            lastUpdated,\\n            totalLendingInBucket,\\n            bucketTarget,\\n            buying,\\n            withdrawing,\\n            bucketMaxYield\\n        );\\n    }\\n\\n    function viewBondReturn(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        return (yieldFP * amount) / FP32;\\n    }\\n\\n    function getBucketIndex(address token, uint256 runtime)\\n        internal\\n        view\\n        returns (uint256 bucketIndex)\\n    {\\n        uint256[] storage yieldsFP = runtimeYieldsFP[token];\\n        uint256 bucketSize = diffMaxMinRuntime / yieldsFP.length;\\n        bucketIndex = (runtime - minRuntime) / bucketSize;\\n    }\\n\\n    function updateSpeed(\\n        uint256[] storage speedRegister,\\n        uint256[] storage lastAction,\\n        uint256 bucketIndex,\\n        uint256 amount\\n    ) internal {\\n        uint256 bucketSize = diffMaxMinRuntime / speedRegister.length;\\n        uint256 runtime = minRuntime + bucketSize * bucketIndex;\\n        uint256 timeDiff = block.timestamp - lastAction[bucketIndex];\\n        uint256 currentSpeed = (amount * runtime) / (timeDiff + 1);\\n\\n        uint256 runtimeScale = runtime / (10 minutes);\\n        // scale adjustment relative togit  runtime\\n        speedRegister[bucketIndex] =\\n            (speedRegister[bucketIndex] *\\n                runtimeScale +\\n                currentSpeed *\\n                timeDiff) /\\n            (runtimeScale + timeDiff);\\n        lastAction[bucketIndex] = block.timestamp;\\n    }\\n\\n    function setRuntimeYieldsFP(address token, uint256[] memory yieldsFP)\\n        external\\n        onlyOwner\\n    {\\n        runtimeYieldsFP[token] = yieldsFP;\\n    }\\n\\n    function setRuntimeWeights(address token, uint256[] memory weights)\\n        external\\n    {\\n        //require(\\n        //    isTokenActivator(msg.sender),\\n        //    \\\"not autorized to set runtime weights\\\"\\n        //);\\n        require(\\n            runtimeWeights[token].length == 0 ||\\n                runtimeWeights[token].length == weights.length,\\n            \\\"Cannot change size of weight array\\\"\\n        );\\n        if (runtimeWeights[token].length == 0) {\\n            // we are initializing\\n\\n            runtimeYieldsFP[token] = new uint256[](weights.length);\\n            lastBought[token] = new uint256[](weights.length);\\n            lastWithdrawn[token] = new uint256[](weights.length);\\n            yieldLastUpdated[token] = new uint256[](weights.length);\\n            buyingSpeed[token] = new uint256[](weights.length);\\n            withdrawingSpeed[token] = new uint256[](weights.length);\\n\\n            uint256 hourlyYieldFP = (110 * FP32) / 100 / (24 * 365);\\n            uint256 bucketSize = diffMaxMinRuntime / weights.length;\\n\\n            for (uint24 i = 0; weights.length > i; i++) {\\n                uint256 runtime = minRuntime + bucketSize * i;\\n                // Do a best guess of initializing\\n                runtimeYieldsFP[token][i] =\\n                    hourlyYieldFP *\\n                    (runtime / (1 hours));\\n\\n                lastBought[token][i] = block.timestamp;\\n                lastWithdrawn[token][i] = block.timestamp;\\n                yieldLastUpdated[token][i] = block.timestamp;\\n            }\\n        }\\n\\n        runtimeWeights[token] = weights;\\n    }\\n\\n    function setMinRuntime(uint256 runtime) external onlyOwner {\\n        require(runtime > 1 hours, \\\"Min runtime needs to be at least 1 hour\\\");\\n        minRuntime = runtime;\\n    }\\n\\n    function setMaxRuntime(uint256 runtime) external onlyOwner {\\n        require(\\n            runtime > minRuntime,\\n            \\\"Max runtime must be greater than min runtime\\\"\\n        );\\n        maxRuntime = runtime;\\n    }\\n}\\n\",\"keccak256\":\"0x930816f1d0667cbc2aa9bc95c81be0143889158dfb375433c693a7f13a9d9a72\",\"license\":\"GPL-2.0-only\"},\"contracts/CrossMarginAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"./PriceAware.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\nstruct CrossMarginAccount {\\n    uint256 lastDepositBlock;\\n    address[] borrowTokens;\\n    // borrowed token address => amount\\n    mapping(address => uint256) borrowed;\\n    // borrowed token => yield quotient\\n    mapping(address => uint256) borrowedYieldQuotientsFP;\\n    address[] holdingTokens;\\n    // token held in portfolio => amount\\n    mapping(address => uint256) holdings;\\n    // boolean value of whether an account holds a token\\n    mapping(address => bool) holdsToken;\\n}\\n\\nabstract contract CrossMarginAccounts is RoleAware, PriceAware {\\n    /// @dev gets used in calculating how much accounts can borrow\\n    uint256 public leverage;\\n\\n    /// @dev percentage of assets held per assets borrowed at which to liquidate\\n    uint256 public liquidationThresholdPercent;\\n\\n    /// @dev record of all cross margin accounts\\n    mapping(address => CrossMarginAccount) marginAccounts;\\n    /// @dev total token caps\\n    mapping(address => uint256) public tokenCaps;\\n    /// @dev tracks total of short positions per token\\n    mapping(address => uint256) public totalShort;\\n    /// @dev tracks total of long positions per token\\n    mapping(address => uint256) public totalLong;\\n    uint256 public coolingOffPeriod;\\n\\n    /// @dev view function to display account held assets state\\n    function getHoldingAmounts(address trader)\\n        external\\n        view\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n        )\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        holdingTokens = account.holdingTokens;\\n\\n        holdingAmounts = new uint256[](account.holdingTokens.length);\\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\\n            address tokenAddress = holdingTokens[idx];\\n            holdingAmounts[idx] = account.holdings[tokenAddress];\\n        }\\n\\n        (holdingTokens, holdingAmounts);\\n    }\\n\\n    /// @dev view function to display account borrowing state\\n    function getBorrowAmounts(address trader)\\n        external\\n        view\\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrowTokens = account.borrowTokens;\\n\\n        borrowAmounts = new uint256[](account.borrowTokens.length);\\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\\n            address tokenAddress = borrowTokens[idx];\\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\\n                account.borrowed[tokenAddress],\\n                tokenAddress,\\n                account.borrowedYieldQuotientsFP[tokenAddress]\\n            );\\n        }\\n\\n        (borrowTokens, borrowAmounts);\\n    }\\n\\n    /// @dev last time this account deposited\\n    /// relevant for withdrawal window\\n    function getLastDepositBlock(address trader)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return marginAccounts[trader].lastDepositBlock;\\n    }\\n\\n    /// @dev add an asset to be held by account\\n    function addHolding(\\n        CrossMarginAccount storage account,\\n        address token,\\n        uint256 depositAmount\\n    ) internal {\\n        if (!hasHoldingToken(account, token)) {\\n            account.holdingTokens.push(token);\\n        }\\n\\n        account.holdings[token] += depositAmount;\\n    }\\n\\n    /// @dev adjust account to reflect borrowing of token amount\\n    function borrow(\\n        CrossMarginAccount storage account,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) internal {\\n        if (!hasBorrowedToken(account, borrowToken)) {\\n            account.borrowTokens.push(borrowToken);\\n        } else {\\n            account.borrowed[borrowToken] = Lending(lending())\\n                .applyBorrowInterest(\\n                account.borrowed[borrowToken],\\n                borrowToken,\\n                account.borrowedYieldQuotientsFP[borrowToken]\\n            );\\n        }\\n        account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\\n            .viewBorrowingYieldFP(borrowToken);\\n\\n        account.borrowed[borrowToken] += borrowAmount;\\n        addHolding(account, borrowToken, borrowAmount);\\n\\n        require(positiveBalance(account), \\\"Can't borrow: insufficient balance\\\");\\n    }\\n\\n    /// @dev checks whether account is in the black, deposit + earnings relative to borrowed\\n    function positiveBalance(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account, false);\\n        uint256 holdings = holdingsInPeg(account, false);\\n        // The following condition should hold:\\n        // holdings / loan >= leverage / (leverage - 1)\\n        // =>\\n        return holdings * (leverage - 1) >= loan * leverage;\\n    }\\n\\n    /// @dev internal function adjusting holding and borrow balances when debt extinguished\\n    function extinguishDebt(\\n        CrossMarginAccount storage account,\\n        address debtToken,\\n        uint256 extinguishAmount\\n    ) internal {\\n        // will throw if insufficient funds\\n        account.borrowed[debtToken] = Lending(lending()).applyBorrowInterest(\\n            account.borrowed[debtToken],\\n            debtToken,\\n            account.borrowedYieldQuotientsFP[debtToken]\\n        );\\n\\n        account.borrowed[debtToken] =\\n            account.borrowed[debtToken] -\\n            extinguishAmount;\\n        account.holdings[debtToken] =\\n            account.holdings[debtToken] -\\n            extinguishAmount;\\n\\n        if (account.borrowed[debtToken] > 0) {\\n            account.borrowedYieldQuotientsFP[debtToken] = Lending(lending())\\n                .viewBorrowingYieldFP(debtToken);\\n        }\\n    }\\n\\n    /// @dev checks whether an account holds a token\\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.holdsToken[token];\\n    }\\n\\n    /// @dev checks whether an account has borrowed a token\\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.borrowedYieldQuotientsFP[token] > 0;\\n    }\\n\\n    /// @dev calculate total loan in reference currency, including compound interest\\n    function loanInPeg(CrossMarginAccount storage account, bool forceCurBlock)\\n        internal\\n        returns (uint256)\\n    {\\n        return\\n            sumTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev total of assets of account, expressed in reference currency\\n    function holdingsInPeg(\\n        CrossMarginAccount storage account,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        return\\n            sumTokensInPeg(\\n                account.holdingTokens,\\n                account.holdings,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev check whether an account can/should be liquidated\\n    function belowMaintenanceThreshold(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account, true);\\n        uint256 holdings = holdingsInPeg(account, true);\\n        // The following should hold:\\n        // holdings / loan >= 1.1\\n        // => holdings >= loan * 1.1\\n        return 100 * holdings >= liquidationThresholdPercent * loan;\\n    }\\n\\n    /// @dev go through list of tokens and their amounts, summing up\\n    function sumTokensInPeg(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        bool forceCurBlock\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += PriceAware.getCurrentPriceInPeg(\\n                token,\\n                amounts[token],\\n                forceCurBlock\\n            );\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and ammounts, summing up with interest\\n    function sumTokensInPegWithYield(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        mapping(address => uint256) storage yieldQuotientsFP,\\n        bool forceCurBlock\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += yieldTokenInPeg(\\n                token,\\n                amounts[token],\\n                yieldQuotientsFP,\\n                forceCurBlock\\n            );\\n        }\\n    }\\n\\n    /// @dev calculate yield for token amount and convert to reference currency\\n    function yieldTokenInPeg(\\n        address token,\\n        uint256 amount,\\n        mapping(address => uint256) storage yieldQuotientsFP,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\\n        // 1 * FP / FP = 1\\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\\n        return\\n            PriceAware.getCurrentPriceInPeg(\\n                token,\\n                amountInToken,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev move tokens from one holding to another\\n    function adjustAmounts(\\n        CrossMarginAccount storage account,\\n        address fromToken,\\n        address toToken,\\n        uint256 soldAmount,\\n        uint256 boughtAmount\\n    ) internal {\\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\\n        addHolding(account, toToken, boughtAmount);\\n    }\\n\\n    /// sets borrow and holding to zero\\n    function deleteAccount(CrossMarginAccount storage account) internal {\\n        for (\\n            uint256 borrowIdx = 0;\\n            account.borrowTokens.length > borrowIdx;\\n            borrowIdx++\\n        ) {\\n            address borrowToken = account.borrowTokens[borrowIdx];\\n            totalShort[borrowToken] -= account.borrowed[borrowToken];\\n            account.borrowed[borrowToken] = 0;\\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\\n        }\\n        for (\\n            uint256 holdingIdx = 0;\\n            account.holdingTokens.length > holdingIdx;\\n            holdingIdx++\\n        ) {\\n            address holdingToken = account.holdingTokens[holdingIdx];\\n            totalLong[holdingToken] -= account.holdings[holdingToken];\\n            account.holdings[holdingToken] = 0;\\n            account.holdsToken[holdingToken] = false;\\n        }\\n        delete account.borrowTokens;\\n        delete account.holdingTokens;\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x12123e92a58628773990fb698085133519f5f85c554f84aa28ab00a39a43a335\",\"license\":\"GPL-2.0-only\"},\"contracts/CrossMarginLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CrossMarginAccounts.sol\\\";\\n\\n/// @dev Handles liquidation of accounts below maintenance threshold\\n/// Liquidation can be called by the authorized staker, as determined\\n/// in the Admin contract.\\n/// If the authorized staker is delinquent, other participants can jump\\n/// in and attack, taking their fees and potentially even their stake,\\n/// depending how delinquent the responsible authorized staker is.\\nabstract contract CrossMarginLiquidation is CrossMarginAccounts {\\n    event LiquidationShortfall(uint256 amount);\\n    event AccountLiquidated(address account);\\n\\n    struct Liquidation {\\n        uint256 buy;\\n        uint256 sell;\\n        uint256 blockNum;\\n    }\\n\\n    /// record kept around until a stake attacker can claim their reward\\n    struct AccountLiqRecord {\\n        uint256 blockNum;\\n        address loser;\\n        uint256 amount;\\n        address stakeAttacker;\\n    }\\n\\n    mapping(address => Liquidation) liquidationAmounts;\\n    address[] sellTokens;\\n    address[] buyTokens;\\n    address[] tradersToLiquidate;\\n\\n    mapping(address => uint256) public maintenanceFailures;\\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\\n    uint256 public avgLiquidationPerBlock = 10;\\n\\n    uint256 public liqStakeAttackWindow = 5;\\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\\n\\n    uint256 public failureThreshold = 10;\\n\\n    function setFailureThreshold(uint256 threshFactor) external onlyOwner {\\n        failureThreshold = threshFactor;\\n    }\\n\\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwner {\\n        liqStakeAttackWindow = window;\\n    }\\n\\n    function setMaintainerCutPercent(uint256 cut) external onlyOwner {\\n        MAINTAINER_CUT_PERCENT = cut;\\n    }\\n\\n    /// @dev calcLiquidationamounts does a number of tasks in this contract\\n    /// and some of them are not straightforward.\\n    /// First of all it aggregates liquidation amounts in storage (not in memory)\\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\\n    /// exist in memory.\\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\\n    /// (i.e. current caller is authorized). Also see context below.\\n    function calcLiquidationAmounts(\\n        address[] memory liquidationCandidates,\\n        bool isAuthorized\\n    ) internal returns (uint256 attackReturns) {\\n        sellTokens = new address[](0);\\n        buyTokens = new address[](0);\\n        tradersToLiquidate = new address[](0);\\n\\n        for (\\n            uint256 traderIndex = 0;\\n            liquidationCandidates.length > traderIndex;\\n            traderIndex++\\n        ) {\\n            address traderAddress = liquidationCandidates[traderIndex];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n            if (belowMaintenanceThreshold(account)) {\\n                tradersToLiquidate.push(traderAddress);\\n                for (\\n                    uint256 sellIdx = 0;\\n                    account.holdingTokens.length > sellIdx;\\n                    sellIdx++\\n                ) {\\n                    address token = account.holdingTokens[sellIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = account.holdings[token];\\n                        liquidation.buy = 0;\\n                        liquidation.blockNum = block.number;\\n                        sellTokens.push(token);\\n                    } else {\\n                        liquidation.sell += account.holdings[token];\\n                    }\\n                }\\n                for (\\n                    uint256 buyIdx = 0;\\n                    account.borrowTokens.length > buyIdx;\\n                    buyIdx++\\n                ) {\\n                    address token = account.borrowTokens[buyIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    uint256 loanAmount =\\n                        Lending(lending()).applyBorrowInterest(\\n                            account.borrowed[token],\\n                            token,\\n                            account.borrowedYieldQuotientsFP[token]\\n                        );\\n\\n                    Lending(lending()).payOff(token, loanAmount);\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = 0;\\n                        liquidation.buy = loanAmount;\\n                        liquidation.blockNum = block.number;\\n                        buyTokens.push(token);\\n                    } else {\\n                        liquidation.buy += loanAmount;\\n                    }\\n                }\\n            }\\n\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[traderAddress];\\n            if (isAuthorized) {\\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\\n            }\\n        }\\n    }\\n\\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\\n        internal\\n        returns (uint256 returnAmount)\\n    {\\n        if (liqAttackRecord.amount > 0) {\\n            // validate attack records, if any\\n            uint256 blockDiff =\\n                min(\\n                    block.number - liqAttackRecord.blockNum,\\n                    liqStakeAttackWindow\\n                );\\n\\n            uint256 attackerCut =\\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\\n\\n            Fund(fund()).withdraw(\\n                PriceAware.peg,\\n                liqAttackRecord.stakeAttacker,\\n                attackerCut\\n            );\\n\\n            Admin a = Admin(admin());\\n            uint256 penalty =\\n                (a.maintenanceStakePerBlock() * attackerCut) /\\n                    avgLiquidationPerBlock;\\n            a.penalizeMaintenanceStake(\\n                liqAttackRecord.loser,\\n                penalty,\\n                liqAttackRecord.stakeAttacker\\n            );\\n\\n            liqAttackRecord.amount = 0;\\n            liqAttackRecord.stakeAttacker = address(0);\\n            liqAttackRecord.blockNum = 0;\\n            liqAttackRecord.loser = address(0);\\n\\n            returnAmount -= attackerCut;\\n        }\\n    }\\n\\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\\n        external\\n    {\\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[liquidatedAccounts[i]];\\n            if (\\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\\n            ) {\\n                _disburseLiqAttack(liqAttackRecord);\\n            }\\n        }\\n    }\\n\\n    function liquidateFromPeg() internal returns (uint256 pegAmount) {\\n        for (uint256 tokenIdx = 0; buyTokens.length > tokenIdx; tokenIdx++) {\\n            address buyToken = buyTokens[tokenIdx];\\n            Liquidation storage liq = liquidationAmounts[buyToken];\\n            if (liq.buy > liq.sell) {\\n                pegAmount += PriceAware.liquidateToPeg(\\n                    buyToken,\\n                    liq.buy - liq.sell\\n                );\\n                delete liquidationAmounts[buyToken];\\n            }\\n        }\\n        delete buyTokens;\\n    }\\n\\n    function liquidateToPeg() internal returns (uint256 pegAmount) {\\n        for (\\n            uint256 tokenIndex = 0;\\n            sellTokens.length > tokenIndex;\\n            tokenIndex++\\n        ) {\\n            address token = sellTokens[tokenIndex];\\n            Liquidation storage liq = liquidationAmounts[token];\\n            if (liq.sell > liq.buy) {\\n                uint256 sellAmount = liq.sell - liq.buy;\\n                pegAmount += PriceAware.liquidateToPeg(token, sellAmount);\\n                delete liquidationAmounts[token];\\n            }\\n        }\\n        delete sellTokens;\\n    }\\n\\n    function maintainerIsFailing() internal view returns (bool) {\\n        (address currentMaintainer, ) =\\n            Admin(admin()).viewCurrentMaintenanceStaker();\\n        return\\n            maintenanceFailures[currentMaintainer] >\\n            failureThreshold * avgLiquidationPerBlock;\\n    }\\n\\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\\n    function liquidate(address[] memory liquidationCandidates)\\n        external\\n        returns (uint256 maintainerCut)\\n    {\\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\\n\\n        // calcLiquidationAmounts does a lot of the work here\\n        // * aggregates both sell and buy side targets to be liquidated\\n        // * returns attacker cuts to them\\n        // * aggregates any returned fees from unauthorized (attacking) attempts\\n        uint256 attackReturns2Authorized =\\n            calcLiquidationAmounts(liquidationCandidates, isAuthorized);\\n        maintainerCut = attackReturns2Authorized;\\n\\n        uint256 sale2pegAmount = liquidateToPeg();\\n        uint256 peg2targetCost = liquidateFromPeg();\\n\\n        // this may be a bit imprecise, since individual shortfalls may be obscured\\n        // by overall returns and the maintainer cut is taken out of the net total,\\n        // but it gives us the general picture\\n        if (\\n            (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) / 100 >\\n            sale2pegAmount\\n        ) {\\n            emit LiquidationShortfall(peg2targetCost - sale2pegAmount);\\n        }\\n\\n        address loser = address(0);\\n        if (!canTakeNow) {\\n            // whoever is the current responsible maintenance staker\\n            // and liable to lose their stake\\n            loser = Admin(admin()).getUpdatedCurrentStaker();\\n        }\\n\\n        // iterate over traders and send back their money\\n        // as well as giving attackers their due, in case caller isn't authorized\\n        for (\\n            uint256 traderIdx = 0;\\n            tradersToLiquidate.length > traderIdx;\\n            traderIdx++\\n        ) {\\n            address traderAddress = tradersToLiquidate[traderIdx];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n\\n            uint256 holdingsValue = holdingsInPeg(account, true);\\n            uint256 borrowValue = loanInPeg(account, true);\\n            // 5% of value borrowed\\n            uint256 maintainerCut4Account =\\n                (borrowValue * MAINTAINER_CUT_PERCENT) / 100;\\n            maintainerCut += maintainerCut4Account;\\n\\n            if (!canTakeNow) {\\n                // This could theoretically lead to a previous attackers\\n                // record being overwritten, but only if the trader restarts\\n                // their account and goes back into the red within the short time window\\n                // which would be a costly attack requiring collusion without upside\\n                AccountLiqRecord storage liqAttackRecord =\\n                    stakeAttackRecords[traderAddress];\\n                liqAttackRecord.amount = maintainerCut4Account;\\n                liqAttackRecord.stakeAttacker = msg.sender;\\n                liqAttackRecord.blockNum = block.number;\\n                liqAttackRecord.loser = loser;\\n            }\\n\\n            // send back trader money\\n            if (holdingsValue >= maintainerCut4Account + borrowValue) {\\n                // send remaining funds back to trader\\n                Fund(fund()).withdraw(\\n                    PriceAware.peg,\\n                    traderAddress,\\n                    holdingsValue - borrowValue - maintainerCut4Account\\n                );\\n            }\\n\\n            emit AccountLiquidated(traderAddress);\\n            deleteAccount(account);\\n        }\\n\\n        avgLiquidationPerBlock =\\n            (avgLiquidationPerBlock * 99 + maintainerCut) /\\n            100;\\n\\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\\n        if (isAuthorized) {\\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\\n            } else {\\n                maintenanceFailures[currentMaintainer] = 0;\\n            }\\n        } else {\\n            maintenanceFailures[currentMaintainer] += maintainerCut;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x597031a2f69a15a612f052239ee48ae44901b26293582061ab02802163826dcb\",\"license\":\"GPL-2.0-only\"},\"contracts/CrossMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"./CrossMarginLiquidation.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\ncontract CrossMarginTrading is CrossMarginLiquidation, IMarginTrading {\\n    constructor(address _peg, address _roles)\\n        RoleAware(_roles)\\n        PriceAware(_peg)\\n    {\\n        liquidationThresholdPercent = 110;\\n        coolingOffPeriod = 20;\\n    }\\n\\n    /// @dev admin function to set the token cap\\n    function setTokenCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set token cap\\\"\\n        );\\n        tokenCaps[token] = cap;\\n    }\\n\\n    /// @dev setter for cooling off period for withdrawing funds after deposit\\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\\n        coolingOffPeriod = blocks;\\n    }\\n\\n    /// @dev admin function to set leverage\\n    function setLeverage(uint256 _leverage) external onlyOwner {\\n        leverage = _leverage;\\n    }\\n\\n    /// @dev admin function to set liquidation threshold\\n    function setLiquidationThresholdPercent(uint256 threshold)\\n        external\\n        onlyOwner\\n    {\\n        liquidationThresholdPercent = threshold;\\n    }\\n\\n    /// @dev gets called by router to affirm a deposit to an account\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 depositAmount\\n    ) external override returns (uint256 extinguishableDebt) {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        if (account.borrowed[token] > 0) {\\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\\n            extinguishDebt(account, token, extinguishableDebt);\\n            totalShort[token] -= extinguishableDebt;\\n        }\\n        // no overflow because depositAmount >= extinguishableDebt\\n        uint256 addedHolding = depositAmount - extinguishableDebt;\\n        addHolding(account, token, addedHolding);\\n\\n        totalLong[token] += addedHolding;\\n        require(\\n            tokenCaps[token] >= totalLong[token],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        account.lastDepositBlock = block.number;\\n    }\\n\\n    /// @dev gets called by router to affirm isolated borrowing event\\n    function registerBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        totalShort[borrowToken] += borrowAmount;\\n        totalLong[borrowToken] += borrowAmount;\\n        require(\\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrow(account, borrowToken, borrowAmount);\\n    }\\n\\n    /// @dev gets called by router to affirm withdrawal of tokens from account\\n    function registerWithdrawal(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    ) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        require(\\n            block.number > account.lastDepositBlock + coolingOffPeriod,\\n            \\\"To prevent attacks you must wait until your cooling off period is over to withdraw\\\"\\n        );\\n\\n        totalLong[withdrawToken] -= withdrawAmount;\\n        // throws on underflow\\n        account.holdings[withdrawToken] =\\n            account.holdings[withdrawToken] -\\n            withdrawAmount;\\n        require(\\n            positiveBalance(account),\\n            \\\"Account balance is too low to withdraw\\\"\\n        );\\n    }\\n\\n    /// @dev gets callled by router to register a trade and borrow and extinguis as necessary\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    )\\n        external\\n        override\\n        returns (uint256 extinguishableDebt, uint256 borrowAmount)\\n    {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader agent\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n\\n        if (account.borrowed[tokenTo] > 0) {\\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\\n            extinguishDebt(account, tokenTo, extinguishableDebt);\\n            totalShort[tokenTo] -= extinguishableDebt;\\n        }\\n        totalLong[tokenFrom] -= inAmount;\\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\\n        require(\\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        uint256 sellAmount = inAmount;\\n        if (inAmount > account.holdings[tokenFrom]) {\\n            sellAmount = account.holdings[tokenFrom];\\n            /// won't overflow\\n            borrowAmount = inAmount - sellAmount;\\n\\n            totalShort[tokenFrom] += borrowAmount;\\n            require(\\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\\n                \\\"Exceeding global exposure cap to token -- try again later\\\"\\n            );\\n\\n            borrow(account, tokenFrom, borrowAmount);\\n        }\\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\\n    }\\n\\n    /// @dev can get called by router to register the dissolution of an account\\n    function registerLiquidation(address trader) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader agent\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        for (uint24 i = 0; account.borrowTokens.length > i; i++) {\\n            address token = account.borrowTokens[i];\\n            Lending(lending()).payOff(token, account.borrowed[token]);\\n        }\\n\\n        deleteAccount(account);\\n    }\\n}\\n\",\"keccak256\":\"0x5460608c3f56a88dd7145893a791f75f6e900d4a8ecbc0df784bd430e837ddec\",\"license\":\"GPL-2.0-only\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\ncontract Fund is RoleAware, Ownable {\\n    address public WETH;\\n    mapping(address => bool) public activeTokens;\\n\\n    constructor(address _WETH, address _roles) Ownable() RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    function activateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = true;\\n    }\\n\\n    function deactivateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = false;\\n    }\\n\\n    function deposit(address depositToken, uint256 depositAmount)\\n        external\\n        returns (bool)\\n    {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external returns (bool) {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        require(isWithdrawer(msg.sender), \\\"Contract not authorized to deposit\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external returns (bool) {\\n        require(\\n            isWithdrawer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        return IERC20(withdrawalToken).transfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isWithdrawer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        payable(recipient).transfer(withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x0bb5339cb309267349880a96a90781bfc988c418ef69eb1d5cf09403bc4bb3d9\",\"license\":\"GPL-2.0-only\"},\"contracts/HourlyBondSubscriptionLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct YieldAccumulator {\\n    uint256 accumulatorFP;\\n    uint256 lastUpdated;\\n    uint256 hourlyYieldFP;\\n}\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n}\\n\\n/// @dev Here we offer subscriptions to auto-renewing hourly bonds\\n/// Funds are locked in for an 50 minutes per hour, while interest rates float\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    uint256 withdrawalWindow = 10 minutes;\\n    // token => holder => bond record\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n\\n    mapping(address => YieldAccumulator) public hourlyBondYieldAccumulators;\\n    /// @dev accumulate interest per token (like compound indices)\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    uint256 public borrowingFactorPercent = 200;\\n\\n    mapping(address => uint256) public hourlyBondBuyingSpeed;\\n    mapping(address => uint256) public hourlyBondWithdrawingSpeed;\\n\\n    function setHourlyYieldAPR(address token, uint256 aprPercent) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to set hourly yield\\\"\\n        );\\n        if (hourlyBondYieldAccumulators[token].accumulatorFP == 0) {\\n            hourlyBondYieldAccumulators[token] = YieldAccumulator({\\n                accumulatorFP: FP32,\\n                lastUpdated: block.timestamp,\\n                hourlyYieldFP: (FP32 * (100 + aprPercent)) / 100 / (24 * 365)\\n            });\\n        } else {\\n            hourlyBondYieldAccumulators[token].hourlyYieldFP =\\n                (FP32 * (100 + aprPercent)) /\\n                100 /\\n                (24 * 365);\\n        }\\n    }\\n\\n    function setWithdrawalWindow(uint256 window) external onlyOwner {\\n        withdrawalWindow = window;\\n    }\\n\\n    function _makeHourlyBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[token][holder];\\n        updateHourlyBondAmount(token, bond);\\n        bond.yieldQuotientFP = hourlyBondYieldAccumulators[token].accumulatorFP;\\n        bond.moduloHour = block.timestamp % (1 hours);\\n        bond.amount += amount;\\n        totalLending[token] += amount;\\n    }\\n\\n    function updateHourlyBondAmount(address token, HourlyBond storage bond)\\n        internal\\n    {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            YieldAccumulator storage yA = getUpdatedHourlyYield(token);\\n\\n            uint256 oldAmount = bond.amount;\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            totalLending[token] += deltaAmount;\\n        }\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address token,\\n        HourlyBond storage bond,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            withdrawalWindow >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        require(\\n            Fund(fund()).withdraw(token, recipient, amount),\\n            \\\"Insufficient liquidity\\\"\\n        );\\n\\n        bond.amount -= amount;\\n        totalLending[token] -= amount;\\n    }\\n\\n    function closeHourlyBondAccount(address token) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        _withdrawHourlyBond(token, bond, msg.sender, bond.amount);\\n        bond.amount = 0;\\n        bond.yieldQuotientFP = 0;\\n        bond.moduloHour = 0;\\n    }\\n\\n    function calcCumulativeYieldFP(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // accumulator * hourly_yield == seconds_per_hour * accumulator * hourly_yield / seconds_per_hour\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            (yieldAccumulator.accumulatorFP *\\n                yieldAccumulator.hourlyYieldFP *\\n                secondsDelta) /\\n            (FP32 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            // This loop should hardly ever 1 or more unless something bad happened\\n            // In which case it costs gas but there isn't overflow\\n            for (uint256 i = 0; hoursDelta > i; i++) {\\n                // FP32 * FP32 / FP32 = FP32\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP32;\\n            }\\n        }\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    function getUpdatedHourlyYield(address token)\\n        internal\\n        returns (YieldAccumulator storage accumulator)\\n    {\\n        accumulator = hourlyBondYieldAccumulators[token];\\n        uint256 timeDelta = (block.timestamp - accumulator.lastUpdated);\\n\\n        accumulator.accumulatorFP = calcCumulativeYieldFP(\\n            accumulator,\\n            timeDelta\\n        );\\n\\n        accumulator.hourlyYieldFP = updatedYieldFP(\\n            accumulator.hourlyYieldFP,\\n            accumulator.lastUpdated,\\n            totalLending[token],\\n            lendingTarget(token),\\n            hourlyBondBuyingSpeed[token],\\n            hourlyBondWithdrawingSpeed[token],\\n            maxHourlyYieldFP\\n        );\\n\\n        YieldAccumulator storage borrowAccumulator =\\n            borrowYieldAccumulators[token];\\n        timeDelta = block.timestamp - borrowAccumulator.lastUpdated;\\n        borrowAccumulator.accumulatorFP = calcCumulativeYieldFP(\\n            borrowAccumulator,\\n            timeDelta\\n        );\\n\\n        borrowYieldAccumulators[token].hourlyYieldFP =\\n            (borrowingFactorPercent * accumulator.hourlyYieldFP) /\\n            100;\\n\\n        accumulator.lastUpdated = block.timestamp;\\n        borrowAccumulator.lastUpdated = block.timestamp;\\n    }\\n\\n    function viewCumulativeYieldFP(\\n        address token,\\n        mapping(address => YieldAccumulator) storage yieldAccumulators,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yieldAccumulators[token].lastUpdated);\\n        return calcCumulativeYieldFP(yieldAccumulators[token], timeDelta);\\n    }\\n}\\n\",\"keccak256\":\"0x59c78dd3fd81337bcd6046c4ecb8862c430c6a3a4a975bf30f28431da2dafeff\",\"license\":\"GPL-2.0-only\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    address recipient;\\n    uint256 amount;\\n}\\n\\ncontract IncentiveDistribution is RoleAware, Ownable {\\n    // fixed point number factor\\n    uint256 constant FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    uint256 constant contractionPerMil = 999;\\n    // the period for which claims are batch updated\\n    uint256 constant period = 4 hours;\\n    uint256 constant periodsPerDay = 24 hours / period;\\n    address MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n        lastDailyDistributionUpdate = block.timestamp / (1 days);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n    // last day on which we updated currentDailyDistribution\\n    uint256 lastDailyDistributionUpdate;\\n    // portion of daily distribution per each tranche\\n    mapping(uint8 => uint256) public trancheShare;\\n    uint256 public trancheShareTotal;\\n\\n    // tranche => claim totals for the period we're currently aggregating\\n    mapping(uint8 => uint256) public currentPeriodTotals;\\n    // tranche => timestamp / period of last update\\n    mapping(uint8 => uint256) public lastUpdatedPeriods;\\n\\n    // how each claim unit would get if they had staked from the dawn of time\\n    // expressed as fixed point number\\n    // claim amounts are expressed relative to this ongoing aggregate\\n    mapping(uint8 => uint256) public aggregatePeriodicRewardRateFP;\\n    // claim records\\n    mapping(uint256 => Claim) public claims;\\n    uint256 public nextClaimId = 1;\\n\\n    function setTrancheShare(uint8 tranche, uint256 share) external onlyOwner {\\n        require(\\n            lastUpdatedPeriods[tranche] > 0,\\n            \\\"Tranche is not initialized, please initialize first\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint8 tranche, uint256 share) internal {\\n        if (share > trancheShare[tranche]) {\\n            trancheShareTotal += share - trancheShare[tranche];\\n        } else {\\n            trancheShareTotal -= trancheShare[tranche] - share;\\n        }\\n        trancheShare[tranche] = share;\\n    }\\n\\n    function initTranche(uint8 tranche, uint256 share) external onlyOwner {\\n        _setTrancheShare(tranche, share);\\n\\n        lastUpdatedPeriods[tranche] = block.timestamp / period;\\n        // simply initialize to 1.0\\n        aggregatePeriodicRewardRateFP[tranche] = FP32;\\n    }\\n\\n    function updatePeriodTotals(uint8 tranche) internal {\\n        uint256 currentPeriod = block.timestamp / period;\\n\\n        // update the amount that gets distributed per day, if there has been\\n        // a day transition\\n        updateCurrentDailyDistribution();\\n        // Do a bunch of updating of periodic variables when the period changes\\n        uint256 lU = lastUpdatedPeriods[tranche];\\n        uint256 periodDiff = currentPeriod - lU;\\n\\n        if (periodDiff > 0) {\\n            aggregatePeriodicRewardRateFP[tranche] +=\\n                currentPeriodicRewardRateFP(tranche) *\\n                periodDiff;\\n        }\\n\\n        lastUpdatedPeriods[tranche] = currentPeriod;\\n    }\\n\\n    function forcePeriodTotalUpdate(uint8 tranche) external {\\n        updatePeriodTotals(tranche);\\n    }\\n\\n    function updateCurrentDailyDistribution() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastDailyDistributionUpdate;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n        }\\n        // now update this memo\\n        lastDailyDistributionUpdate = nowDay;\\n    }\\n\\n    function currentPeriodicRewardRateFP(uint8 tranche)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // scale daily distribution down to tranche share\\n        uint256 tranchePeriodDistributionFP =\\n            (FP32 * currentDailyDistribution * trancheShare[tranche]) /\\n                trancheShareTotal /\\n                periodsPerDay;\\n\\n        // rate = (total_reward / total_claims) per period\\n        return tranchePeriodDistributionFP / currentPeriodTotals[tranche];\\n    }\\n\\n    function startClaim(\\n        uint8 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external returns (uint256) {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += claimAmount;\\n\\n            claims[nextClaimId] = Claim({\\n                startingRewardRateFP: aggregatePeriodicRewardRateFP[tranche],\\n                recipient: recipient,\\n                amount: claimAmount\\n            });\\n            nextClaimId += 1;\\n            return nextClaimId - 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function addToClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 additionalAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += additionalAmount;\\n\\n            Claim storage claim = claims[claimId];\\n            require(\\n                claim.startingRewardRateFP > 0,\\n                \\\"Trying to add to non-existant claim\\\"\\n            );\\n            _withdrawReward(tranche, claim);\\n            claim.amount += additionalAmount;\\n        }\\n    }\\n\\n    function subtractFromClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n\\n        currentPeriodTotals[tranche] -= subtractAmount;\\n\\n        Claim storage claim = claims[claimId];\\n        _withdrawReward((tranche), claim);\\n        claim.amount -= subtractAmount;\\n    }\\n\\n    function endClaim(uint8 tranche, uint256 claimId) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n\\n        if (claim.startingRewardRateFP > 0) {\\n            _withdrawReward(tranche, claim);\\n            delete claim.recipient;\\n            delete claim.startingRewardRateFP;\\n            delete claim.amount;\\n        }\\n    }\\n\\n    function calcRewardAmount(uint8 tranche, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (claim.amount *\\n                (aggregatePeriodicRewardRateFP[tranche] -\\n                    claim.startingRewardRateFP)) / FP32;\\n    }\\n\\n    function viewRewardAmount(uint8 tranche, uint256 claimId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return calcRewardAmount(tranche, claims[claimId]);\\n    }\\n\\n    function withdrawReward(uint8 tranche, uint256 claimId)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n        return _withdrawReward(tranche, claim);\\n    }\\n\\n    function _withdrawReward(uint8 tranche, Claim storage claim)\\n        internal\\n        returns (uint256 rewardAmount)\\n    {\\n        rewardAmount = calcRewardAmount(tranche, claim);\\n\\n        require(\\n            Fund(fund()).withdraw(MFI, claim.recipient, rewardAmount),\\n            \\\"There seems to be a lack of MFI in the incentive fund!\\\"\\n        );\\n\\n        claim.startingRewardRateFP = aggregatePeriodicRewardRateFP[tranche];\\n    }\\n}\\n\",\"keccak256\":\"0x18fda58acf66d325873d876d87856ded2f93017a3caba64f182c76a319d9ca0c\",\"license\":\"GPL-2.0-only\"},\"contracts/IncentivizedHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @dev helper class to facilitate staking and unstaking\\n/// within the incentive system\\nabstract contract IncentivizedHolder is RoleAware {\\n    // here we cache incentive tranches to save on a bit of gas\\n    mapping(address => uint8) public incentiveTranches;\\n    // claimant => token => claimId\\n    mapping(address => mapping(address => uint256)) public claimIds;\\n\\n    function setIncentiveTranche(address token, uint8 tranche) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set incentive tranche\\\"\\n        );\\n        incentiveTranches[token] = tranche;\\n    }\\n\\n    function stakeClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        IncentiveDistribution iD =\\n            IncentiveDistribution(incentiveDistributor());\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        if (claimId > 0) {\\n            iD.addToClaimAmount(tranche, claimId, amount);\\n        } else {\\n            claimId = iD.startClaim(tranche, claimant, amount);\\n            claimIds[claimant][token] = claimId;\\n        }\\n    }\\n\\n    function withdrawClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\\n            tranche,\\n            claimId,\\n            amount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7642b09d4964ef5ae3405e4dd1f391697bbbdfe808197bf520bfd7fe039c6bf8\",\"license\":\"GPL-2.0-only\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"./BondLending.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\ncontract Lending is\\n    BaseLending,\\n    HourlyBondSubscriptionLending,\\n    BondLending,\\n    IncentivizedHolder\\n{\\n    /// @dev IDs for all bonds held by an address\\n    mapping(address => uint256[]) public bondIds;\\n\\n    constructor(address _roles) RoleAware(_roles) Ownable() {\\n        uint256 APR = 899;\\n        maxHourlyYieldFP = (FP32 * APR) / 100 / (24 * 365);\\n\\n        uint256 aprChangePerMil = 3;\\n        yieldChangePerSecondFP = (FP32 * aprChangePerMil) / 1000;\\n    }\\n\\n    /// @dev how much interest has accrued to a borrowed balance over time\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256 balanceWithInterest) {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[token];\\n        balanceWithInterest = applyInterest(\\n            balance,\\n            yA.accumulatorFP,\\n            yieldQuotientFP\\n        );\\n\\n        uint256 deltaAmount = balanceWithInterest - balance;\\n        totalBorrowed[token] += deltaAmount;\\n    }\\n\\n    /// @dev view function to get current borrowing interest\\n    function viewBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYieldFP(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    /// @dev gets called by router to register if a trader borrows tokens\\n    function registerBorrow(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        require(Fund(fund()).activeTokens(token), \\\"Not an approved token\\\");\\n        totalBorrowed[token] += amount;\\n        require(\\n            totalLending[token] >= totalBorrowed[token],\\n            \\\"Insufficient capital to lend, try again later!\\\"\\n        );\\n    }\\n\\n    /// @dev gets called by router if loan is extinguished\\n    function payOff(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        totalBorrowed[token] -= amount;\\n    }\\n\\n    /// @dev get the borrow yield\\n    function viewBorrowingYieldFP(address token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            viewCumulativeYieldFP(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n    }\\n\\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal override {\\n        _makeHourlyBond(token, holder, amount);\\n    }\\n\\n    /// @dev withdraw an hour bond\\n    function withdrawHourlyBond(address token, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        super._withdrawHourlyBond(token, bond, msg.sender, amount);\\n\\n        withdrawClaim(msg.sender, token, amount);\\n    }\\n\\n    /// @dev buy hourly bond subscription\\n    function buyHourlyBondSubscription(address token, uint256 amount) external {\\n        if (lendingTarget(token) >= totalLending[token] + amount) {\\n            require(\\n                Fund(fund()).depositFor(msg.sender, token, amount),\\n                \\\"Could not transfer bond deposit token to fund\\\"\\n            );\\n            super._makeHourlyBond(token, msg.sender, amount);\\n\\n            stakeClaim(msg.sender, token, amount);\\n        }\\n    }\\n\\n    /// @dev buy fixed term bond that does not renew\\n    function buyBond(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) external returns (uint256 bondIndex) {\\n        if (\\n            lendingTarget(token) >= totalLending[token] + amount &&\\n            maxRuntime >= runtime &&\\n            runtime >= minRuntime\\n        ) {\\n            bondIndex = super._makeBond(\\n                msg.sender,\\n                token,\\n                runtime,\\n                amount,\\n                minReturn\\n            );\\n            bondIds[msg.sender].push(bondIndex);\\n\\n            stakeClaim(msg.sender, token, amount);\\n        }\\n    }\\n\\n    /// @dev send back funds of bond after maturity\\n    function withdrawBond(uint256 bondId) external {\\n        Bond storage bond = bonds[bondId];\\n        require(msg.sender == bond.holder, \\\"Not holder of bond\\\");\\n        require(\\n            block.timestamp > bond.maturityTimestamp,\\n            \\\"bond is still immature\\\"\\n        );\\n\\n        super._withdrawBond(bond);\\n        delete bonds[bondId];\\n        // in case of a shortfall, governance can step in to provide\\n        // additonal compensation beyond the usual incentive which\\n        // gets withdrawn here\\n        withdrawClaim(msg.sender, bond.token, bond.originalPrice);\\n    }\\n\\n    function initBorrowYieldAccumulator(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to init yield accumulator\\\"\\n        );\\n        borrowYieldAccumulators[token].accumulatorFP = FP32;\\n    }\\n\\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\\n        external\\n        onlyOwner\\n    {\\n        borrowingFactorPercent = borrowingFactor;\\n    }\\n}\\n\",\"keccak256\":\"0x74b28cdafc9c7b3baa12eef0cd594391a4a74d4eac564e5a6901c8f30210fa54\",\"license\":\"GPL-2.0-only\"},\"contracts/MarginRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"../interfaces/IMarginTrading.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./Admin.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\ncontract MarginRouter is RoleAware, IncentivizedHolder, Ownable {\\n    /// different uniswap compatible factories to talk to\\n    mapping(address => bool) public factories;\\n    /// wrapped ETH ERC20 contract\\n    address public WETH;\\n    address public constant UNI = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address public constant SUSHI = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\\n    /// emitted when a trader depoits on cross margin\\n    event CrossDeposit(\\n        address trader,\\n        address depositToken,\\n        uint256 depositAmount\\n    );\\n    /// emitted whenever a trade happens\\n    event CrossTrade(\\n        address trader,\\n        address inToken,\\n        uint256 inTokenAmount,\\n        uint256 inTokenBorrow,\\n        address outToken,\\n        uint256 outTokenAmount,\\n        uint256 outTokenExtinguish\\n    );\\n    /// emitted when a trader withdraws funds\\n    event CrossWithdraw(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    );\\n    /// emitted upon sucessfully borrowing\\n    event CrossBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    );\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Trade has expired\\\");\\n        _;\\n    }\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        factories[UNI] = true;\\n        factories[SUSHI] = true;\\n\\n        WETH = _WETH;\\n    }\\n\\n    function authorizeAMM(address ammFactory) external onlyOwner {\\n        factories[ammFactory] = true;\\n    }\\n\\n    /// @dev traders call this to deposit funds on cross margin\\n    function crossDeposit(address depositToken, uint256 depositAmount)\\n        external\\n    {\\n        require(\\n            Fund(fund()).depositFor(msg.sender, depositToken, depositAmount),\\n            \\\"Cannot transfer deposit to margin account\\\"\\n        );\\n        uint256 extinguishAmount =\\n            IMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                depositToken,\\n                depositAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(depositToken, extinguishAmount);\\n            withdrawClaim(msg.sender, depositToken, extinguishAmount);\\n        }\\n        emit CrossDeposit(msg.sender, depositToken, depositAmount);\\n    }\\n\\n    /// @dev deposit wrapped ehtereum into cross margin account\\n    function crossDepositETH() external payable {\\n        Fund(fund()).depositToWETH{value: msg.value}();\\n        uint256 extinguishAmount =\\n            IMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                WETH,\\n                msg.value\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(WETH, extinguishAmount);\\n            withdrawClaim(msg.sender, WETH, extinguishAmount);\\n        }\\n        emit CrossDeposit(msg.sender, WETH, msg.value);\\n    }\\n\\n    /// @dev withdraw deposits/earnings from cross margin account\\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\\n        external\\n    {\\n        IMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            withdrawToken,\\n            withdrawAmount\\n        );\\n        require(\\n            Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount),\\n            \\\"Could not withdraw from fund\\\"\\n        );\\n        emit CrossWithdraw(msg.sender, withdrawToken, withdrawAmount);\\n    }\\n\\n    /// @dev withdraw ethereum from cross margin account\\n    function crossWithdrawETH(uint256 withdrawAmount) external {\\n        IMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            WETH,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\\n    }\\n\\n    /// @dev borrow into cross margin trading account\\n    function crossBorrow(address borrowToken, uint256 borrowAmount) external {\\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\\n        IMarginTrading(marginTrading()).registerBorrow(\\n            msg.sender,\\n            borrowToken,\\n            borrowAmount\\n        );\\n\\n        stakeClaim(msg.sender, borrowToken, borrowAmount);\\n        emit CrossBorrow(msg.sender, borrowToken, borrowAmount);\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0\\n                    ? (uint256(0), amountOut)\\n                    : (amountOut, uint256(0));\\n            address to =\\n                i < path.length - 2\\n                    ? UniswapV2Library.pairFor(factory, output, path[i + 2])\\n                    : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output))\\n                .swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    /// @dev internal helper swapping exact token for token on AMM\\n    function _swapExactT4T(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) internal returns (uint256[] memory amounts) {\\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        require(\\n            Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            ),\\n            \\\"MarginRouter: Insufficient lending funds\\\"\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    /// @dev external function to make swaps on AMM using protocol funds, only for authorized contracts\\n    function authorizedSwapExactT4T(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external returns (uint256[] memory) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        return _swapExactT4T(factory, amountIn, amountOutMin, path);\\n    }\\n\\n    // @dev internal helper swapping exact token for token on on AMM\\n    function _swapT4ExactT(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) internal returns (uint256[] memory amounts) {\\n        // TODO minimum trade?\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"MarginRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        require(\\n            Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            ),\\n            \\\"MarginRouter: Insufficient lending funds\\\"\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    //// @dev external function for swapping protocol funds on AMM, only for authorized\\n    function authorizedSwapT4ExactT(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) external returns (uint256[] memory) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        return _swapT4ExactT(factory, amountOut, amountInMax, path);\\n    }\\n\\n    /// @dev entry point for swapping tokens held in cross margin account\\n    function crossSwapExactTokensForTokens(\\n        address ammFactory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).subtractTradingFees(path[0], amountIn);\\n\\n        requireAuthorizedAMM(ammFactory);\\n        // swap\\n        amounts = _swapExactT4T(\\n            ammFactory,\\n            amountIn - fees,\\n            amountOutMin,\\n            path\\n        );\\n\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amountIn,\\n            amounts[amounts.length - 1]\\n        );\\n    }\\n\\n    /// @dev entry point for swapping tokens held in cross margin account\\n    function crossSwapTokensForExactTokens(\\n        address ammFactory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).addTradingFees(\\n                path[path.length - 1],\\n                amountOut\\n            );\\n\\n        requireAuthorizedAMM(ammFactory);\\n        // swap\\n        amounts = _swapT4ExactT(\\n            ammFactory,\\n            amountOut + fees,\\n            amountInMax,\\n            path\\n        );\\n\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amounts[0],\\n            amountOut\\n        );\\n    }\\n\\n    /// @dev helper function does all the work of telling other contracts\\n    /// about a trade\\n    function registerTrade(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        (uint256 extinguishAmount, uint256 borrowAmount) =\\n            IMarginTrading(marginTrading()).registerTradeAndBorrow(\\n                trader,\\n                inToken,\\n                outToken,\\n                inAmount,\\n                outAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(outToken, extinguishAmount);\\n            withdrawClaim(trader, outToken, extinguishAmount);\\n        }\\n        if (borrowAmount > 0) {\\n            Lending(lending()).registerBorrow(inToken, borrowAmount);\\n            stakeClaim(trader, inToken, borrowAmount);\\n        }\\n\\n        emit CrossTrade(\\n            trader,\\n            inToken,\\n            inAmount,\\n            borrowAmount,\\n            outToken,\\n            outAmount,\\n            extinguishAmount\\n        );\\n    }\\n\\n    function getAmountsOut(\\n        address factory,\\n        uint256 inAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        return UniswapV2Library.getAmountsOut(factory, inAmount, path);\\n    }\\n\\n    function getAmountsIn(\\n        address factory,\\n        uint256 outAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        return UniswapV2Library.getAmountsIn(factory, outAmount, path);\\n    }\\n\\n    function requireAuthorizedAMM(address ammFactory) internal view {\\n        require(\\n            ammFactory == UNI || ammFactory == SUSHI || factories[ammFactory],\\n            \\\"Not using an authorized AMM\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5702bf3dd5d878f26e845ab5feaa53ec1fc975eaf398913bdf6b640de9dfaf38\",\"license\":\"GPL-2.0-only\"},\"contracts/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\n\\n/// Stores how many of token you could get for 1k of peg\\nstruct TokenPrice {\\n    uint256 blockLastUpdated;\\n    uint256 tokenPer1k;\\n    address[] liquidationPath;\\n    address[] inverseLiquidationPath;\\n}\\n\\nabstract contract PriceAware is Ownable, RoleAware {\\n    address public constant UNI = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address public peg;\\n    mapping(address => TokenPrice) public tokenPrices;\\n    /// update window in blocks\\n    uint16 public priceUpdateWindow = 8;\\n    uint256 public TEPID_UPDATE_RATE_PERMIL = 20;\\n    uint256 public CONFIDENT_UPDATE_RATE_PERMIL = 650;\\n    uint256 UPDATE_MAX_PEG_AMOUNT = 50_000;\\n    uint256 UPDATE_MIN_PEG_AMOUNT = 1_000;\\n\\n    constructor(address _peg) Ownable() {\\n        peg = _peg;\\n    }\\n\\n    function setPriceUpdateWindow(uint16 window) external onlyOwner {\\n        priceUpdateWindow = window;\\n    }\\n\\n    function setTepidUpdateRate(uint256 rate) external onlyOwner {\\n        TEPID_UPDATE_RATE_PERMIL = rate;\\n    }\\n\\n    function setConfidentUpdateRate(uint256 rate) external onlyOwner {\\n        CONFIDENT_UPDATE_RATE_PERMIL = rate;\\n    }\\n\\n    function forcePriceUpdate(address token, uint256 inAmount)\\n        public\\n        returns (uint256)\\n    {\\n        return getUpdatedPriceInPeg(token, inAmount);\\n    }\\n\\n    function setUpdateMaxPegAmount(uint256 amount) external onlyOwner {\\n        UPDATE_MAX_PEG_AMOUNT = amount;\\n    }\\n\\n    function setUpdateMinPegAmount(uint256 amount) external onlyOwner {\\n        UPDATE_MIN_PEG_AMOUNT = amount;\\n    }\\n\\n    function getCurrentPriceInPeg(\\n        address token,\\n        uint256 inAmount,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        TokenPrice storage tokenPrice = tokenPrices[token];\\n        if (\\n            block.number - tokenPrice.blockLastUpdated > priceUpdateWindow ||\\n            (forceCurBlock && block.number != tokenPrice.blockLastUpdated) ||\\n            tokenPrice.tokenPer1k == 0\\n        ) {\\n            return getUpdatedPriceInPeg(token, inAmount);\\n        } else {\\n            return (inAmount * 1000 ether) / tokenPrice.tokenPer1k;\\n        }\\n    }\\n\\n    function getUpdatedPriceInPeg(address token, uint256 inAmount)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return inAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            uint256[] memory pathAmounts =\\n                MarginRouter(router()).getAmountsOut(\\n                    UNI,\\n                    inAmount,\\n                    tokenPrice.liquidationPath\\n                );\\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\\n\\n            if (\\n                outAmount > UPDATE_MIN_PEG_AMOUNT &&\\n                outAmount < UPDATE_MAX_PEG_AMOUNT\\n            ) {\\n                confidentUpdatePriceInPeg(tokenPrice, inAmount, outAmount);\\n            }\\n\\n            return outAmount;\\n        }\\n    }\\n\\n    // /// Do a tepid update of price coming from a potentially unreliable source\\n    // function tepidUpdatePriceInPeg(\\n    //     address token,\\n    //     uint256 inAmount,\\n    //     uint256 outAmount\\n    // ) internal {\\n    //     _updatePriceInPeg(\\n    //         tokenPrices[token],\\n    //         inAmount,\\n    //         outAmount,\\n    //         TEPID_UPDATE_RATE_PERMIL\\n    //     );\\n    // }\\n\\n    function confidentUpdatePriceInPeg(\\n        TokenPrice storage tokenPrice,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        _updatePriceInPeg(\\n            tokenPrice,\\n            inAmount,\\n            outAmount,\\n            CONFIDENT_UPDATE_RATE_PERMIL\\n        );\\n        tokenPrice.blockLastUpdated = block.number;\\n    }\\n\\n    function _updatePriceInPeg(\\n        TokenPrice storage tokenPrice,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        uint256 weightPerMil\\n    ) internal {\\n        uint256 updatePer1k = (1000 ether * inAmount) / (outAmount + 1);\\n        tokenPrice.tokenPer1k =\\n            (tokenPrice.tokenPer1k *\\n                (1000 - weightPerMil) +\\n                updatePer1k *\\n                weightPerMil) /\\n            1000;\\n    }\\n\\n    // add path from token to current liquidation peg\\n    function setLiquidationPath(address[] memory path) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set lending cap\\\"\\n        );\\n        address token = path[0];\\n        tokenPrices[token].liquidationPath = new address[](path.length);\\n        tokenPrices[token].inverseLiquidationPath = new address[](path.length);\\n\\n        for (uint16 i = 0; path.length > i; i++) {\\n            tokenPrices[token].liquidationPath[i] = path[i];\\n            tokenPrices[token].inverseLiquidationPath[i] = path[\\n                path.length - i - 1\\n            ];\\n        }\\n        uint256[] memory pathAmounts =\\n            MarginRouter(router()).getAmountsIn(UNI, 1000 ether, path);\\n        uint256 inAmount = pathAmounts[0];\\n        _updatePriceInPeg(tokenPrices[token], inAmount, 1000 ether, 1000);\\n    }\\n\\n    function liquidateToPeg(address token, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return amount;\\n        } else {\\n            TokenPrice storage tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapExactT4T(\\n                    UNI,\\n                    amount,\\n                    0,\\n                    tP.liquidationPath\\n                );\\n\\n            uint256 outAmount = amounts[amounts.length - 1];\\n            confidentUpdatePriceInPeg(tP, amount, outAmount);\\n\\n            return outAmount;\\n        }\\n    }\\n\\n    function liquidateFromPeg(address token, uint256 targetAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return targetAmount;\\n        } else {\\n            TokenPrice storage tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapT4ExactT(\\n                    UNI,\\n                    targetAmount,\\n                    type(uint256).max,\\n                    tP.inverseLiquidationPath\\n                );\\n\\n            confidentUpdatePriceInPeg(tP, targetAmount, amounts[0]);\\n\\n            return amounts[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbe77a44f7dc600eecdbcab096e304ca63dd66ebcdf49f7088be6d7faecfb0e4d\",\"license\":\"GPL-2.0-only\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    uint16 public constant WITHDRAWER = 1;\\n    uint16 public constant MARGIN_CALLER = 2;\\n    uint16 public constant BORROWER = 3;\\n    uint16 public constant MARGIN_TRADER = 4;\\n    uint16 public constant FEE_SOURCE = 5;\\n    uint16 public constant LIQUIDATOR = 6;\\n    uint16 public constant AUTHORIZED_FUND_TRADER = 7;\\n    uint16 public constant INCENTIVE_REPORTER = 8;\\n    uint16 public constant TOKEN_ACTIVATOR = 9;\\n    uint16 public constant STAKE_PENALIZER = 10;\\n\\n    uint16 public constant FUND = 101;\\n    uint16 public constant LENDING = 102;\\n    uint16 public constant ROUTER = 103;\\n    uint16 public constant MARGIN_TRADING = 104;\\n    uint16 public constant FEE_CONTROLLER = 105;\\n    uint16 public constant PRICE_CONTROLLER = 106;\\n    uint16 public constant ADMIN = 107;\\n    uint16 public constant INCENTIVE_DISTRIBUTION = 108;\\n\\n    Roles public roles;\\n    mapping(uint16 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint16 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint16 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint16 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function router() internal view returns (address) {\\n        return mainCharacterCache[ROUTER];\\n    }\\n\\n    function marginTrading() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isWithdrawer(address contr) internal view returns (bool) {\\n        return roleCache[contr][WITHDRAWER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roles.getRole(STAKE_PENALIZER, contr);\\n    }\\n}\\n\",\"keccak256\":\"0x779699aa9143f47f47fa1a42f1dcf168188654d923c76667edf723489bdbfbc6\",\"license\":\"GPL-2.0-only\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint16 => bool)) public roles;\\n    mapping(uint16 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][9] = true;\\n    }\\n\\n    function giveRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint16 role, address actor) external onlyOwner {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint16 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n}\\n\",\"keccak256\":\"0x7437a9ae57cabebc07d13141ac137ffbc5a3ed8c68f2f7f7685608a2bd6a6847\",\"license\":\"GPL-2.0-only\"},\"interfaces/IMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\ninterface IMarginTrading {\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 extinguishAmount);\\n\\n    function registerWithdrawal(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerBorrow(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) external returns (uint256 extinguishAmount, uint256 borrowAmount);\\n\\n    function registerLiquidation(address trader) external;\\n}\\n\",\"keccak256\":\"0xf9d48e0d55bb9102563c71f87e1e6ea106ca287d6dd54060118237f05e0d6148\",\"license\":\"GPL-2.0-only\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"},\"libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            bytes20(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) - 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d78664942fa3474ad9b20e71a55c0b55cf2cf8e86ecabdc7261dc1c76c95005\"}},\"version\":1}",
  "bytecode": "0x60806040526006805461ffff19166008908117909155601460075561028a905561c3506009556103e8600a908155601881905560056019819055601a55601b553480156200004c57600080fd5b5060405162005991380380620059918339810160408190526200006f9162000129565b818160006200007d62000108565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b039283166001600160a01b031991821617909155600480549390921692169190911790555050606e600c55601460115562000160565b3390565b80516001600160a01b03811681146200012457600080fd5b919050565b600080604083850312156200013c578182fd5b62000147836200010c565b915062000157602084016200010c565b90509250929050565b61582180620001706000396000f3fe608060405234801561001057600080fd5b506004361061043c5760003560e01c80636cd5cd6011610235578063b448165211610135578063d0eb6653116100c8578063e0f3871f11610097578063f171c6011161007c578063f171c60114610814578063f2fde38b14610827578063f99fd97c1461083a5761043c565b8063e0f3871f146107ee578063eac29dd6146108015761043c565b8063d0eb6653146107ad578063d510c535146107c0578063d5d7ed7f146107d3578063db2d904d146107db5761043c565b8063c3c9fcd911610104578063c3c9fcd914610782578063c73afac21461078a578063c76139d01461079d578063cacf8d45146107a55761043c565b8063b448165214610719578063badb50481461072c578063bc44dcbc1461074f578063c34316c3146107625761043c565b80639d01b86c116101c8578063a371891911610197578063a94c7c341161017c578063a94c7c34146106f6578063a985994b146106fe578063a9cc0536146107115761043c565b8063a3718919146106d0578063a75697a5146106e35761043c565b80639d01b86c146106a55780639dfc0c16146106ad578063a0089159146106b5578063a0098d69146106c85761043c565b80637d100e84116102045780637d100e841461068557806381ca66001461068d57806383a49c7c146106955780638da5cb5b1461069d5761043c565b80636cd5cd60146106445780636cd7bc4b14610657578063715018a61461066a57806379575b23146106725761043c565b8063320d2fa01161034057806346b88796116102d357806352a664d9116102a2578063541bcb7611610287578063541bcb761461062c5780635c275a3914610634578063669419841461063c5761043c565b806352a664d914610611578063538edb29146106245761043c565b806346b88796146105e657806348fb27b8146105ee578063498d55eb146105f65780634aa4aca3146106095761043c565b8063392f5f641161030f578063392f5f64146105a25780633ed456fa146105aa5780633ffc17c0146105b2578063409fdb72146105c55761043c565b8063320d2fa01461056c57806332fe7b2614610574578063333080c01461057c5780633500aa0b1461058f5761043c565b80631f1cb62b116103d3578063232c765b116103a25780632c86d98e116103875780632c86d98e146105545780632fe94def1461055c5780632febaa74146105645761043c565b8063232c765b146105395780632a0acc6a1461054c5761043c565b80631f1cb62b146104d0578063204120bc146104e557806320c271261461050657806320e8d819146105265761043c565b806319fa00e11161040f57806319fa00e11461049a5780631b669507146104ad5780631bc5d81d146104b55780631d47e4a3146104bd5761043c565b8063065d570f1461044157806307c201751461045f57806310d584341461047457806316317e7e14610487575b600080fd5b61044961084d565b604051610456919061552f565b60405180910390f35b61047261046d366004614d7e565b610852565b005b610472610482366004614f10565b61091c565b610472610495366004614f10565b61099d565b6104726104a8366004614f10565b610a15565b610449610a8d565b610449610a92565b6104726104cb366004614d26565b610a97565b6104d8610aff565b6040516104569190614fd8565b6104f86104f3366004614c20565b610b1b565b6040516104569291906155d1565b610519610514366004614c20565b610b34565b6040516104569190615568565b610472610534366004614eda565b610b46565b610519610547366004614d26565b610c57565b610449610c6c565b610519610c71565b610449610c77565b610519610c7c565b610519610c82565b610449610c88565b61047261058a366004614f10565b610c8d565b6104f861059d366004614c58565b610d05565b6104d8611019565b610449611035565b6104726105c0366004614f10565b61103f565b6105d86105d3366004614c20565b6110b7565b60405161045692919061512e565b6104496112ad565b6104496112b2565b610472610604366004614cb2565b6112b7565b610519611446565b61051961061f366004614cb2565b61144c565b61051961160d565b6104d8611613565b61044961162b565b610449611630565b610472610652366004614ec0565b611635565b610472610665366004614d7e565b611734565b610472611cd6565b610472610680366004614f10565b611db8565b610519611e30565b610449611e36565b610449611e3b565b6104d8611e40565b610519611e5d565b610519611e63565b6104726106c3366004614ec0565b611e69565b610449611f11565b6104726106de366004614f10565b611f16565b6105196106f1366004614c20565b611f8e565b610449611fa0565b61051961070c366004614d7e565b611fa5565b610449612567565b6104d8610727366004614ec0565b61256c565b61073f61073a366004614c20565b612594565b604051610456949392919061559d565b61051961075d366004614c20565b6125d5565b610775610770366004614cf2565b6125e7565b6040516104569190615184565b610519612607565b610472610798366004614f10565b61260d565b610449612685565b61044961268a565b6104726107bb366004614cb2565b61268f565b6105d86107ce366004614c20565b61280e565b610449612a8c565b6104726107e9366004614c20565b612a91565b6105196107fc366004614c20565b612c31565b61051961080f366004614c20565b612c43565b610472610822366004614f10565b612c6f565b610472610835366004614c20565b612ce7565b610472610848366004614f10565b612e34565b600381565b60005b80825111156109185760006017600084848151811061089d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060195481600001546108f39190615652565b4311156109055761090381612eac565b505b508061091081615732565b915050610855565b5050565b610924613169565b73ffffffffffffffffffffffffffffffffffffffff16610942611e40565b73ffffffffffffffffffffffffffffffffffffffff1614610998576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b60405180910390fd5b601b55565b6109a5613169565b73ffffffffffffffffffffffffffffffffffffffff166109c3611e40565b73ffffffffffffffffffffffffffffffffffffffff1614610a10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600c55565b610a1d613169565b73ffffffffffffffffffffffffffffffffffffffff16610a3b611e40565b73ffffffffffffffffffffffffffffffffffffffff1614610a88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600a55565b600a81565b600881565b610aa03361316d565b610ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f9061518f565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152600e6020526040902055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052600090815260409020805460019091015482565b60106020526000908152604090205481565b6001546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290610b9e908590859060040161553e565b60206040518083038186803b158015610bb657600080fd5b505afa158015610bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bee9190614ea0565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260036020908152604080832061ffff90951683529390529190912080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b6000610c6383836131a4565b90505b92915050565b606b81565b600b5481565b606981565b60115481565b600c5481565b606781565b610c95613169565b73ffffffffffffffffffffffffffffffffffffffff16610cb3611e40565b73ffffffffffffffffffffffffffffffffffffffff1614610d00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600755565b600080610d1133613344565b610d47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906151ec565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152600d6020908152604080832093891683526002840190915290205415610dff5773ffffffffffffffffffffffffffffffffffffffff86166000908152600282016020526040902054610db790859061337b565b9250610dc4818785613393565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600f602052604081208054859290610df99084906156e0565b90915550505b73ffffffffffffffffffffffffffffffffffffffff871660009081526010602052604081208054879290610e349084906156e0565b90915550610e44905083856156e0565b73ffffffffffffffffffffffffffffffffffffffff871660009081526010602052604081208054909190610e79908490615652565b909155505073ffffffffffffffffffffffffffffffffffffffff8616600090815260106020908152604080832054600e909252909120541015610ee8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615418565b73ffffffffffffffffffffffffffffffffffffffff871660009081526005820160205260409020548590811115611000575073ffffffffffffffffffffffffffffffffffffffff87166000908152600582016020526040902054610f4c81876156e0565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600f6020526040812080549295508592909190610f86908490615652565b909155505073ffffffffffffffffffffffffffffffffffffffff88166000908152600f6020908152604080832054600e909252909120541015610ff5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615418565b6110008289856135d5565b61100d828989848961385f565b50509550959350505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60065461ffff1681565b611047613169565b73ffffffffffffffffffffffffffffffffffffffff16611065611e40565b73ffffffffffffffffffffffffffffffffffffffff16146110b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600955565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602090815260409182902060048101805484518185028101850190955280855260609485949092919083018282801561114457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611119575b5050506004840154929550505067ffffffffffffffff811115611190577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156111b9578160200160208202803683370190505b50915060005b80845111156112a6576000848281518110611203577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508260050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054848381518110611288577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152508061129e81615732565b9150506111bf565b5050915091565b600681565b606681565b6112c033613344565b6112f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906154d2565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600f60205260408120805483929061132b908490615652565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526010602052604081208054839290611365908490615652565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600f6020908152604080832054600e90925290912054108015906113da575073ffffffffffffffffffffffffffffffffffffffff8216600090815260106020908152604080832054600e9092529091205410155b611410576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615418565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600d602052604090206114408184846135d5565b50505050565b60195481565b600061145733613344565b61148d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906154d2565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600d60209081526040808320938716835260028401909152902054156115455773ffffffffffffffffffffffffffffffffffffffff841660009081526002820160205260409020546114fd90849061337b565b915061150a818584613393565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f60205260408120805484929061153f9084906156e0565b90915550505b600061155183856156e0565b905061155e8286836138cc565b73ffffffffffffffffffffffffffffffffffffffff851660009081526010602052604081208054839290611593908490615652565b909155505073ffffffffffffffffffffffffffffffffffffffff8516600090815260106020908152604080832054600e909252909120541015611602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615418565b504390559392505050565b601a5481565b735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f81565b606581565b600181565b6001546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c9061168b90849060040161552f565b60206040518083038186803b1580156116a357600080fd5b505afa1580156116b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db9190614c3c565b61ffff91909116600090815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b61173d3361316d565b611773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906152a6565b6000816000815181106117af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050815167ffffffffffffffff8111156117fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611823578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251611862936002909201929190910190614b55565b50815167ffffffffffffffff8111156118a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156118cd578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600560209081526040909120825161190c936003909201929190910190614b55565b5060005b8061ffff1683511115611b6357828161ffff168151811061195a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018261ffff16815481106119e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260018261ffff168551611a3c91906156e0565b611a4691906156e0565b81518110611a7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018261ffff1681548110611b03577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905580611b5b816156f7565b915050611910565b506000611b6e613971565b73ffffffffffffffffffffffffffffffffffffffff1663192128b2735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f683635c9adc5dea00000866040518463ffffffff1660e01b8152600401611bc79392919061502a565b60006040518083038186803b158015611bdf57600080fd5b505afa158015611bf3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611c399190810190614e1c565b9050600081600081518110611c77577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611440600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082683635c9adc5dea000006103e86139b6565b611cde613169565b73ffffffffffffffffffffffffffffffffffffffff16611cfc611e40565b73ffffffffffffffffffffffffffffffffffffffff1614611d49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b611dc0613169565b73ffffffffffffffffffffffffffffffffffffffff16611dde611e40565b73ffffffffffffffffffffffffffffffffffffffff1614611e2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600b55565b601b5481565b606a81565b600981565b60005473ffffffffffffffffffffffffffffffffffffffff165b90565b60185481565b60085481565b611e71613169565b73ffffffffffffffffffffffffffffffffffffffff16611e8f611e40565b73ffffffffffffffffffffffffffffffffffffffff1614611edc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff92909216919091179055565b600281565b611f1e613169565b73ffffffffffffffffffffffffffffffffffffffff16611f3c611e40565b73ffffffffffffffffffffffffffffffffffffffff1614611f89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b601955565b60166020526000908152604090205481565b600581565b600080611fb0613a2d565b73ffffffffffffffffffffffffffffffffffffffff16637b23cbce336040518263ffffffff1660e01b8152600401611fe89190614fd8565b602060405180830381600087803b15801561200257600080fd5b505af1158015612016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203a9190614ea0565b90506000818061204d575061204d613a72565b9050600061205b8584613b39565b9050809350600061206a61410c565b9050600061207661421b565b9050816064601a54606461208a9190615652565b61209490846156a3565b61209e919061566a565b11156120e5577f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc6120cf83836156e0565b6040516120dc9190615568565b60405180910390a15b600084612176576120f4613a2d565b73ffffffffffffffffffffffffffffffffffffffff16631a38de1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561213b57600080fd5b505af115801561214f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121739190614c3c565b90505b60005b6015548110156123cc576000601582815481106121bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600d90915260408220909250906121fe826001614327565b9050600061220d83600161433a565b905060006064601a548361222191906156a3565b61222b919061566a565b9050612237818e615652565b9c508a6122b15773ffffffffffffffffffffffffffffffffffffffff858116600090815260176020526040902060028101839055600381018054337fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155438255600190910180549091169189169190911790555b6122bb8282615652565b8310612374576122c9614351565b60045473ffffffffffffffffffffffffffffffffffffffff9182169163d9caed12911687846122f887896156e0565b61230291906156e0565b6040518463ffffffff1660e01b815260040161232093929190614ff9565b602060405180830381600087803b15801561233a57600080fd5b505af115801561234e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123729190614ea0565b505b7f1d2cc4c8661a04a00b4e727426220501b36d85bb330947642c2d4320667028cf856040516123a39190614fd8565b60405180910390a16123b484614396565b505050505080806123c490615732565b915050612179565b5060648760185460636123df91906156a3565b6123e99190615652565b6123f3919061566a565b6018556000612400613a2d565b73ffffffffffffffffffffffffffffffffffffffff16631a38de1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561244757600080fd5b505af115801561245b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247f9190614c3c565b905086156125205773ffffffffffffffffffffffffffffffffffffffff81166000908152601660205260409020548810156124f45773ffffffffffffffffffffffffffffffffffffffff8116600090815260166020526040812080548a92906124e99084906156e0565b9091555061251b9050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601660205260408120555b61255b565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260166020526040812080548a9290612555908490615652565b90915550505b50505050505050919050565b606881565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6017602052600090815260409020805460018201546002830154600390930154919273ffffffffffffffffffffffffffffffffffffffff9182169290911684565b600f6020526000908152604090205481565b600360209081526000928352604080842090915290825290205460ff1681565b60075481565b612615613169565b73ffffffffffffffffffffffffffffffffffffffff16612633611e40565b73ffffffffffffffffffffffffffffffffffffffff1614612680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b601a55565b606c81565b600481565b61269833613344565b6126ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906154d2565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600d6020526040902060115481546127029190615652565b431161273a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615360565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601060205260408120805484929061276f9084906156e0565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526005820160205260409020546127a79083906156e0565b73ffffffffffffffffffffffffffffffffffffffff841660009081526005830160205260409020556127d8816145aa565b611440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615303565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602090815260409182902060018101805484518185028101850190955280855260609485949092919083018282801561289b57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612870575b5050506001840154929550505067ffffffffffffffff8111156128e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612910578160200160208202803683370190505b50915060005b80845111156112a657600084828151811061295a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905061296c6145fa565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260028601602090815260408083205460038901909252918290205491517f687680ed000000000000000000000000000000000000000000000000000000008152939092169263687680ed926129e5929091869190600401615571565b60206040518083038186803b1580156129fd57600080fd5b505afa158015612a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a359190614f28565b848381518110612a6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101525080612a8481615732565b915050612916565b600781565b612a9a33613344565b612ad0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906151ec565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d60205260408120905b600182015462ffffff82161015612c27576000826001018262ffffff1681548110612b4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169050612b776145fa565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600286016020526040908190205490517f2a6a897b0000000000000000000000000000000000000000000000000000000081529290911691632a6a897b91612be191859190600401615068565b600060405180830381600087803b158015612bfb57600080fd5b505af1158015612c0f573d6000803e3d6000fd5b50505050508080612c1f90615719565b915050612af7565b5061091881614396565b600e6020526000908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d60205260409020545b919050565b612c77613169565b73ffffffffffffffffffffffffffffffffffffffff16612c95611e40565b73ffffffffffffffffffffffffffffffffffffffff1614612ce2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600855565b612cef613169565b73ffffffffffffffffffffffffffffffffffffffff16612d0d611e40565b73ffffffffffffffffffffffffffffffffffffffff1614612d5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b73ffffffffffffffffffffffffffffffffffffffff8116612da7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615249565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b612e3c613169565b73ffffffffffffffffffffffffffffffffffffffff16612e5a611e40565b73ffffffffffffffffffffffffffffffffffffffff1614612ea7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b601155565b600281015460009015612c6a578154600090612ed490612ecc90436156e0565b60195461337b565b90506000601954828560020154612eeb91906156a3565b612ef5919061566a565b9050612eff614351565b6004805460038701546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9485169463d9caed1294612f609482169390911691879101614ff9565b602060405180830381600087803b158015612f7a57600080fd5b505af1158015612f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb29190614ea0565b506000612fbd613a2d565b90506000601854838373ffffffffffffffffffffffffffffffffffffffff16630ad691506040518163ffffffff1660e01b815260040160206040518083038186803b15801561300b57600080fd5b505afa15801561301f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130439190614f28565b61304d91906156a3565b613057919061566a565b600187015460038801546040517f0a45bc1b00000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff80861693630a45bc1b936130be9390831692879291169060040161508e565b602060405180830381600087803b1580156130d857600080fd5b505af11580156130ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131109190614f28565b506000600287018190556003870180547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155908755600187018054909116905561315f83866156e0565b9695505050505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602090815260408083206009845290915290205460ff1690565b60045460009073ffffffffffffffffffffffffffffffffffffffff848116911614156131d1575080610c66565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260408120906131ff613971565b73ffffffffffffffffffffffffffffffffffffffff1663bb7b9c76735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f86856002016040518463ffffffff1660e01b8152600401613252939291906150be565b60006040518083038186803b15801561326a57600080fd5b505afa15801561327e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526132c49190810190614e1c565b9050600081600183516132d791906156e0565b8151811061330e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600a548111801561332a575060095481105b1561333a5761333a83868361463f565b9250610c66915050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602090815260408083206004845290915290205460ff1690565b60008183111561338c575080610c66565b5081610c66565b61339b6145fa565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260028601602090815260408083205460038901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892613414929091879190600401615571565b602060405180830381600087803b15801561342e57600080fd5b505af1158015613442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134669190614f28565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600285016020526040902081905561349b9082906156e0565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260028501602090815260408083209390935560058601905220546134dc9082906156e0565b73ffffffffffffffffffffffffffffffffffffffff831660009081526005850160209081526040808320939093556002860190522054156135d05761351f6145fa565b73ffffffffffffffffffffffffffffffffffffffff1663e5ea6606836040518263ffffffff1660e01b81526004016135579190614fd8565b60206040518083038186803b15801561356f57600080fd5b505afa158015613583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a79190614f28565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003850160205260409020555b505050565b6135df8383614654565b61363c576001838101805491820181556000908152602090200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055613738565b6136446145fa565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260028601602090815260408083205460038901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa68926136bd929091879190600401615571565b602060405180830381600087803b1580156136d757600080fd5b505af11580156136eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370f9190614f28565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002850160205260409020555b6137406145fa565b73ffffffffffffffffffffffffffffffffffffffff1663e5ea6606836040518263ffffffff1660e01b81526004016137789190614fd8565b60206040518083038186803b15801561379057600080fd5b505afa1580156137a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c89190614f28565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600385016020908152604080832093909355600286019052908120805483929061380f908490615652565b9091555061382090508383836138cc565b613829836145aa565b6135d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615475565b73ffffffffffffffffffffffffffffffffffffffff841660009081526005860160205260409020546138929083906156e0565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005870160205260409020556138c58584836138cc565b5050505050565b6138d68383614682565b61393057600483018054600181018255600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b73ffffffffffffffffffffffffffffffffffffffff8216600090815260058401602052604081208054839290613967908490615652565b9091555050505050565b606760005260026020527f5202c08c707bcafbdba40c5749401bdc48ea45d1e2a9b7478770e7d3035be4cf5473ffffffffffffffffffffffffffffffffffffffff1690565b60006139c3836001615652565b6139d685683635c9adc5dea000006156a3565b6139e0919061566a565b90506103e86139ef83836156a3565b6139fb846103e86156e0565b8760010154613a0a91906156a3565b613a149190615652565b613a1e919061566a565b85600101819055505050505050565b606b60005260026020527f3d0bf07b66e03df2d56279777ed45fe038722a291b477c7255885aec2d54652a5473ffffffffffffffffffffffffffffffffffffffff1690565b600080613a7d613a2d565b73ffffffffffffffffffffffffffffffffffffffff1663b0411f466040518163ffffffff1660e01b8152600401604080518083038186803b158015613ac157600080fd5b505afa158015613ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af99190614d51565b509050601854601b54613b0c91906156a3565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526016602052604090205411905090565b604080516000808252602082019283905290519091613b5b9160139190614b55565b506040805160008152602081019182905251613b7991601491614b55565b506040805160008152602081019182905251613b9791601591614b55565b5060005b8084511115614105576000848281518110613bdf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050613c35816146b1565b156140ae576015805460018101825560009182527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b6004820154811015613e22576000826004018281548110613cf4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352601290915260409091206002810154919250904314613dca5773ffffffffffffffffffffffffffffffffffffffff821660008181526005860160205260408120546001808501919091558184554360028501556013805491820181559091527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055613e0d565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260058501602052604081205460018301805491929091613e07908490615652565b90915550505b50508080613e1a90615732565b915050613caa565b5060005b60018201548110156140ac576000826001018281548110613e70577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835260129091526040822090925090613eac6145fa565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260028801602090815260408083205460038b01909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892613f25929091889190600401615571565b602060405180830381600087803b158015613f3f57600080fd5b505af1158015613f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f779190614f28565b9050613f816145fa565b73ffffffffffffffffffffffffffffffffffffffff16632a6a897b84836040518363ffffffff1660e01b8152600401613fbb929190615068565b600060405180830381600087803b158015613fd557600080fd5b505af1158015613fe9573d6000803e3d6000fd5b505050504382600201541461407c57600060018381018290558284554360028501556014805491820181559091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055614096565b808260000160008282546140909190615652565b90915550505b50505080806140a490615732565b915050613e26565b505b73ffffffffffffffffffffffffffffffffffffffff8216600090815260176020526040902085156140ef576140e281612eac565b6140ec9086615652565b94505b50505080806140fd90615732565b915050613b9b565b5092915050565b6000805b60135481101561420e57600060138281548110614156577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526012909152604090912080546001820154929350909111156141f957805460018201546000916141ac916156e0565b90506141b883826146e9565b6141c29086615652565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260126020526040812081815560018101829055600201559450505b5050808061420690615732565b915050614110565b50611e5a60136000614bdf565b6000805b60145481101561431a57600060148281548110614265577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352601290915260409091206001810154815492935090911115614305576142c582826001015483600001546142c091906156e0565b6146e9565b6142cf9085615652565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601260205260408120818155600181018290556002015593505b5050808061431290615732565b91505061421f565b50611e5a60146000614bdf565b6000610c6383600401846005018461486d565b6000610c638360010184600201856003018561491d565b606560005260026020527f0bb0d0c2a399402027fb0eaada47a2c630983f3dd97f193c64f3e30465d04ec35473ffffffffffffffffffffffffffffffffffffffff1690565b60005b600182015481101561447d5760008260010182815481106143e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600286018252604080842054600f909352832080549194509192906144309084906156e0565b909155505073ffffffffffffffffffffffffffffffffffffffff1660009081526002830160209081526040808320839055600385019091528120558061447581615732565b915050614399565b5060005b600482015481101561458a5760008260040182815481106144cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526005860182526040808420546010909352832080549194509192906145189084906156e0565b909155505073ffffffffffffffffffffffffffffffffffffffff166000908152600583016020908152604080832083905560068501909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558061458281615732565b915050614481565b50614599600182016000614bdf565b6145a7600482016000614bdf565b50565b6000806145b883600061433a565b905060006145c7846000614327565b9050600b54826145d791906156a3565b6001600b546145e691906156e0565b6145f090836156a3565b1015949350505050565b606660005260026020527fc22bc11c71fccd17556f61a8a760aaab7e80d32405436c9a793b10ce8880ed245473ffffffffffffffffffffffffffffffffffffffff1690565b61464d8383836008546139b6565b5050439055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003919091016020526040902054151590565b73ffffffffffffffffffffffffffffffffffffffff166000908152600691909101602052604090205460ff1690565b6000806146bf83600161433a565b905060006146ce846001614327565b905081600c546146de91906156a3565b6145f08260646156a3565b60045460009073ffffffffffffffffffffffffffffffffffffffff84811691161415614716575080610c66565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040812090614744613971565b73ffffffffffffffffffffffffffffffffffffffff16630d873d5e735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f866000866002016040518563ffffffff1660e01b815260040161479a94939291906150f3565b600060405180830381600087803b1580156147b457600080fd5b505af11580156147c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261480e9190810190614e1c565b90506000816001835161482191906156e0565b81518110614858577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905061333a83868361463f565b6000805b84548110156149155760008582815481106148b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352908790526040909120549091506148f5908290866149cf565b6148ff9084615652565b925050808061490d90615732565b915050614871565b509392505050565b6000805b85548110156149c6576000868281548110614965577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352908890526040909120549091506149a69082908787614a6c565b6149b09084615652565b92505080806149be90615732565b915050614921565b50949350505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260408120600654815461ffff90911690614a0a90436156e0565b1180614a1f5750828015614a1f575080544314155b80614a2c57506001810154155b15614a4357614a3b85856131a4565b915050614a65565b6001810154614a5b85683635c9adc5dea000006156a3565b614a3b919061566a565b9392505050565b600080614a776145fa565b73ffffffffffffffffffffffffffffffffffffffff1663e5ea6606876040518263ffffffff1660e01b8152600401614aaf9190614fd8565b60206040518083038186803b158015614ac757600080fd5b505afa158015614adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aff9190614f28565b73ffffffffffffffffffffffffffffffffffffffff871660009081526020869052604081205491925090614b3383886156a3565b614b3d919061566a565b9050614b4a8782866149cf565b979650505050505050565b828054828255906000526020600020908101928215614bcf579160200282015b82811115614bcf57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614b75565b50614bdb929150614bf9565b5090565b50805460008255906000526020600020908101906145a791905b5b80821115614bdb5760008155600101614bfa565b803561ffff81168114612c6a57600080fd5b600060208284031215614c31578081fd5b8135614a65816157c9565b600060208284031215614c4d578081fd5b8151614a65816157c9565b600080600080600060a08688031215614c6f578081fd5b8535614c7a816157c9565b94506020860135614c8a816157c9565b93506040860135614c9a816157c9565b94979396509394606081013594506080013592915050565b600080600060608486031215614cc6578283fd5b8335614cd1816157c9565b92506020840135614ce1816157c9565b929592945050506040919091013590565b60008060408385031215614d04578182fd5b8235614d0f816157c9565b9150614d1d60208401614c0e565b90509250929050565b60008060408385031215614d38578182fd5b8235614d43816157c9565b946020939093013593505050565b60008060408385031215614d63578182fd5b8251614d6e816157c9565b6020939093015192949293505050565b60006020808385031215614d90578182fd5b823567ffffffffffffffff811115614da6578283fd5b8301601f81018513614db6578283fd5b8035614dc9614dc48261562e565b6155df565b8181528381019083850185840285018601891015614de5578687fd5b8694505b83851015614e10578035614dfc816157c9565b835260019490940193918501918501614de9565b50979650505050505050565b60006020808385031215614e2e578182fd5b825167ffffffffffffffff811115614e44578283fd5b8301601f81018513614e54578283fd5b8051614e62614dc48261562e565b8181528381019083850185840285018601891015614e7e578687fd5b8694505b83851015614e10578051835260019490940193918501918501614e82565b600060208284031215614eb1578081fd5b81518015158114614a65578182fd5b600060208284031215614ed1578081fd5b610c6382614c0e565b60008060408385031215614eec578182fd5b614ef583614c0e565b91506020830135614f05816157c9565b809150509250929050565b600060208284031215614f21578081fd5b5035919050565b600060208284031215614f39578081fd5b5051919050565b6000815180845260208085019450808401835b83811015614f8557815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101614f53565b509495945050505050565b6000815480845260208085019450838352808320835b83811015614f8557815473ffffffffffffffffffffffffffffffffffffffff1687529582019560019182019101614fa6565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600073ffffffffffffffffffffffffffffffffffffffff851682528360208301526060604083015261505f6060830184614f40565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681526020810192909252909116604082015260600190565b600073ffffffffffffffffffffffffffffffffffffffff851682528360208301526060604083015261505f6060830184614f90565b600073ffffffffffffffffffffffffffffffffffffffff861682528460208301528360408301526080606083015261315f6080830184614f90565b6000604082526151416040830185614f40565b828103602084810191909152845180835285820192820190845b818110156151775784518352938301939183019160010161515b565b5090979650505050505050565b901515815260200190565b60208082526026908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420746f6b60408201527f656e206361700000000000000000000000000000000000000000000000000000606082015260800190565b60208082526039908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e20747261646572206167656e7400000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f6e6f7420617574686f72697a656420746f20736574206c656e64696e6720636160408201527f7000000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4163636f756e742062616c616e636520697320746f6f206c6f7720746f20776960408201527f7468647261770000000000000000000000000000000000000000000000000000606082015260800190565b60208082526052908201527f546f2070726576656e742061747461636b7320796f75206d757374207761697460408201527f20756e74696c20796f757220636f6f6c696e67206f666620706572696f64206960608201527f73206f76657220746f2077697468647261770000000000000000000000000000608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526039908201527f457863656564696e6720676c6f62616c206578706f737572652063617020746f60408201527f20746f6b656e202d2d2074727920616761696e206c6174657200000000000000606082015260800190565b60208082526022908201527f43616e277420626f72726f773a20696e73756666696369656e742062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f43616c6c696e6720636f6e7472616374206e6f7420617574686f72697a65642060408201527f746f206465706f73697400000000000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b93845273ffffffffffffffffffffffffffffffffffffffff9283166020850152604084019190915216606082015260800190565b918252602082015260400190565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156156265761562661579a565b604052919050565b600067ffffffffffffffff8211156156485761564861579a565b5060209081020190565b600082198211156156655761566561576b565b500190565b60008261569e577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156156db576156db61576b565b500290565b6000828210156156f2576156f261576b565b500390565b600061ffff8083168181141561570f5761570f61576b565b6001019392505050565b600062ffffff8083168181141561570f5761570f61576b565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156157645761576461576b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146145a757600080fdfea2646970667358221220c4dbc4cc25d2fe659f25d83bd1d9413fea9575d841e46008b7b41d358dc12fa864736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061043c5760003560e01c80636cd5cd6011610235578063b448165211610135578063d0eb6653116100c8578063e0f3871f11610097578063f171c6011161007c578063f171c60114610814578063f2fde38b14610827578063f99fd97c1461083a5761043c565b8063e0f3871f146107ee578063eac29dd6146108015761043c565b8063d0eb6653146107ad578063d510c535146107c0578063d5d7ed7f146107d3578063db2d904d146107db5761043c565b8063c3c9fcd911610104578063c3c9fcd914610782578063c73afac21461078a578063c76139d01461079d578063cacf8d45146107a55761043c565b8063b448165214610719578063badb50481461072c578063bc44dcbc1461074f578063c34316c3146107625761043c565b80639d01b86c116101c8578063a371891911610197578063a94c7c341161017c578063a94c7c34146106f6578063a985994b146106fe578063a9cc0536146107115761043c565b8063a3718919146106d0578063a75697a5146106e35761043c565b80639d01b86c146106a55780639dfc0c16146106ad578063a0089159146106b5578063a0098d69146106c85761043c565b80637d100e84116102045780637d100e841461068557806381ca66001461068d57806383a49c7c146106955780638da5cb5b1461069d5761043c565b80636cd5cd60146106445780636cd7bc4b14610657578063715018a61461066a57806379575b23146106725761043c565b8063320d2fa01161034057806346b88796116102d357806352a664d9116102a2578063541bcb7611610287578063541bcb761461062c5780635c275a3914610634578063669419841461063c5761043c565b806352a664d914610611578063538edb29146106245761043c565b806346b88796146105e657806348fb27b8146105ee578063498d55eb146105f65780634aa4aca3146106095761043c565b8063392f5f641161030f578063392f5f64146105a25780633ed456fa146105aa5780633ffc17c0146105b2578063409fdb72146105c55761043c565b8063320d2fa01461056c57806332fe7b2614610574578063333080c01461057c5780633500aa0b1461058f5761043c565b80631f1cb62b116103d3578063232c765b116103a25780632c86d98e116103875780632c86d98e146105545780632fe94def1461055c5780632febaa74146105645761043c565b8063232c765b146105395780632a0acc6a1461054c5761043c565b80631f1cb62b146104d0578063204120bc146104e557806320c271261461050657806320e8d819146105265761043c565b806319fa00e11161040f57806319fa00e11461049a5780631b669507146104ad5780631bc5d81d146104b55780631d47e4a3146104bd5761043c565b8063065d570f1461044157806307c201751461045f57806310d584341461047457806316317e7e14610487575b600080fd5b61044961084d565b604051610456919061552f565b60405180910390f35b61047261046d366004614d7e565b610852565b005b610472610482366004614f10565b61091c565b610472610495366004614f10565b61099d565b6104726104a8366004614f10565b610a15565b610449610a8d565b610449610a92565b6104726104cb366004614d26565b610a97565b6104d8610aff565b6040516104569190614fd8565b6104f86104f3366004614c20565b610b1b565b6040516104569291906155d1565b610519610514366004614c20565b610b34565b6040516104569190615568565b610472610534366004614eda565b610b46565b610519610547366004614d26565b610c57565b610449610c6c565b610519610c71565b610449610c77565b610519610c7c565b610519610c82565b610449610c88565b61047261058a366004614f10565b610c8d565b6104f861059d366004614c58565b610d05565b6104d8611019565b610449611035565b6104726105c0366004614f10565b61103f565b6105d86105d3366004614c20565b6110b7565b60405161045692919061512e565b6104496112ad565b6104496112b2565b610472610604366004614cb2565b6112b7565b610519611446565b61051961061f366004614cb2565b61144c565b61051961160d565b6104d8611613565b61044961162b565b610449611630565b610472610652366004614ec0565b611635565b610472610665366004614d7e565b611734565b610472611cd6565b610472610680366004614f10565b611db8565b610519611e30565b610449611e36565b610449611e3b565b6104d8611e40565b610519611e5d565b610519611e63565b6104726106c3366004614ec0565b611e69565b610449611f11565b6104726106de366004614f10565b611f16565b6105196106f1366004614c20565b611f8e565b610449611fa0565b61051961070c366004614d7e565b611fa5565b610449612567565b6104d8610727366004614ec0565b61256c565b61073f61073a366004614c20565b612594565b604051610456949392919061559d565b61051961075d366004614c20565b6125d5565b610775610770366004614cf2565b6125e7565b6040516104569190615184565b610519612607565b610472610798366004614f10565b61260d565b610449612685565b61044961268a565b6104726107bb366004614cb2565b61268f565b6105d86107ce366004614c20565b61280e565b610449612a8c565b6104726107e9366004614c20565b612a91565b6105196107fc366004614c20565b612c31565b61051961080f366004614c20565b612c43565b610472610822366004614f10565b612c6f565b610472610835366004614c20565b612ce7565b610472610848366004614f10565b612e34565b600381565b60005b80825111156109185760006017600084848151811061089d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060195481600001546108f39190615652565b4311156109055761090381612eac565b505b508061091081615732565b915050610855565b5050565b610924613169565b73ffffffffffffffffffffffffffffffffffffffff16610942611e40565b73ffffffffffffffffffffffffffffffffffffffff1614610998576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b60405180910390fd5b601b55565b6109a5613169565b73ffffffffffffffffffffffffffffffffffffffff166109c3611e40565b73ffffffffffffffffffffffffffffffffffffffff1614610a10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600c55565b610a1d613169565b73ffffffffffffffffffffffffffffffffffffffff16610a3b611e40565b73ffffffffffffffffffffffffffffffffffffffff1614610a88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600a55565b600a81565b600881565b610aa03361316d565b610ad6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f9061518f565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152600e6020526040902055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052600090815260409020805460019091015482565b60106020526000908152604090205481565b6001546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290610b9e908590859060040161553e565b60206040518083038186803b158015610bb657600080fd5b505afa158015610bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bee9190614ea0565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260036020908152604080832061ffff90951683529390529190912080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b6000610c6383836131a4565b90505b92915050565b606b81565b600b5481565b606981565b60115481565b600c5481565b606781565b610c95613169565b73ffffffffffffffffffffffffffffffffffffffff16610cb3611e40565b73ffffffffffffffffffffffffffffffffffffffff1614610d00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600755565b600080610d1133613344565b610d47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906151ec565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152600d6020908152604080832093891683526002840190915290205415610dff5773ffffffffffffffffffffffffffffffffffffffff86166000908152600282016020526040902054610db790859061337b565b9250610dc4818785613393565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600f602052604081208054859290610df99084906156e0565b90915550505b73ffffffffffffffffffffffffffffffffffffffff871660009081526010602052604081208054879290610e349084906156e0565b90915550610e44905083856156e0565b73ffffffffffffffffffffffffffffffffffffffff871660009081526010602052604081208054909190610e79908490615652565b909155505073ffffffffffffffffffffffffffffffffffffffff8616600090815260106020908152604080832054600e909252909120541015610ee8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615418565b73ffffffffffffffffffffffffffffffffffffffff871660009081526005820160205260409020548590811115611000575073ffffffffffffffffffffffffffffffffffffffff87166000908152600582016020526040902054610f4c81876156e0565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600f6020526040812080549295508592909190610f86908490615652565b909155505073ffffffffffffffffffffffffffffffffffffffff88166000908152600f6020908152604080832054600e909252909120541015610ff5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615418565b6110008289856135d5565b61100d828989848961385f565b50509550959350505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60065461ffff1681565b611047613169565b73ffffffffffffffffffffffffffffffffffffffff16611065611e40565b73ffffffffffffffffffffffffffffffffffffffff16146110b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600955565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602090815260409182902060048101805484518185028101850190955280855260609485949092919083018282801561114457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611119575b5050506004840154929550505067ffffffffffffffff811115611190577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156111b9578160200160208202803683370190505b50915060005b80845111156112a6576000848281518110611203577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508260050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054848381518110611288577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152508061129e81615732565b9150506111bf565b5050915091565b600681565b606681565b6112c033613344565b6112f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906154d2565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600f60205260408120805483929061132b908490615652565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526010602052604081208054839290611365908490615652565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600f6020908152604080832054600e90925290912054108015906113da575073ffffffffffffffffffffffffffffffffffffffff8216600090815260106020908152604080832054600e9092529091205410155b611410576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615418565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600d602052604090206114408184846135d5565b50505050565b60195481565b600061145733613344565b61148d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906154d2565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600d60209081526040808320938716835260028401909152902054156115455773ffffffffffffffffffffffffffffffffffffffff841660009081526002820160205260409020546114fd90849061337b565b915061150a818584613393565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f60205260408120805484929061153f9084906156e0565b90915550505b600061155183856156e0565b905061155e8286836138cc565b73ffffffffffffffffffffffffffffffffffffffff851660009081526010602052604081208054839290611593908490615652565b909155505073ffffffffffffffffffffffffffffffffffffffff8516600090815260106020908152604080832054600e909252909120541015611602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615418565b504390559392505050565b601a5481565b735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f81565b606581565b600181565b6001546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c9061168b90849060040161552f565b60206040518083038186803b1580156116a357600080fd5b505afa1580156116b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db9190614c3c565b61ffff91909116600090815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b61173d3361316d565b611773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906152a6565b6000816000815181106117af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050815167ffffffffffffffff8111156117fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611823578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff821660009081526005602090815260409091208251611862936002909201929190910190614b55565b50815167ffffffffffffffff8111156118a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156118cd578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600560209081526040909120825161190c936003909201929190910190614b55565b5060005b8061ffff1683511115611b6357828161ffff168151811061195a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018261ffff16815481106119e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260018261ffff168551611a3c91906156e0565b611a4691906156e0565b81518110611a7d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018261ffff1681548110611b03577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905580611b5b816156f7565b915050611910565b506000611b6e613971565b73ffffffffffffffffffffffffffffffffffffffff1663192128b2735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f683635c9adc5dea00000866040518463ffffffff1660e01b8152600401611bc79392919061502a565b60006040518083038186803b158015611bdf57600080fd5b505afa158015611bf3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611c399190810190614e1c565b9050600081600081518110611c77577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611440600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082683635c9adc5dea000006103e86139b6565b611cde613169565b73ffffffffffffffffffffffffffffffffffffffff16611cfc611e40565b73ffffffffffffffffffffffffffffffffffffffff1614611d49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b611dc0613169565b73ffffffffffffffffffffffffffffffffffffffff16611dde611e40565b73ffffffffffffffffffffffffffffffffffffffff1614611e2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600b55565b601b5481565b606a81565b600981565b60005473ffffffffffffffffffffffffffffffffffffffff165b90565b60185481565b60085481565b611e71613169565b73ffffffffffffffffffffffffffffffffffffffff16611e8f611e40565b73ffffffffffffffffffffffffffffffffffffffff1614611edc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff92909216919091179055565b600281565b611f1e613169565b73ffffffffffffffffffffffffffffffffffffffff16611f3c611e40565b73ffffffffffffffffffffffffffffffffffffffff1614611f89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b601955565b60166020526000908152604090205481565b600581565b600080611fb0613a2d565b73ffffffffffffffffffffffffffffffffffffffff16637b23cbce336040518263ffffffff1660e01b8152600401611fe89190614fd8565b602060405180830381600087803b15801561200257600080fd5b505af1158015612016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203a9190614ea0565b90506000818061204d575061204d613a72565b9050600061205b8584613b39565b9050809350600061206a61410c565b9050600061207661421b565b9050816064601a54606461208a9190615652565b61209490846156a3565b61209e919061566a565b11156120e5577f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc6120cf83836156e0565b6040516120dc9190615568565b60405180910390a15b600084612176576120f4613a2d565b73ffffffffffffffffffffffffffffffffffffffff16631a38de1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561213b57600080fd5b505af115801561214f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121739190614c3c565b90505b60005b6015548110156123cc576000601582815481106121bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600d90915260408220909250906121fe826001614327565b9050600061220d83600161433a565b905060006064601a548361222191906156a3565b61222b919061566a565b9050612237818e615652565b9c508a6122b15773ffffffffffffffffffffffffffffffffffffffff858116600090815260176020526040902060028101839055600381018054337fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155438255600190910180549091169189169190911790555b6122bb8282615652565b8310612374576122c9614351565b60045473ffffffffffffffffffffffffffffffffffffffff9182169163d9caed12911687846122f887896156e0565b61230291906156e0565b6040518463ffffffff1660e01b815260040161232093929190614ff9565b602060405180830381600087803b15801561233a57600080fd5b505af115801561234e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123729190614ea0565b505b7f1d2cc4c8661a04a00b4e727426220501b36d85bb330947642c2d4320667028cf856040516123a39190614fd8565b60405180910390a16123b484614396565b505050505080806123c490615732565b915050612179565b5060648760185460636123df91906156a3565b6123e99190615652565b6123f3919061566a565b6018556000612400613a2d565b73ffffffffffffffffffffffffffffffffffffffff16631a38de1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561244757600080fd5b505af115801561245b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247f9190614c3c565b905086156125205773ffffffffffffffffffffffffffffffffffffffff81166000908152601660205260409020548810156124f45773ffffffffffffffffffffffffffffffffffffffff8116600090815260166020526040812080548a92906124e99084906156e0565b9091555061251b9050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601660205260408120555b61255b565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260166020526040812080548a9290612555908490615652565b90915550505b50505050505050919050565b606881565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6017602052600090815260409020805460018201546002830154600390930154919273ffffffffffffffffffffffffffffffffffffffff9182169290911684565b600f6020526000908152604090205481565b600360209081526000928352604080842090915290825290205460ff1681565b60075481565b612615613169565b73ffffffffffffffffffffffffffffffffffffffff16612633611e40565b73ffffffffffffffffffffffffffffffffffffffff1614612680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b601a55565b606c81565b600481565b61269833613344565b6126ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906154d2565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600d6020526040902060115481546127029190615652565b431161273a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615360565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601060205260408120805484929061276f9084906156e0565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526005820160205260409020546127a79083906156e0565b73ffffffffffffffffffffffffffffffffffffffff841660009081526005830160205260409020556127d8816145aa565b611440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615303565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602090815260409182902060018101805484518185028101850190955280855260609485949092919083018282801561289b57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612870575b5050506001840154929550505067ffffffffffffffff8111156128e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612910578160200160208202803683370190505b50915060005b80845111156112a657600084828151811061295a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905061296c6145fa565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260028601602090815260408083205460038901909252918290205491517f687680ed000000000000000000000000000000000000000000000000000000008152939092169263687680ed926129e5929091869190600401615571565b60206040518083038186803b1580156129fd57600080fd5b505afa158015612a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a359190614f28565b848381518110612a6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101525080612a8481615732565b915050612916565b600781565b612a9a33613344565b612ad0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906151ec565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d60205260408120905b600182015462ffffff82161015612c27576000826001018262ffffff1681548110612b4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169050612b776145fa565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600286016020526040908190205490517f2a6a897b0000000000000000000000000000000000000000000000000000000081529290911691632a6a897b91612be191859190600401615068565b600060405180830381600087803b158015612bfb57600080fd5b505af1158015612c0f573d6000803e3d6000fd5b50505050508080612c1f90615719565b915050612af7565b5061091881614396565b600e6020526000908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d60205260409020545b919050565b612c77613169565b73ffffffffffffffffffffffffffffffffffffffff16612c95611e40565b73ffffffffffffffffffffffffffffffffffffffff1614612ce2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b600855565b612cef613169565b73ffffffffffffffffffffffffffffffffffffffff16612d0d611e40565b73ffffffffffffffffffffffffffffffffffffffff1614612d5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b73ffffffffffffffffffffffffffffffffffffffff8116612da7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615249565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b612e3c613169565b73ffffffffffffffffffffffffffffffffffffffff16612e5a611e40565b73ffffffffffffffffffffffffffffffffffffffff1614612ea7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f906153e3565b601155565b600281015460009015612c6a578154600090612ed490612ecc90436156e0565b60195461337b565b90506000601954828560020154612eeb91906156a3565b612ef5919061566a565b9050612eff614351565b6004805460038701546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9485169463d9caed1294612f609482169390911691879101614ff9565b602060405180830381600087803b158015612f7a57600080fd5b505af1158015612f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb29190614ea0565b506000612fbd613a2d565b90506000601854838373ffffffffffffffffffffffffffffffffffffffff16630ad691506040518163ffffffff1660e01b815260040160206040518083038186803b15801561300b57600080fd5b505afa15801561301f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130439190614f28565b61304d91906156a3565b613057919061566a565b600187015460038801546040517f0a45bc1b00000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff80861693630a45bc1b936130be9390831692879291169060040161508e565b602060405180830381600087803b1580156130d857600080fd5b505af11580156130ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131109190614f28565b506000600287018190556003870180547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155908755600187018054909116905561315f83866156e0565b9695505050505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602090815260408083206009845290915290205460ff1690565b60045460009073ffffffffffffffffffffffffffffffffffffffff848116911614156131d1575080610c66565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260408120906131ff613971565b73ffffffffffffffffffffffffffffffffffffffff1663bb7b9c76735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f86856002016040518463ffffffff1660e01b8152600401613252939291906150be565b60006040518083038186803b15801561326a57600080fd5b505afa15801561327e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526132c49190810190614e1c565b9050600081600183516132d791906156e0565b8151811061330e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600a548111801561332a575060095481105b1561333a5761333a83868361463f565b9250610c66915050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602090815260408083206004845290915290205460ff1690565b60008183111561338c575080610c66565b5081610c66565b61339b6145fa565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260028601602090815260408083205460038901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892613414929091879190600401615571565b602060405180830381600087803b15801561342e57600080fd5b505af1158015613442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134669190614f28565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600285016020526040902081905561349b9082906156e0565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260028501602090815260408083209390935560058601905220546134dc9082906156e0565b73ffffffffffffffffffffffffffffffffffffffff831660009081526005850160209081526040808320939093556002860190522054156135d05761351f6145fa565b73ffffffffffffffffffffffffffffffffffffffff1663e5ea6606836040518263ffffffff1660e01b81526004016135579190614fd8565b60206040518083038186803b15801561356f57600080fd5b505afa158015613583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a79190614f28565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003850160205260409020555b505050565b6135df8383614654565b61363c576001838101805491820181556000908152602090200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055613738565b6136446145fa565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260028601602090815260408083205460038901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa68926136bd929091879190600401615571565b602060405180830381600087803b1580156136d757600080fd5b505af11580156136eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370f9190614f28565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002850160205260409020555b6137406145fa565b73ffffffffffffffffffffffffffffffffffffffff1663e5ea6606836040518263ffffffff1660e01b81526004016137789190614fd8565b60206040518083038186803b15801561379057600080fd5b505afa1580156137a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c89190614f28565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600385016020908152604080832093909355600286019052908120805483929061380f908490615652565b9091555061382090508383836138cc565b613829836145aa565b6135d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098f90615475565b73ffffffffffffffffffffffffffffffffffffffff841660009081526005860160205260409020546138929083906156e0565b73ffffffffffffffffffffffffffffffffffffffff851660009081526005870160205260409020556138c58584836138cc565b5050505050565b6138d68383614682565b61393057600483018054600181018255600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b73ffffffffffffffffffffffffffffffffffffffff8216600090815260058401602052604081208054839290613967908490615652565b9091555050505050565b606760005260026020527f5202c08c707bcafbdba40c5749401bdc48ea45d1e2a9b7478770e7d3035be4cf5473ffffffffffffffffffffffffffffffffffffffff1690565b60006139c3836001615652565b6139d685683635c9adc5dea000006156a3565b6139e0919061566a565b90506103e86139ef83836156a3565b6139fb846103e86156e0565b8760010154613a0a91906156a3565b613a149190615652565b613a1e919061566a565b85600101819055505050505050565b606b60005260026020527f3d0bf07b66e03df2d56279777ed45fe038722a291b477c7255885aec2d54652a5473ffffffffffffffffffffffffffffffffffffffff1690565b600080613a7d613a2d565b73ffffffffffffffffffffffffffffffffffffffff1663b0411f466040518163ffffffff1660e01b8152600401604080518083038186803b158015613ac157600080fd5b505afa158015613ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af99190614d51565b509050601854601b54613b0c91906156a3565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526016602052604090205411905090565b604080516000808252602082019283905290519091613b5b9160139190614b55565b506040805160008152602081019182905251613b7991601491614b55565b506040805160008152602081019182905251613b9791601591614b55565b5060005b8084511115614105576000848281518110613bdf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050613c35816146b1565b156140ae576015805460018101825560009182527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b6004820154811015613e22576000826004018281548110613cf4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352601290915260409091206002810154919250904314613dca5773ffffffffffffffffffffffffffffffffffffffff821660008181526005860160205260408120546001808501919091558184554360028501556013805491820181559091527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055613e0d565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260058501602052604081205460018301805491929091613e07908490615652565b90915550505b50508080613e1a90615732565b915050613caa565b5060005b60018201548110156140ac576000826001018281548110613e70577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835260129091526040822090925090613eac6145fa565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260028801602090815260408083205460038b01909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892613f25929091889190600401615571565b602060405180830381600087803b158015613f3f57600080fd5b505af1158015613f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f779190614f28565b9050613f816145fa565b73ffffffffffffffffffffffffffffffffffffffff16632a6a897b84836040518363ffffffff1660e01b8152600401613fbb929190615068565b600060405180830381600087803b158015613fd557600080fd5b505af1158015613fe9573d6000803e3d6000fd5b505050504382600201541461407c57600060018381018290558284554360028501556014805491820181559091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055614096565b808260000160008282546140909190615652565b90915550505b50505080806140a490615732565b915050613e26565b505b73ffffffffffffffffffffffffffffffffffffffff8216600090815260176020526040902085156140ef576140e281612eac565b6140ec9086615652565b94505b50505080806140fd90615732565b915050613b9b565b5092915050565b6000805b60135481101561420e57600060138281548110614156577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526012909152604090912080546001820154929350909111156141f957805460018201546000916141ac916156e0565b90506141b883826146e9565b6141c29086615652565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260126020526040812081815560018101829055600201559450505b5050808061420690615732565b915050614110565b50611e5a60136000614bdf565b6000805b60145481101561431a57600060148281548110614265577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352601290915260409091206001810154815492935090911115614305576142c582826001015483600001546142c091906156e0565b6146e9565b6142cf9085615652565b73ffffffffffffffffffffffffffffffffffffffff83166000908152601260205260408120818155600181018290556002015593505b5050808061431290615732565b91505061421f565b50611e5a60146000614bdf565b6000610c6383600401846005018461486d565b6000610c638360010184600201856003018561491d565b606560005260026020527f0bb0d0c2a399402027fb0eaada47a2c630983f3dd97f193c64f3e30465d04ec35473ffffffffffffffffffffffffffffffffffffffff1690565b60005b600182015481101561447d5760008260010182815481106143e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600286018252604080842054600f909352832080549194509192906144309084906156e0565b909155505073ffffffffffffffffffffffffffffffffffffffff1660009081526002830160209081526040808320839055600385019091528120558061447581615732565b915050614399565b5060005b600482015481101561458a5760008260040182815481106144cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526005860182526040808420546010909352832080549194509192906145189084906156e0565b909155505073ffffffffffffffffffffffffffffffffffffffff166000908152600583016020908152604080832083905560068501909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558061458281615732565b915050614481565b50614599600182016000614bdf565b6145a7600482016000614bdf565b50565b6000806145b883600061433a565b905060006145c7846000614327565b9050600b54826145d791906156a3565b6001600b546145e691906156e0565b6145f090836156a3565b1015949350505050565b606660005260026020527fc22bc11c71fccd17556f61a8a760aaab7e80d32405436c9a793b10ce8880ed245473ffffffffffffffffffffffffffffffffffffffff1690565b61464d8383836008546139b6565b5050439055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003919091016020526040902054151590565b73ffffffffffffffffffffffffffffffffffffffff166000908152600691909101602052604090205460ff1690565b6000806146bf83600161433a565b905060006146ce846001614327565b905081600c546146de91906156a3565b6145f08260646156a3565b60045460009073ffffffffffffffffffffffffffffffffffffffff84811691161415614716575080610c66565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040812090614744613971565b73ffffffffffffffffffffffffffffffffffffffff16630d873d5e735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f866000866002016040518563ffffffff1660e01b815260040161479a94939291906150f3565b600060405180830381600087803b1580156147b457600080fd5b505af11580156147c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261480e9190810190614e1c565b90506000816001835161482191906156e0565b81518110614858577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905061333a83868361463f565b6000805b84548110156149155760008582815481106148b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352908790526040909120549091506148f5908290866149cf565b6148ff9084615652565b925050808061490d90615732565b915050614871565b509392505050565b6000805b85548110156149c6576000868281548110614965577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352908890526040909120549091506149a69082908787614a6c565b6149b09084615652565b92505080806149be90615732565b915050614921565b50949350505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260408120600654815461ffff90911690614a0a90436156e0565b1180614a1f5750828015614a1f575080544314155b80614a2c57506001810154155b15614a4357614a3b85856131a4565b915050614a65565b6001810154614a5b85683635c9adc5dea000006156a3565b614a3b919061566a565b9392505050565b600080614a776145fa565b73ffffffffffffffffffffffffffffffffffffffff1663e5ea6606876040518263ffffffff1660e01b8152600401614aaf9190614fd8565b60206040518083038186803b158015614ac757600080fd5b505afa158015614adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aff9190614f28565b73ffffffffffffffffffffffffffffffffffffffff871660009081526020869052604081205491925090614b3383886156a3565b614b3d919061566a565b9050614b4a8782866149cf565b979650505050505050565b828054828255906000526020600020908101928215614bcf579160200282015b82811115614bcf57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614b75565b50614bdb929150614bf9565b5090565b50805460008255906000526020600020908101906145a791905b5b80821115614bdb5760008155600101614bfa565b803561ffff81168114612c6a57600080fd5b600060208284031215614c31578081fd5b8135614a65816157c9565b600060208284031215614c4d578081fd5b8151614a65816157c9565b600080600080600060a08688031215614c6f578081fd5b8535614c7a816157c9565b94506020860135614c8a816157c9565b93506040860135614c9a816157c9565b94979396509394606081013594506080013592915050565b600080600060608486031215614cc6578283fd5b8335614cd1816157c9565b92506020840135614ce1816157c9565b929592945050506040919091013590565b60008060408385031215614d04578182fd5b8235614d0f816157c9565b9150614d1d60208401614c0e565b90509250929050565b60008060408385031215614d38578182fd5b8235614d43816157c9565b946020939093013593505050565b60008060408385031215614d63578182fd5b8251614d6e816157c9565b6020939093015192949293505050565b60006020808385031215614d90578182fd5b823567ffffffffffffffff811115614da6578283fd5b8301601f81018513614db6578283fd5b8035614dc9614dc48261562e565b6155df565b8181528381019083850185840285018601891015614de5578687fd5b8694505b83851015614e10578035614dfc816157c9565b835260019490940193918501918501614de9565b50979650505050505050565b60006020808385031215614e2e578182fd5b825167ffffffffffffffff811115614e44578283fd5b8301601f81018513614e54578283fd5b8051614e62614dc48261562e565b8181528381019083850185840285018601891015614e7e578687fd5b8694505b83851015614e10578051835260019490940193918501918501614e82565b600060208284031215614eb1578081fd5b81518015158114614a65578182fd5b600060208284031215614ed1578081fd5b610c6382614c0e565b60008060408385031215614eec578182fd5b614ef583614c0e565b91506020830135614f05816157c9565b809150509250929050565b600060208284031215614f21578081fd5b5035919050565b600060208284031215614f39578081fd5b5051919050565b6000815180845260208085019450808401835b83811015614f8557815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101614f53565b509495945050505050565b6000815480845260208085019450838352808320835b83811015614f8557815473ffffffffffffffffffffffffffffffffffffffff1687529582019560019182019101614fa6565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600073ffffffffffffffffffffffffffffffffffffffff851682528360208301526060604083015261505f6060830184614f40565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681526020810192909252909116604082015260600190565b600073ffffffffffffffffffffffffffffffffffffffff851682528360208301526060604083015261505f6060830184614f90565b600073ffffffffffffffffffffffffffffffffffffffff861682528460208301528360408301526080606083015261315f6080830184614f90565b6000604082526151416040830185614f40565b828103602084810191909152845180835285820192820190845b818110156151775784518352938301939183019160010161515b565b5090979650505050505050565b901515815260200190565b60208082526026908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420746f6b60408201527f656e206361700000000000000000000000000000000000000000000000000000606082015260800190565b60208082526039908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e20747261646572206167656e7400000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f6e6f7420617574686f72697a656420746f20736574206c656e64696e6720636160408201527f7000000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4163636f756e742062616c616e636520697320746f6f206c6f7720746f20776960408201527f7468647261770000000000000000000000000000000000000000000000000000606082015260800190565b60208082526052908201527f546f2070726576656e742061747461636b7320796f75206d757374207761697460408201527f20756e74696c20796f757220636f6f6c696e67206f666620706572696f64206960608201527f73206f76657220746f2077697468647261770000000000000000000000000000608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526039908201527f457863656564696e6720676c6f62616c206578706f737572652063617020746f60408201527f20746f6b656e202d2d2074727920616761696e206c6174657200000000000000606082015260800190565b60208082526022908201527f43616e277420626f72726f773a20696e73756666696369656e742062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f43616c6c696e6720636f6e7472616374206e6f7420617574686f72697a65642060408201527f746f206465706f73697400000000000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b93845273ffffffffffffffffffffffffffffffffffffffff9283166020850152604084019190915216606082015260800190565b918252602082015260400190565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156156265761562661579a565b604052919050565b600067ffffffffffffffff8211156156485761564861579a565b5060209081020190565b600082198211156156655761566561576b565b500190565b60008261569e577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156156db576156db61576b565b500290565b6000828210156156f2576156f261576b565b500390565b600061ffff8083168181141561570f5761570f61576b565b6001019392505050565b600062ffffff8083168181141561570f5761570f61576b565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156157645761576461576b565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146145a757600080fdfea2646970667358221220c4dbc4cc25d2fe659f25d83bd1d9413fea9575d841e46008b7b41d358dc12fa864736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBorrowAmounts(address)": {
        "details": "view function to display account borrowing state"
      },
      "getHoldingAmounts(address)": {
        "details": "view function to display account held assets state"
      },
      "getLastDepositBlock(address)": {
        "details": "last time this account deposited relevant for withdrawal window"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerBorrow(address,address,uint256)": {
        "details": "gets called by router to affirm isolated borrowing event"
      },
      "registerDeposit(address,address,uint256)": {
        "details": "gets called by router to affirm a deposit to an account"
      },
      "registerLiquidation(address)": {
        "details": "can get called by router to register the dissolution of an account"
      },
      "registerTradeAndBorrow(address,address,address,uint256,uint256)": {
        "details": "gets callled by router to register a trade and borrow and extinguis as necessary"
      },
      "registerWithdrawal(address,address,uint256)": {
        "details": "gets called by router to affirm withdrawal of tokens from account"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCoolingOffPeriod(uint256)": {
        "details": "setter for cooling off period for withdrawing funds after deposit"
      },
      "setLeverage(uint256)": {
        "details": "admin function to set leverage"
      },
      "setLiquidationThresholdPercent(uint256)": {
        "details": "admin function to set liquidation threshold"
      },
      "setTokenCap(address,uint256)": {
        "details": "admin function to set the token cap"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "liquidate(address[])": {
        "notice": "called by maintenance stakers to liquidate accounts below liquidation threshold"
      },
      "priceUpdateWindow()": {
        "notice": "update window in blocks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 381,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11718,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "roles",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Roles)12108"
      },
      {
        "astId": 11722,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 11728,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "roleCache",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_bool))"
      },
      {
        "astId": 11124,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "peg",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11129,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "tokenPrices",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(TokenPrice)11115_storage)"
      },
      {
        "astId": 11133,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "priceUpdateWindow",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 11136,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "TEPID_UPDATE_RATE_PERMIL",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11139,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "CONFIDENT_UPDATE_RATE_PERMIL",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11142,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "UPDATE_MAX_PEG_AMOUNT",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 11145,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "UPDATE_MIN_PEG_AMOUNT",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4634,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "leverage",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4637,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "liquidationThresholdPercent",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4643,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "marginAccounts",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(CrossMarginAccount)4627_storage)"
      },
      {
        "astId": 4648,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "tokenCaps",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4653,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "totalShort",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4658,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "totalLong",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4660,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "coolingOffPeriod",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 5507,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "liquidationAmounts",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(Liquidation)5493_storage)"
      },
      {
        "astId": 5510,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "sellTokens",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5513,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "buyTokens",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5516,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "tradersToLiquidate",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5520,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "maintenanceFailures",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5525,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "stakeAttackRecords",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_struct(AccountLiqRecord)5502_storage)"
      },
      {
        "astId": 5528,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "avgLiquidationPerBlock",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 5531,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "liqStakeAttackWindow",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 5534,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "MAINTAINER_CUT_PERCENT",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 5537,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "failureThreshold",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Roles)12108": {
        "encoding": "inplace",
        "label": "contract Roles",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bool)"
      },
      "t_mapping(t_address,t_struct(AccountLiqRecord)5502_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginLiquidation.AccountLiqRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountLiqRecord)5502_storage"
      },
      "t_mapping(t_address,t_struct(CrossMarginAccount)4627_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(CrossMarginAccount)4627_storage"
      },
      "t_mapping(t_address,t_struct(Liquidation)5493_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginLiquidation.Liquidation)",
        "numberOfBytes": "32",
        "value": "t_struct(Liquidation)5493_storage"
      },
      "t_mapping(t_address,t_struct(TokenPrice)11115_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenPrice)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenPrice)11115_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AccountLiqRecord)5502_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginLiquidation.AccountLiqRecord",
        "members": [
          {
            "astId": 5495,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "blockNum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5497,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "loser",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5499,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5501,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "stakeAttacker",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(CrossMarginAccount)4627_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginAccount",
        "members": [
          {
            "astId": 4604,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "lastDepositBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4607,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4611,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowed",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4615,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowedYieldQuotientsFP",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4618,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdingTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4622,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdings",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4626,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdsToken",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Liquidation)5493_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginLiquidation.Liquidation",
        "members": [
          {
            "astId": 5488,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "buy",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5490,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "sell",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5492,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "blockNum",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TokenPrice)11115_storage": {
        "encoding": "inplace",
        "label": "struct TokenPrice",
        "members": [
          {
            "astId": 11106,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "blockLastUpdated",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11108,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "tokenPer1k",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11111,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "liquidationPath",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 11114,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "inverseLiquidationPath",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}