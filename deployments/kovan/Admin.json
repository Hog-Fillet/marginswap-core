{
  "address": "0xFCc8e64E05646bE9117800289A872f3828d29A84",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feesPer10k",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_MFI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockedMFI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockedMFIDelegate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUTHORIZED_FUND_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_SOURCE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUND",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_DISTRIBUTION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_REPORTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LENDING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_CALLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_PENALIZER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_ACTIVATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forStaker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "addDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addTradingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collectedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentMaintenanceStaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentMaintenanceStakerStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositMaintenanceStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getMaintenanceStakerStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpdatedCurrentStaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "isAuthorizedStaker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAuthorized",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedMFI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maintenanceDelegateTo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintenanceStakePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nextMaintenanceStaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maintainer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "penalizeMaintenanceStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakeTaken",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prevMaintenanceStaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forStaker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "removeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setMaintenanceStakePerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "subtractTradingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "role",
          "type": "uint16"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "role",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewCurrentMaintenanceStaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7cab19c11d43dd766b3e5817fc8de5928dbe06247b1cfb43d236e0ef2ed6976c",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0xFCc8e64E05646bE9117800289A872f3828d29A84",
    "transactionIndex": 2,
    "gasUsed": "2259791",
    "logsBloom": "0x
    "blockHash": "0x5ee1ee11c886b9e1bd55d1352ecd1a354f2ea0100eb5f21be681b33f2dfe7bca",
    "transactionHash": "0x7cab19c11d43dd766b3e5817fc8de5928dbe06247b1cfb43d236e0ef2ed6976c",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 23978806,
        "transactionHash": "0x7cab19c11d43dd766b3e5817fc8de5928dbe06247b1cfb43d236e0ef2ed6976c",
        "address": "0xFCc8e64E05646bE9117800289A872f3828d29A84",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023292e9ba8434e59e6bac1907ba7425211c4de27"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5ee1ee11c886b9e1bd55d1352ecd1a354f2ea0100eb5f21be681b33f2dfe7bca"
      }
    ],
    "blockNumber": 23978806,
    "cumulativeGasUsed": "4792204",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    "0xAa4e3edb11AFa93c41db59842b29de64b72E355B",
    "0x6c8fbBf8E079246A92E760D440793f2f864a26b3",
    "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "0x0aB4A3F2B1129A0595185e4a9A1548e9e7f984C0"
  ],
  "solcInputHash": "fe4ccaec56ebcbda1a00f5460db20335",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feesPer10k\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_MFI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockedMFI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockedMFIDelegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORIZED_FUND_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_SOURCE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_REPORTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_CALLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_PENALIZER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ACTIVATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTradingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMaintenanceStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMaintenanceStakerStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositMaintenanceStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getMaintenanceStakerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpdatedCurrentStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isAuthorizedStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAuthorized\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedMFI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maintenanceDelegateTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceStakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextMaintenanceStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"penalizeMaintenanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTaken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevMaintenanceStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"removeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaintenanceStakePerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"subtractTradingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"role\",\"type\":\"uint16\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"role\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCurrentMaintenanceStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Here we support staking for MFI incentives as well as staking to perform the maintenance role.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Admin.sol\":\"Admin\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./CrossMarginTrading.sol\\\";\\n\\n/// @dev Here we support staking for MFI incentives as well as\\n/// staking to perform the maintenance role.\\ncontract Admin is RoleAware, Ownable {\\n    address MFI;\\n    mapping(address => uint256) public stakes;\\n    uint256 public totalStakes;\\n    mapping(address => uint256) public claimIds;\\n\\n    uint256 feesPer10k;\\n    mapping(address => uint256) public collectedFees;\\n\\n    uint256 public maintenanceStakePerBlock = 10 ether;\\n    mapping(address => address) public nextMaintenanceStaker;\\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\\n    address public currentMaintenanceStaker;\\n    address public prevMaintenanceStaker;\\n    uint256 public currentMaintenanceStakerStartBlock;\\n    address public lockedMFI;\\n\\n    constructor(\\n        uint256 _feesPer10k,\\n        address _MFI,\\n        address _lockedMFI,\\n        address lockedMFIDelegate,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        feesPer10k = _feesPer10k;\\n        maintenanceStakePerBlock = 1 ether;\\n        lockedMFI = _lockedMFI;\\n\\n        // for initialization purposes and to ensure availability of service\\n        // the team's locked MFI participate in maintenance staking only\\n        // (not in the incentive staking part)\\n        // this implies some trust of the team to execute, which we deem reasonable\\n        // since the locked stake is temporary and diminishing as well as the fact\\n        // that the team is heavily invested in the protocol and incentivized\\n        // by fees like any other maintainer\\n        // furthermore others could step in to liquidate via the attacker route\\n        // and take away the team fees if they were delinquent\\n        nextMaintenanceStaker[lockedMFI] = lockedMFI;\\n        currentMaintenanceStaker = lockedMFI;\\n        prevMaintenanceStaker = lockedMFI;\\n        maintenanceDelegateTo[lockedMFI][lockedMFIDelegate];\\n        currentMaintenanceStakerStartBlock = block.number;\\n    }\\n\\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\\n        maintenanceStakePerBlock = amount;\\n    }\\n\\n    function _stake(address holder, uint256 amount) internal {\\n        require(\\n            Fund(fund()).depositFor(holder, MFI, amount),\\n            \\\"Could not deposit stake funds (perhaps make allowance to fund contract?\\\"\\n        );\\n        stakes[holder] += amount;\\n        totalStakes += amount;\\n\\n        if (claimIds[holder] > 0) {\\n            IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\\n                0,\\n                claimIds[holder],\\n                amount\\n            );\\n        } else {\\n            uint256 claimId =\\n                IncentiveDistribution(incentiveDistributor()).startClaim(\\n                    0,\\n                    holder,\\n                    amount\\n                );\\n            claimIds[holder] = claimId;\\n            require(claimId > 0, \\\"Distribution is over or paused\\\");\\n        }\\n    }\\n\\n    function depositStake(uint256 amount) external {\\n        _stake(msg.sender, amount);\\n    }\\n\\n    function _withdrawStake(\\n        address holder,\\n        uint256 amount,\\n        address recipient\\n    ) internal {\\n        uint256 stakeAmount = stakes[holder];\\n        // overflow failure desirable\\n        stakes[holder] = amount;\\n        totalStakes -= amount;\\n        require(\\n            Fund(fund()).withdraw(MFI, recipient, amount),\\n            \\\"Insufficient funds -- something went really wrong.\\\"\\n        );\\n        if (stakeAmount == amount) {\\n            IncentiveDistribution(incentiveDistributor()).endClaim(\\n                0,\\n                claimIds[holder]\\n            );\\n            claimIds[holder] = 0;\\n        } else {\\n            IncentiveDistribution(incentiveDistributor())\\n                .subtractFromClaimAmount(0, claimIds[holder], amount);\\n        }\\n    }\\n\\n    function withdrawStake(uint256 amount) external {\\n        require(\\n            !isAuthorizedStaker(msg.sender),\\n            \\\"You can't withdraw while you're authorized staker\\\"\\n        );\\n        _withdrawStake(msg.sender, amount, msg.sender);\\n    }\\n\\n    function addTradingFees(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / 10_000;\\n        collectedFees[token] += fees;\\n    }\\n\\n    function subtractTradingFees(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / (10_000 + feesPer10k);\\n        collectedFees[token] += fees;\\n    }\\n\\n    function depositMaintenanceStake(uint256 amount) external {\\n        require(\\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\\n            \\\"Insufficient stake to call even one block\\\"\\n        );\\n        _stake(msg.sender, amount);\\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\\n        }\\n    }\\n\\n    function getMaintenanceStakerStake(address staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (staker == lockedMFI) {\\n            return IERC20(MFI).balanceOf(lockedMFI) / 2;\\n        } else {\\n            return stakes[staker];\\n        }\\n    }\\n\\n    function getUpdatedCurrentStaker() public returns (address) {\\n        uint256 currentStake =\\n            getMaintenanceStakerStake(currentMaintenanceStaker);\\n        while (\\n            (block.number - currentMaintenanceStakerStartBlock) *\\n                maintenanceStakePerBlock >=\\n            currentStake\\n        ) {\\n            if (maintenanceStakePerBlock > currentStake) {\\n                // delete current from daisy chain\\n                address nextOne =\\n                    nextMaintenanceStaker[currentMaintenanceStaker];\\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\\n\\n                currentMaintenanceStaker = nextOne;\\n            } else {\\n                currentMaintenanceStakerStartBlock +=\\n                    stakes[currentMaintenanceStaker] /\\n                    maintenanceStakePerBlock;\\n\\n                prevMaintenanceStaker = currentMaintenanceStaker;\\n                currentMaintenanceStaker = nextMaintenanceStaker[\\n                    currentMaintenanceStaker\\n                ];\\n            }\\n            currentStake = getMaintenanceStakerStake(currentMaintenanceStaker);\\n        }\\n        return currentMaintenanceStaker;\\n    }\\n\\n    function viewCurrentMaintenanceStaker()\\n        public\\n        view\\n        returns (address staker, uint256 startBlock)\\n    {\\n        staker = currentMaintenanceStaker;\\n        uint256 currentStake = getMaintenanceStakerStake(staker);\\n        startBlock = currentMaintenanceStakerStartBlock;\\n        while (\\n            (block.number - startBlock) * maintenanceStakePerBlock >=\\n            currentStake\\n        ) {\\n            if (maintenanceStakePerBlock > currentStake) {\\n                // skip\\n                staker = nextMaintenanceStaker[staker];\\n                currentStake = getMaintenanceStakerStake(staker);\\n            } else {\\n                startBlock +=\\n                    stakes[currentMaintenanceStaker] /\\n                    maintenanceStakePerBlock;\\n                staker = nextMaintenanceStaker[staker];\\n                currentStake = getMaintenanceStakerStake(staker);\\n            }\\n        }\\n    }\\n\\n    function addDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = true;\\n    }\\n\\n    function removeDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = false;\\n    }\\n\\n    function isAuthorizedStaker(address caller)\\n        public\\n        returns (bool isAuthorized)\\n    {\\n        address currentStaker = getUpdatedCurrentStaker();\\n        isAuthorized =\\n            currentStaker == caller ||\\n            maintenanceDelegateTo[currentStaker][caller];\\n    }\\n\\n    function penalizeMaintenanceStake(\\n        address maintainer,\\n        uint256 penalty,\\n        address recipient\\n    ) external returns (uint256 stakeTaken) {\\n        require(\\n            isStakePenalizer(msg.sender),\\n            \\\"msg.sender not authorized to penalize stakers\\\"\\n        );\\n        if (penalty > stakes[maintainer]) {\\n            stakeTaken = stakes[maintainer];\\n        } else {\\n            stakeTaken = penalty;\\n        }\\n        _withdrawStake(maintainer, stakeTaken, recipient);\\n    }\\n}\\n\",\"keccak256\":\"0xb5e8c7e0f1eb101cc8f0a4a607d43fedc6d553b4a0ea8be54a26245d24dc7b88\",\"license\":\"GPL-2.0-only\"},\"contracts/BaseLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\nabstract contract BaseLending is RoleAware, Ownable {\\n    uint256 constant FP32 = 2**32;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    mapping(address => uint256) public totalLending;\\n    mapping(address => uint256) public totalBorrowed;\\n    mapping(address => uint256) public lendingBuffer;\\n    mapping(address => uint256) public lendingCap;\\n\\n    uint256 public maxHourlyYieldFP;\\n    uint256 public yieldChangePerSecondFP;\\n\\n    /// @dev simple formula for calculating interest relative to accumulator\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    /// update the yield for an asset based on recent supply and demand\\n    function updatedYieldFP(\\n        // previous yield\\n        uint256 _yieldFP,\\n        // timestamp\\n        uint256 lastUpdated,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketTarget,\\n        uint256 buyingSpeed,\\n        uint256 withdrawingSpeed,\\n        uint256 bucketMaxYield\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = _yieldFP;\\n        uint256 timeDiff = block.timestamp - lastUpdated;\\n        uint256 yieldDiff = timeDiff * yieldChangePerSecondFP;\\n\\n        if (\\n            totalLendingInBucket >= bucketTarget ||\\n            buyingSpeed >= withdrawingSpeed\\n        ) {\\n            yieldFP -= min(yieldFP, yieldDiff);\\n        } else if (\\n            bucketTarget > totalLendingInBucket &&\\n            withdrawingSpeed > buyingSpeed\\n        ) {\\n            yieldFP += yieldDiff;\\n            if (yieldFP > bucketMaxYield) {\\n                yieldFP = bucketMaxYield;\\n            }\\n        }\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function lendingTarget(address token) public view returns (uint256) {\\n        return\\n            min(lendingCap[token], totalBorrowed[token] + lendingBuffer[token]);\\n    }\\n\\n    function setLendingCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set lending cap\\\"\\n        );\\n        lendingCap[token] = cap;\\n    }\\n\\n    function setLendingBuffer(address token, uint256 buffer) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to set lending buffer\\\"\\n        );\\n        lendingBuffer[token] = buffer;\\n    }\\n\\n    function setMaxHourlyYieldFP(uint256 maxYieldFP) external onlyOwner {\\n        maxHourlyYieldFP = maxYieldFP;\\n    }\\n\\n    function setYieldChangePerSecondFP(uint256 changePerSecondFP)\\n        external\\n        onlyOwner\\n    {\\n        yieldChangePerSecondFP = changePerSecondFP;\\n    }\\n}\\n\",\"keccak256\":\"0x74026d83cd23380fdaec2a04c2df40fd7601bd9b58d4ed7e205c2c7f1ece7a3a\",\"license\":\"GPL-2.0-only\"},\"contracts/BondLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Bond {\\n    address holder;\\n    address token;\\n    uint256 originalPrice;\\n    uint256 returnAmount;\\n    uint256 maturityTimestamp;\\n    uint256 runtime;\\n    uint256 yieldFP;\\n}\\n\\n/// @dev Lending for fixed runtime, fixed interest\\n/// Lenders can pick their own bond maturity date --\\n/// In order to manage interest rates for the different\\n/// maturities and create a yield curve we bucket\\n/// bond runtimes into weighted baskets and adjust\\n/// rates individually per bucket, based on supply and demand.\\nabstract contract BondLending is BaseLending {\\n    uint256 public minRuntime = 30 days;\\n    uint256 public maxRuntime = 365 days;\\n    uint256 public diffMaxMinRuntime;\\n    // this is the numerator under runtimeWeights.\\n    // any excess left over is the weight of hourly bonds\\n    uint256 public constant WEIGHT_TOTAL_10k = 10_000;\\n    uint256 public borrowingMarkupFP;\\n\\n    mapping(address => uint256[]) public runtimeWeights;\\n    mapping(address => uint256[]) public buyingSpeed;\\n    mapping(address => uint256[]) public lastBought;\\n    mapping(address => uint256[]) public withdrawingSpeed;\\n    mapping(address => uint256[]) public lastWithdrawn;\\n    mapping(address => uint256[]) public yieldLastUpdated;\\n\\n    mapping(uint256 => Bond) public bonds;\\n\\n    mapping(address => uint256[]) public totalLendingPerRuntime;\\n    mapping(address => uint256[]) runtimeYieldsFP;\\n    uint256 public nextBondIndex = 1;\\n\\n    event LiquidityWarning(\\n        address indexed token,\\n        address indexed holder,\\n        uint256 value\\n    );\\n\\n    function _makeBond(\\n        address holder,\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) internal returns (uint256 bondIndex) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        uint256 bondReturn = (yieldFP * amount) / FP32;\\n        if (bondReturn >= minReturn) {\\n            if (Fund(fund()).depositFor(holder, token, amount)) {\\n                uint256 interpolatedAmount = (amount + bondReturn) / 2;\\n                totalLending[token] += interpolatedAmount;\\n\\n                totalLendingPerRuntime[token][\\n                    bucketIndex\\n                ] += interpolatedAmount;\\n\\n                bondIndex = nextBondIndex;\\n                nextBondIndex++;\\n\\n                bonds[bondIndex] = Bond({\\n                    holder: holder,\\n                    token: token,\\n                    originalPrice: amount,\\n                    returnAmount: bondReturn,\\n                    maturityTimestamp: block.timestamp + runtime,\\n                    runtime: runtime,\\n                    yieldFP: yieldFP\\n                });\\n\\n                updateSpeed(\\n                    buyingSpeed[token],\\n                    lastBought[token],\\n                    bucketIndex,\\n                    amount\\n                );\\n            }\\n        }\\n    }\\n\\n    function _withdrawBond(Bond storage bond) internal {\\n        address token = bond.token;\\n        uint256 bucketIndex = getBucketIndex(token, bond.runtime);\\n        uint256 interpolatedAmount =\\n            (bond.originalPrice + bond.returnAmount) / 2;\\n        totalLending[token] -= interpolatedAmount;\\n        totalLendingPerRuntime[token][bucketIndex] -= interpolatedAmount;\\n\\n        updateSpeed(\\n            withdrawingSpeed[token],\\n            lastWithdrawn[token],\\n            bucketIndex,\\n            bond.originalPrice\\n        );\\n\\n        if (\\n            totalBorrowed[token] > totalLending[token] ||\\n            !Fund(fund()).withdraw(token, bond.holder, bond.returnAmount)\\n        ) {\\n            // apparently there is a liquidity issue\\n            emit LiquidityWarning(token, bond.holder, bond.returnAmount);\\n            _makeFallbackBond(token, bond.holder, bond.returnAmount);\\n        }\\n    }\\n\\n    function getUpdatedBondYieldFP(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) internal returns (uint256 yieldFP, uint256 bucketIndex) {\\n        bucketIndex = getBucketIndex(token, runtime);\\n        yieldFP = calcBondYieldFP(\\n            token,\\n            amount + totalLendingPerRuntime[token][bucketIndex],\\n            bucketIndex\\n        );\\n        runtimeYieldsFP[token][bucketIndex] = yieldFP;\\n        yieldLastUpdated[token][bucketIndex] = block.timestamp;\\n    }\\n\\n    function calcBondYieldFP(\\n        address token,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketIndex\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = runtimeYieldsFP[token][bucketIndex];\\n        uint256 lastUpdated = yieldLastUpdated[token][bucketIndex];\\n\\n        uint256 bucketTarget =\\n            (lendingTarget(token) * runtimeWeights[token][bucketIndex]) /\\n                WEIGHT_TOTAL_10k;\\n\\n        uint256 buying = buyingSpeed[token][bucketIndex];\\n        uint256 withdrawing = withdrawingSpeed[token][bucketIndex];\\n\\n        uint256 runtime = minRuntime + bucketIndex * diffMaxMinRuntime;\\n        uint256 bucketMaxYield = maxHourlyYieldFP * (runtime / (1 hours));\\n\\n        yieldFP = updatedYieldFP(\\n            yieldFP,\\n            lastUpdated,\\n            totalLendingInBucket,\\n            bucketTarget,\\n            buying,\\n            withdrawing,\\n            bucketMaxYield\\n        );\\n    }\\n\\n    function viewBondReturn(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        return (yieldFP * amount) / FP32;\\n    }\\n\\n    function getBucketIndex(address token, uint256 runtime)\\n        internal\\n        view\\n        returns (uint256 bucketIndex)\\n    {\\n        uint256[] storage yieldsFP = runtimeYieldsFP[token];\\n        uint256 bucketSize = diffMaxMinRuntime / yieldsFP.length;\\n        bucketIndex = (runtime - minRuntime) / bucketSize;\\n    }\\n\\n    function updateSpeed(\\n        uint256[] storage speedRegister,\\n        uint256[] storage lastAction,\\n        uint256 bucketIndex,\\n        uint256 amount\\n    ) internal {\\n        uint256 bucketSize = diffMaxMinRuntime / speedRegister.length;\\n        uint256 runtime = minRuntime + bucketSize * bucketIndex;\\n        uint256 timeDiff = block.timestamp - lastAction[bucketIndex];\\n        uint256 currentSpeed = (amount * runtime) / (timeDiff + 1);\\n\\n        uint256 runtimeScale = runtime / (10 minutes);\\n        // scale adjustment relative togit  runtime\\n        speedRegister[bucketIndex] =\\n            (speedRegister[bucketIndex] *\\n                runtimeScale +\\n                currentSpeed *\\n                timeDiff) /\\n            (runtimeScale + timeDiff);\\n        lastAction[bucketIndex] = block.timestamp;\\n    }\\n\\n    function setRuntimeYieldsFP(address token, uint256[] memory yieldsFP)\\n        external\\n        onlyOwner\\n    {\\n        runtimeYieldsFP[token] = yieldsFP;\\n    }\\n\\n    function setRuntimeWeights(address token, uint256[] memory weights)\\n        external\\n    {\\n        //require(\\n        //    isTokenActivator(msg.sender),\\n        //    \\\"not autorized to set runtime weights\\\"\\n        //);\\n        require(\\n            runtimeWeights[token].length == 0 ||\\n                runtimeWeights[token].length == weights.length,\\n            \\\"Cannot change size of weight array\\\"\\n        );\\n        if (runtimeWeights[token].length == 0) {\\n            // we are initializing\\n\\n            runtimeYieldsFP[token] = new uint256[](weights.length);\\n            lastBought[token] = new uint256[](weights.length);\\n            lastWithdrawn[token] = new uint256[](weights.length);\\n            yieldLastUpdated[token] = new uint256[](weights.length);\\n            buyingSpeed[token] = new uint256[](weights.length);\\n            withdrawingSpeed[token] = new uint256[](weights.length);\\n\\n            uint256 hourlyYieldFP = (110 * FP32) / 100 / (24 * 365);\\n            uint256 bucketSize = diffMaxMinRuntime / weights.length;\\n\\n            for (uint24 i = 0; weights.length > i; i++) {\\n                uint256 runtime = minRuntime + bucketSize * i;\\n                // Do a best guess of initializing\\n                runtimeYieldsFP[token][i] =\\n                    hourlyYieldFP *\\n                    (runtime / (1 hours));\\n\\n                lastBought[token][i] = block.timestamp;\\n                lastWithdrawn[token][i] = block.timestamp;\\n                yieldLastUpdated[token][i] = block.timestamp;\\n            }\\n        }\\n\\n        runtimeWeights[token] = weights;\\n    }\\n\\n    function setMinRuntime(uint256 runtime) external onlyOwner {\\n        require(runtime > 1 hours, \\\"Min runtime needs to be at least 1 hour\\\");\\n        minRuntime = runtime;\\n    }\\n\\n    function setMaxRuntime(uint256 runtime) external onlyOwner {\\n        require(\\n            runtime > minRuntime,\\n            \\\"Max runtime must be greater than min runtime\\\"\\n        );\\n        maxRuntime = runtime;\\n    }\\n}\\n\",\"keccak256\":\"0x930816f1d0667cbc2aa9bc95c81be0143889158dfb375433c693a7f13a9d9a72\",\"license\":\"GPL-2.0-only\"},\"contracts/CrossMarginAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"./PriceAware.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\nstruct CrossMarginAccount {\\n    uint256 lastDepositBlock;\\n    address[] borrowTokens;\\n    // borrowed token address => amount\\n    mapping(address => uint256) borrowed;\\n    // borrowed token => yield quotient\\n    mapping(address => uint256) borrowedYieldQuotientsFP;\\n    address[] holdingTokens;\\n    // token held in portfolio => amount\\n    mapping(address => uint256) holdings;\\n    // boolean value of whether an account holds a token\\n    mapping(address => bool) holdsToken;\\n}\\n\\nabstract contract CrossMarginAccounts is RoleAware, PriceAware {\\n    /// @dev gets used in calculating how much accounts can borrow\\n    uint256 public leverage;\\n\\n    /// @dev percentage of assets held per assets borrowed at which to liquidate\\n    uint256 public liquidationThresholdPercent;\\n\\n    /// @dev record of all cross margin accounts\\n    mapping(address => CrossMarginAccount) marginAccounts;\\n    /// @dev total token caps\\n    mapping(address => uint256) public tokenCaps;\\n    /// @dev tracks total of short positions per token\\n    mapping(address => uint256) public totalShort;\\n    /// @dev tracks total of long positions per token\\n    mapping(address => uint256) public totalLong;\\n    uint256 public coolingOffPeriod;\\n\\n    /// @dev view function to display account held assets state\\n    function getHoldingAmounts(address trader)\\n        external\\n        view\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n        )\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        holdingTokens = account.holdingTokens;\\n\\n        holdingAmounts = new uint256[](account.holdingTokens.length);\\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\\n            address tokenAddress = holdingTokens[idx];\\n            holdingAmounts[idx] = account.holdings[tokenAddress];\\n        }\\n\\n        (holdingTokens, holdingAmounts);\\n    }\\n\\n    /// @dev view function to display account borrowing state\\n    function getBorrowAmounts(address trader)\\n        external\\n        view\\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrowTokens = account.borrowTokens;\\n\\n        borrowAmounts = new uint256[](account.borrowTokens.length);\\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\\n            address tokenAddress = borrowTokens[idx];\\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\\n                account.borrowed[tokenAddress],\\n                tokenAddress,\\n                account.borrowedYieldQuotientsFP[tokenAddress]\\n            );\\n        }\\n\\n        (borrowTokens, borrowAmounts);\\n    }\\n\\n    /// @dev last time this account deposited\\n    /// relevant for withdrawal window\\n    function getLastDepositBlock(address trader)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return marginAccounts[trader].lastDepositBlock;\\n    }\\n\\n    /// @dev add an asset to be held by account\\n    function addHolding(\\n        CrossMarginAccount storage account,\\n        address token,\\n        uint256 depositAmount\\n    ) internal {\\n        if (!hasHoldingToken(account, token)) {\\n            account.holdingTokens.push(token);\\n        }\\n\\n        account.holdings[token] += depositAmount;\\n    }\\n\\n    /// @dev adjust account to reflect borrowing of token amount\\n    function borrow(\\n        CrossMarginAccount storage account,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) internal {\\n        if (!hasBorrowedToken(account, borrowToken)) {\\n            account.borrowTokens.push(borrowToken);\\n        } else {\\n            account.borrowed[borrowToken] = Lending(lending())\\n                .applyBorrowInterest(\\n                account.borrowed[borrowToken],\\n                borrowToken,\\n                account.borrowedYieldQuotientsFP[borrowToken]\\n            );\\n        }\\n        account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\\n            .viewBorrowingYieldFP(borrowToken);\\n\\n        account.borrowed[borrowToken] += borrowAmount;\\n        addHolding(account, borrowToken, borrowAmount);\\n\\n        require(positiveBalance(account), \\\"Can't borrow: insufficient balance\\\");\\n    }\\n\\n    /// @dev checks whether account is in the black, deposit + earnings relative to borrowed\\n    function positiveBalance(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account, false);\\n        uint256 holdings = holdingsInPeg(account, false);\\n        // The following condition should hold:\\n        // holdings / loan >= leverage / (leverage - 1)\\n        // =>\\n        return holdings * (leverage - 1) >= loan * leverage;\\n    }\\n\\n    /// @dev internal function adjusting holding and borrow balances when debt extinguished\\n    function extinguishDebt(\\n        CrossMarginAccount storage account,\\n        address debtToken,\\n        uint256 extinguishAmount\\n    ) internal {\\n        // will throw if insufficient funds\\n        account.borrowed[debtToken] = Lending(lending()).applyBorrowInterest(\\n            account.borrowed[debtToken],\\n            debtToken,\\n            account.borrowedYieldQuotientsFP[debtToken]\\n        );\\n\\n        account.borrowed[debtToken] =\\n            account.borrowed[debtToken] -\\n            extinguishAmount;\\n        account.holdings[debtToken] =\\n            account.holdings[debtToken] -\\n            extinguishAmount;\\n\\n        if (account.borrowed[debtToken] > 0) {\\n            account.borrowedYieldQuotientsFP[debtToken] = Lending(lending())\\n                .viewBorrowingYieldFP(debtToken);\\n        }\\n    }\\n\\n    /// @dev checks whether an account holds a token\\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.holdsToken[token];\\n    }\\n\\n    /// @dev checks whether an account has borrowed a token\\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.borrowedYieldQuotientsFP[token] > 0;\\n    }\\n\\n    /// @dev calculate total loan in reference currency, including compound interest\\n    function loanInPeg(CrossMarginAccount storage account, bool forceCurBlock)\\n        internal\\n        returns (uint256)\\n    {\\n        return\\n            sumTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev total of assets of account, expressed in reference currency\\n    function holdingsInPeg(\\n        CrossMarginAccount storage account,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        return\\n            sumTokensInPeg(\\n                account.holdingTokens,\\n                account.holdings,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev check whether an account can/should be liquidated\\n    function belowMaintenanceThreshold(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account, true);\\n        uint256 holdings = holdingsInPeg(account, true);\\n        // The following should hold:\\n        // holdings / loan >= 1.1\\n        // => holdings >= loan * 1.1\\n        return 100 * holdings >= liquidationThresholdPercent * loan;\\n    }\\n\\n    /// @dev go through list of tokens and their amounts, summing up\\n    function sumTokensInPeg(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        bool forceCurBlock\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += PriceAware.getCurrentPriceInPeg(\\n                token,\\n                amounts[token],\\n                forceCurBlock\\n            );\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and ammounts, summing up with interest\\n    function sumTokensInPegWithYield(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        mapping(address => uint256) storage yieldQuotientsFP,\\n        bool forceCurBlock\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += yieldTokenInPeg(\\n                token,\\n                amounts[token],\\n                yieldQuotientsFP,\\n                forceCurBlock\\n            );\\n        }\\n    }\\n\\n    /// @dev calculate yield for token amount and convert to reference currency\\n    function yieldTokenInPeg(\\n        address token,\\n        uint256 amount,\\n        mapping(address => uint256) storage yieldQuotientsFP,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\\n        // 1 * FP / FP = 1\\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\\n        return\\n            PriceAware.getCurrentPriceInPeg(\\n                token,\\n                amountInToken,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev move tokens from one holding to another\\n    function adjustAmounts(\\n        CrossMarginAccount storage account,\\n        address fromToken,\\n        address toToken,\\n        uint256 soldAmount,\\n        uint256 boughtAmount\\n    ) internal {\\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\\n        addHolding(account, toToken, boughtAmount);\\n    }\\n\\n    /// sets borrow and holding to zero\\n    function deleteAccount(CrossMarginAccount storage account) internal {\\n        for (\\n            uint256 borrowIdx = 0;\\n            account.borrowTokens.length > borrowIdx;\\n            borrowIdx++\\n        ) {\\n            address borrowToken = account.borrowTokens[borrowIdx];\\n            totalShort[borrowToken] -= account.borrowed[borrowToken];\\n            account.borrowed[borrowToken] = 0;\\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\\n        }\\n        for (\\n            uint256 holdingIdx = 0;\\n            account.holdingTokens.length > holdingIdx;\\n            holdingIdx++\\n        ) {\\n            address holdingToken = account.holdingTokens[holdingIdx];\\n            totalLong[holdingToken] -= account.holdings[holdingToken];\\n            account.holdings[holdingToken] = 0;\\n            account.holdsToken[holdingToken] = false;\\n        }\\n        delete account.borrowTokens;\\n        delete account.holdingTokens;\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x12123e92a58628773990fb698085133519f5f85c554f84aa28ab00a39a43a335\",\"license\":\"GPL-2.0-only\"},\"contracts/CrossMarginLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CrossMarginAccounts.sol\\\";\\n\\n/// @dev Handles liquidation of accounts below maintenance threshold\\n/// Liquidation can be called by the authorized staker, as determined\\n/// in the Admin contract.\\n/// If the authorized staker is delinquent, other participants can jump\\n/// in and attack, taking their fees and potentially even their stake,\\n/// depending how delinquent the responsible authorized staker is.\\nabstract contract CrossMarginLiquidation is CrossMarginAccounts {\\n    event LiquidationShortfall(uint256 amount);\\n    event AccountLiquidated(address account);\\n\\n    struct Liquidation {\\n        uint256 buy;\\n        uint256 sell;\\n        uint256 blockNum;\\n    }\\n\\n    /// record kept around until a stake attacker can claim their reward\\n    struct AccountLiqRecord {\\n        uint256 blockNum;\\n        address loser;\\n        uint256 amount;\\n        address stakeAttacker;\\n    }\\n\\n    mapping(address => Liquidation) liquidationAmounts;\\n    address[] sellTokens;\\n    address[] buyTokens;\\n    address[] tradersToLiquidate;\\n\\n    mapping(address => uint256) public maintenanceFailures;\\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\\n    uint256 public avgLiquidationPerBlock = 10;\\n\\n    uint256 public liqStakeAttackWindow = 5;\\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\\n\\n    uint256 public failureThreshold = 10;\\n\\n    function setFailureThreshold(uint256 threshFactor) external onlyOwner {\\n        failureThreshold = threshFactor;\\n    }\\n\\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwner {\\n        liqStakeAttackWindow = window;\\n    }\\n\\n    function setMaintainerCutPercent(uint256 cut) external onlyOwner {\\n        MAINTAINER_CUT_PERCENT = cut;\\n    }\\n\\n    /// @dev calcLiquidationamounts does a number of tasks in this contract\\n    /// and some of them are not straightforward.\\n    /// First of all it aggregates liquidation amounts in storage (not in memory)\\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\\n    /// exist in memory.\\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\\n    /// (i.e. current caller is authorized). Also see context below.\\n    function calcLiquidationAmounts(\\n        address[] memory liquidationCandidates,\\n        bool isAuthorized\\n    ) internal returns (uint256 attackReturns) {\\n        sellTokens = new address[](0);\\n        buyTokens = new address[](0);\\n        tradersToLiquidate = new address[](0);\\n\\n        for (\\n            uint256 traderIndex = 0;\\n            liquidationCandidates.length > traderIndex;\\n            traderIndex++\\n        ) {\\n            address traderAddress = liquidationCandidates[traderIndex];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n            if (belowMaintenanceThreshold(account)) {\\n                tradersToLiquidate.push(traderAddress);\\n                for (\\n                    uint256 sellIdx = 0;\\n                    account.holdingTokens.length > sellIdx;\\n                    sellIdx++\\n                ) {\\n                    address token = account.holdingTokens[sellIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = account.holdings[token];\\n                        liquidation.buy = 0;\\n                        liquidation.blockNum = block.number;\\n                        sellTokens.push(token);\\n                    } else {\\n                        liquidation.sell += account.holdings[token];\\n                    }\\n                }\\n                for (\\n                    uint256 buyIdx = 0;\\n                    account.borrowTokens.length > buyIdx;\\n                    buyIdx++\\n                ) {\\n                    address token = account.borrowTokens[buyIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    uint256 loanAmount =\\n                        Lending(lending()).applyBorrowInterest(\\n                            account.borrowed[token],\\n                            token,\\n                            account.borrowedYieldQuotientsFP[token]\\n                        );\\n\\n                    Lending(lending()).payOff(token, loanAmount);\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = 0;\\n                        liquidation.buy = loanAmount;\\n                        liquidation.blockNum = block.number;\\n                        buyTokens.push(token);\\n                    } else {\\n                        liquidation.buy += loanAmount;\\n                    }\\n                }\\n            }\\n\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[traderAddress];\\n            if (isAuthorized) {\\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\\n            }\\n        }\\n    }\\n\\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\\n        internal\\n        returns (uint256 returnAmount)\\n    {\\n        if (liqAttackRecord.amount > 0) {\\n            // validate attack records, if any\\n            uint256 blockDiff =\\n                min(\\n                    block.number - liqAttackRecord.blockNum,\\n                    liqStakeAttackWindow\\n                );\\n\\n            uint256 attackerCut =\\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\\n\\n            Fund(fund()).withdraw(\\n                PriceAware.peg,\\n                liqAttackRecord.stakeAttacker,\\n                attackerCut\\n            );\\n\\n            Admin a = Admin(admin());\\n            uint256 penalty =\\n                (a.maintenanceStakePerBlock() * attackerCut) /\\n                    avgLiquidationPerBlock;\\n            a.penalizeMaintenanceStake(\\n                liqAttackRecord.loser,\\n                penalty,\\n                liqAttackRecord.stakeAttacker\\n            );\\n\\n            liqAttackRecord.amount = 0;\\n            liqAttackRecord.stakeAttacker = address(0);\\n            liqAttackRecord.blockNum = 0;\\n            liqAttackRecord.loser = address(0);\\n\\n            returnAmount -= attackerCut;\\n        }\\n    }\\n\\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\\n        external\\n    {\\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[liquidatedAccounts[i]];\\n            if (\\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\\n            ) {\\n                _disburseLiqAttack(liqAttackRecord);\\n            }\\n        }\\n    }\\n\\n    function liquidateFromPeg() internal returns (uint256 pegAmount) {\\n        for (uint256 tokenIdx = 0; buyTokens.length > tokenIdx; tokenIdx++) {\\n            address buyToken = buyTokens[tokenIdx];\\n            Liquidation storage liq = liquidationAmounts[buyToken];\\n            if (liq.buy > liq.sell) {\\n                pegAmount += PriceAware.liquidateToPeg(\\n                    buyToken,\\n                    liq.buy - liq.sell\\n                );\\n                delete liquidationAmounts[buyToken];\\n            }\\n        }\\n        delete buyTokens;\\n    }\\n\\n    function liquidateToPeg() internal returns (uint256 pegAmount) {\\n        for (\\n            uint256 tokenIndex = 0;\\n            sellTokens.length > tokenIndex;\\n            tokenIndex++\\n        ) {\\n            address token = sellTokens[tokenIndex];\\n            Liquidation storage liq = liquidationAmounts[token];\\n            if (liq.sell > liq.buy) {\\n                uint256 sellAmount = liq.sell - liq.buy;\\n                pegAmount += PriceAware.liquidateToPeg(token, sellAmount);\\n                delete liquidationAmounts[token];\\n            }\\n        }\\n        delete sellTokens;\\n    }\\n\\n    function maintainerIsFailing() internal view returns (bool) {\\n        (address currentMaintainer, ) =\\n            Admin(admin()).viewCurrentMaintenanceStaker();\\n        return\\n            maintenanceFailures[currentMaintainer] >\\n            failureThreshold * avgLiquidationPerBlock;\\n    }\\n\\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\\n    function liquidate(address[] memory liquidationCandidates)\\n        external\\n        returns (uint256 maintainerCut)\\n    {\\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\\n\\n        // calcLiquidationAmounts does a lot of the work here\\n        // * aggregates both sell and buy side targets to be liquidated\\n        // * returns attacker cuts to them\\n        // * aggregates any returned fees from unauthorized (attacking) attempts\\n        uint256 attackReturns2Authorized =\\n            calcLiquidationAmounts(liquidationCandidates, isAuthorized);\\n        maintainerCut = attackReturns2Authorized;\\n\\n        uint256 sale2pegAmount = liquidateToPeg();\\n        uint256 peg2targetCost = liquidateFromPeg();\\n\\n        // this may be a bit imprecise, since individual shortfalls may be obscured\\n        // by overall returns and the maintainer cut is taken out of the net total,\\n        // but it gives us the general picture\\n        if (\\n            (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) / 100 >\\n            sale2pegAmount\\n        ) {\\n            emit LiquidationShortfall(peg2targetCost - sale2pegAmount);\\n        }\\n\\n        address loser = address(0);\\n        if (!canTakeNow) {\\n            // whoever is the current responsible maintenance staker\\n            // and liable to lose their stake\\n            loser = Admin(admin()).getUpdatedCurrentStaker();\\n        }\\n\\n        // iterate over traders and send back their money\\n        // as well as giving attackers their due, in case caller isn't authorized\\n        for (\\n            uint256 traderIdx = 0;\\n            tradersToLiquidate.length > traderIdx;\\n            traderIdx++\\n        ) {\\n            address traderAddress = tradersToLiquidate[traderIdx];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n\\n            uint256 holdingsValue = holdingsInPeg(account, true);\\n            uint256 borrowValue = loanInPeg(account, true);\\n            // 5% of value borrowed\\n            uint256 maintainerCut4Account =\\n                (borrowValue * MAINTAINER_CUT_PERCENT) / 100;\\n            maintainerCut += maintainerCut4Account;\\n\\n            if (!canTakeNow) {\\n                // This could theoretically lead to a previous attackers\\n                // record being overwritten, but only if the trader restarts\\n                // their account and goes back into the red within the short time window\\n                // which would be a costly attack requiring collusion without upside\\n                AccountLiqRecord storage liqAttackRecord =\\n                    stakeAttackRecords[traderAddress];\\n                liqAttackRecord.amount = maintainerCut4Account;\\n                liqAttackRecord.stakeAttacker = msg.sender;\\n                liqAttackRecord.blockNum = block.number;\\n                liqAttackRecord.loser = loser;\\n            }\\n\\n            // send back trader money\\n            if (holdingsValue >= maintainerCut4Account + borrowValue) {\\n                // send remaining funds back to trader\\n                Fund(fund()).withdraw(\\n                    PriceAware.peg,\\n                    traderAddress,\\n                    holdingsValue - borrowValue - maintainerCut4Account\\n                );\\n            }\\n\\n            emit AccountLiquidated(traderAddress);\\n            deleteAccount(account);\\n        }\\n\\n        avgLiquidationPerBlock =\\n            (avgLiquidationPerBlock * 99 + maintainerCut) /\\n            100;\\n\\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\\n        if (isAuthorized) {\\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\\n            } else {\\n                maintenanceFailures[currentMaintainer] = 0;\\n            }\\n        } else {\\n            maintenanceFailures[currentMaintainer] += maintainerCut;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x597031a2f69a15a612f052239ee48ae44901b26293582061ab02802163826dcb\",\"license\":\"GPL-2.0-only\"},\"contracts/CrossMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"./CrossMarginLiquidation.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\ncontract CrossMarginTrading is CrossMarginLiquidation, IMarginTrading {\\n    constructor(address _peg, address _roles)\\n        RoleAware(_roles)\\n        PriceAware(_peg)\\n    {\\n        liquidationThresholdPercent = 110;\\n        coolingOffPeriod = 20;\\n    }\\n\\n    /// @dev admin function to set the token cap\\n    function setTokenCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set token cap\\\"\\n        );\\n        tokenCaps[token] = cap;\\n    }\\n\\n    /// @dev setter for cooling off period for withdrawing funds after deposit\\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\\n        coolingOffPeriod = blocks;\\n    }\\n\\n    /// @dev admin function to set leverage\\n    function setLeverage(uint256 _leverage) external onlyOwner {\\n        leverage = _leverage;\\n    }\\n\\n    /// @dev admin function to set liquidation threshold\\n    function setLiquidationThresholdPercent(uint256 threshold)\\n        external\\n        onlyOwner\\n    {\\n        liquidationThresholdPercent = threshold;\\n    }\\n\\n    /// @dev gets called by router to affirm a deposit to an account\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 depositAmount\\n    ) external override returns (uint256 extinguishableDebt) {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        if (account.borrowed[token] > 0) {\\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\\n            extinguishDebt(account, token, extinguishableDebt);\\n            totalShort[token] -= extinguishableDebt;\\n        }\\n        // no overflow because depositAmount >= extinguishableDebt\\n        uint256 addedHolding = depositAmount - extinguishableDebt;\\n        addHolding(account, token, addedHolding);\\n\\n        totalLong[token] += addedHolding;\\n        require(\\n            tokenCaps[token] >= totalLong[token],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        account.lastDepositBlock = block.number;\\n    }\\n\\n    /// @dev gets called by router to affirm isolated borrowing event\\n    function registerBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        totalShort[borrowToken] += borrowAmount;\\n        totalLong[borrowToken] += borrowAmount;\\n        require(\\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrow(account, borrowToken, borrowAmount);\\n    }\\n\\n    /// @dev gets called by router to affirm withdrawal of tokens from account\\n    function registerWithdrawal(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    ) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        require(\\n            block.number > account.lastDepositBlock + coolingOffPeriod,\\n            \\\"To prevent attacks you must wait until your cooling off period is over to withdraw\\\"\\n        );\\n\\n        totalLong[withdrawToken] -= withdrawAmount;\\n        // throws on underflow\\n        account.holdings[withdrawToken] =\\n            account.holdings[withdrawToken] -\\n            withdrawAmount;\\n        require(\\n            positiveBalance(account),\\n            \\\"Account balance is too low to withdraw\\\"\\n        );\\n    }\\n\\n    /// @dev gets callled by router to register a trade and borrow and extinguis as necessary\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    )\\n        external\\n        override\\n        returns (uint256 extinguishableDebt, uint256 borrowAmount)\\n    {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader agent\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n\\n        if (account.borrowed[tokenTo] > 0) {\\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\\n            extinguishDebt(account, tokenTo, extinguishableDebt);\\n            totalShort[tokenTo] -= extinguishableDebt;\\n        }\\n        totalLong[tokenFrom] -= inAmount;\\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\\n        require(\\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        uint256 sellAmount = inAmount;\\n        if (inAmount > account.holdings[tokenFrom]) {\\n            sellAmount = account.holdings[tokenFrom];\\n            /// won't overflow\\n            borrowAmount = inAmount - sellAmount;\\n\\n            totalShort[tokenFrom] += borrowAmount;\\n            require(\\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\\n                \\\"Exceeding global exposure cap to token -- try again later\\\"\\n            );\\n\\n            borrow(account, tokenFrom, borrowAmount);\\n        }\\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\\n    }\\n\\n    /// @dev can get called by router to register the dissolution of an account\\n    function registerLiquidation(address trader) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader agent\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        for (uint24 i = 0; account.borrowTokens.length > i; i++) {\\n            address token = account.borrowTokens[i];\\n            Lending(lending()).payOff(token, account.borrowed[token]);\\n        }\\n\\n        deleteAccount(account);\\n    }\\n}\\n\",\"keccak256\":\"0x5460608c3f56a88dd7145893a791f75f6e900d4a8ecbc0df784bd430e837ddec\",\"license\":\"GPL-2.0-only\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\ncontract Fund is RoleAware, Ownable {\\n    address public WETH;\\n    mapping(address => bool) public activeTokens;\\n\\n    constructor(address _WETH, address _roles) Ownable() RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    function activateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = true;\\n    }\\n\\n    function deactivateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = false;\\n    }\\n\\n    function deposit(address depositToken, uint256 depositAmount)\\n        external\\n        returns (bool)\\n    {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external returns (bool) {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        require(isWithdrawer(msg.sender), \\\"Contract not authorized to deposit\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external returns (bool) {\\n        require(\\n            isWithdrawer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        return IERC20(withdrawalToken).transfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isWithdrawer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        payable(recipient).transfer(withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x0bb5339cb309267349880a96a90781bfc988c418ef69eb1d5cf09403bc4bb3d9\",\"license\":\"GPL-2.0-only\"},\"contracts/HourlyBondSubscriptionLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct YieldAccumulator {\\n    uint256 accumulatorFP;\\n    uint256 lastUpdated;\\n    uint256 hourlyYieldFP;\\n}\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n}\\n\\n/// @dev Here we offer subscriptions to auto-renewing hourly bonds\\n/// Funds are locked in for an 50 minutes per hour, while interest rates float\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    uint256 withdrawalWindow = 10 minutes;\\n    // token => holder => bond record\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n\\n    mapping(address => YieldAccumulator) public hourlyBondYieldAccumulators;\\n    /// @dev accumulate interest per token (like compound indices)\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    uint256 public borrowingFactorPercent = 200;\\n\\n    mapping(address => uint256) public hourlyBondBuyingSpeed;\\n    mapping(address => uint256) public hourlyBondWithdrawingSpeed;\\n\\n    function setHourlyYieldAPR(address token, uint256 aprPercent) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to set hourly yield\\\"\\n        );\\n        if (hourlyBondYieldAccumulators[token].accumulatorFP == 0) {\\n            hourlyBondYieldAccumulators[token] = YieldAccumulator({\\n                accumulatorFP: FP32,\\n                lastUpdated: block.timestamp,\\n                hourlyYieldFP: (FP32 * (100 + aprPercent)) / 100 / (24 * 365)\\n            });\\n        } else {\\n            hourlyBondYieldAccumulators[token].hourlyYieldFP =\\n                (FP32 * (100 + aprPercent)) /\\n                100 /\\n                (24 * 365);\\n        }\\n    }\\n\\n    function setWithdrawalWindow(uint256 window) external onlyOwner {\\n        withdrawalWindow = window;\\n    }\\n\\n    function _makeHourlyBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[token][holder];\\n        updateHourlyBondAmount(token, bond);\\n        bond.yieldQuotientFP = hourlyBondYieldAccumulators[token].accumulatorFP;\\n        bond.moduloHour = block.timestamp % (1 hours);\\n        bond.amount += amount;\\n        totalLending[token] += amount;\\n    }\\n\\n    function updateHourlyBondAmount(address token, HourlyBond storage bond)\\n        internal\\n    {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            YieldAccumulator storage yA = getUpdatedHourlyYield(token);\\n\\n            uint256 oldAmount = bond.amount;\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            totalLending[token] += deltaAmount;\\n        }\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address token,\\n        HourlyBond storage bond,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            withdrawalWindow >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        require(\\n            Fund(fund()).withdraw(token, recipient, amount),\\n            \\\"Insufficient liquidity\\\"\\n        );\\n\\n        bond.amount -= amount;\\n        totalLending[token] -= amount;\\n    }\\n\\n    function closeHourlyBondAccount(address token) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        _withdrawHourlyBond(token, bond, msg.sender, bond.amount);\\n        bond.amount = 0;\\n        bond.yieldQuotientFP = 0;\\n        bond.moduloHour = 0;\\n    }\\n\\n    function calcCumulativeYieldFP(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // accumulator * hourly_yield == seconds_per_hour * accumulator * hourly_yield / seconds_per_hour\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            (yieldAccumulator.accumulatorFP *\\n                yieldAccumulator.hourlyYieldFP *\\n                secondsDelta) /\\n            (FP32 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            // This loop should hardly ever 1 or more unless something bad happened\\n            // In which case it costs gas but there isn't overflow\\n            for (uint256 i = 0; hoursDelta > i; i++) {\\n                // FP32 * FP32 / FP32 = FP32\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP32;\\n            }\\n        }\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    function getUpdatedHourlyYield(address token)\\n        internal\\n        returns (YieldAccumulator storage accumulator)\\n    {\\n        accumulator = hourlyBondYieldAccumulators[token];\\n        uint256 timeDelta = (block.timestamp - accumulator.lastUpdated);\\n\\n        accumulator.accumulatorFP = calcCumulativeYieldFP(\\n            accumulator,\\n            timeDelta\\n        );\\n\\n        accumulator.hourlyYieldFP = updatedYieldFP(\\n            accumulator.hourlyYieldFP,\\n            accumulator.lastUpdated,\\n            totalLending[token],\\n            lendingTarget(token),\\n            hourlyBondBuyingSpeed[token],\\n            hourlyBondWithdrawingSpeed[token],\\n            maxHourlyYieldFP\\n        );\\n\\n        YieldAccumulator storage borrowAccumulator =\\n            borrowYieldAccumulators[token];\\n        timeDelta = block.timestamp - borrowAccumulator.lastUpdated;\\n        borrowAccumulator.accumulatorFP = calcCumulativeYieldFP(\\n            borrowAccumulator,\\n            timeDelta\\n        );\\n\\n        borrowYieldAccumulators[token].hourlyYieldFP =\\n            (borrowingFactorPercent * accumulator.hourlyYieldFP) /\\n            100;\\n\\n        accumulator.lastUpdated = block.timestamp;\\n        borrowAccumulator.lastUpdated = block.timestamp;\\n    }\\n\\n    function viewCumulativeYieldFP(\\n        address token,\\n        mapping(address => YieldAccumulator) storage yieldAccumulators,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yieldAccumulators[token].lastUpdated);\\n        return calcCumulativeYieldFP(yieldAccumulators[token], timeDelta);\\n    }\\n}\\n\",\"keccak256\":\"0x59c78dd3fd81337bcd6046c4ecb8862c430c6a3a4a975bf30f28431da2dafeff\",\"license\":\"GPL-2.0-only\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    address recipient;\\n    uint256 amount;\\n}\\n\\ncontract IncentiveDistribution is RoleAware, Ownable {\\n    // fixed point number factor\\n    uint256 constant FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    uint256 constant contractionPerMil = 999;\\n    // the period for which claims are batch updated\\n    uint256 constant period = 4 hours;\\n    uint256 constant periodsPerDay = 24 hours / period;\\n    address MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n        lastDailyDistributionUpdate = block.timestamp / (1 days);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n    // last day on which we updated currentDailyDistribution\\n    uint256 lastDailyDistributionUpdate;\\n    // portion of daily distribution per each tranche\\n    mapping(uint8 => uint256) public trancheShare;\\n    uint256 public trancheShareTotal;\\n\\n    // tranche => claim totals for the period we're currently aggregating\\n    mapping(uint8 => uint256) public currentPeriodTotals;\\n    // tranche => timestamp / period of last update\\n    mapping(uint8 => uint256) public lastUpdatedPeriods;\\n\\n    // how each claim unit would get if they had staked from the dawn of time\\n    // expressed as fixed point number\\n    // claim amounts are expressed relative to this ongoing aggregate\\n    mapping(uint8 => uint256) public aggregatePeriodicRewardRateFP;\\n    // claim records\\n    mapping(uint256 => Claim) public claims;\\n    uint256 public nextClaimId = 1;\\n\\n    function setTrancheShare(uint8 tranche, uint256 share) external onlyOwner {\\n        require(\\n            lastUpdatedPeriods[tranche] > 0,\\n            \\\"Tranche is not initialized, please initialize first\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint8 tranche, uint256 share) internal {\\n        if (share > trancheShare[tranche]) {\\n            trancheShareTotal += share - trancheShare[tranche];\\n        } else {\\n            trancheShareTotal -= trancheShare[tranche] - share;\\n        }\\n        trancheShare[tranche] = share;\\n    }\\n\\n    function initTranche(uint8 tranche, uint256 share) external onlyOwner {\\n        _setTrancheShare(tranche, share);\\n\\n        lastUpdatedPeriods[tranche] = block.timestamp / period;\\n        // simply initialize to 1.0\\n        aggregatePeriodicRewardRateFP[tranche] = FP32;\\n    }\\n\\n    function updatePeriodTotals(uint8 tranche) internal {\\n        uint256 currentPeriod = block.timestamp / period;\\n\\n        // update the amount that gets distributed per day, if there has been\\n        // a day transition\\n        updateCurrentDailyDistribution();\\n        // Do a bunch of updating of periodic variables when the period changes\\n        uint256 lU = lastUpdatedPeriods[tranche];\\n        uint256 periodDiff = currentPeriod - lU;\\n\\n        if (periodDiff > 0) {\\n            aggregatePeriodicRewardRateFP[tranche] +=\\n                currentPeriodicRewardRateFP(tranche) *\\n                periodDiff;\\n        }\\n\\n        lastUpdatedPeriods[tranche] = currentPeriod;\\n    }\\n\\n    function forcePeriodTotalUpdate(uint8 tranche) external {\\n        updatePeriodTotals(tranche);\\n    }\\n\\n    function updateCurrentDailyDistribution() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastDailyDistributionUpdate;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n        }\\n        // now update this memo\\n        lastDailyDistributionUpdate = nowDay;\\n    }\\n\\n    function currentPeriodicRewardRateFP(uint8 tranche)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // scale daily distribution down to tranche share\\n        uint256 tranchePeriodDistributionFP =\\n            (FP32 * currentDailyDistribution * trancheShare[tranche]) /\\n                trancheShareTotal /\\n                periodsPerDay;\\n\\n        // rate = (total_reward / total_claims) per period\\n        return tranchePeriodDistributionFP / currentPeriodTotals[tranche];\\n    }\\n\\n    function startClaim(\\n        uint8 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external returns (uint256) {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += claimAmount;\\n\\n            claims[nextClaimId] = Claim({\\n                startingRewardRateFP: aggregatePeriodicRewardRateFP[tranche],\\n                recipient: recipient,\\n                amount: claimAmount\\n            });\\n            nextClaimId += 1;\\n            return nextClaimId - 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function addToClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 additionalAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += additionalAmount;\\n\\n            Claim storage claim = claims[claimId];\\n            require(\\n                claim.startingRewardRateFP > 0,\\n                \\\"Trying to add to non-existant claim\\\"\\n            );\\n            _withdrawReward(tranche, claim);\\n            claim.amount += additionalAmount;\\n        }\\n    }\\n\\n    function subtractFromClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n\\n        currentPeriodTotals[tranche] -= subtractAmount;\\n\\n        Claim storage claim = claims[claimId];\\n        _withdrawReward((tranche), claim);\\n        claim.amount -= subtractAmount;\\n    }\\n\\n    function endClaim(uint8 tranche, uint256 claimId) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n\\n        if (claim.startingRewardRateFP > 0) {\\n            _withdrawReward(tranche, claim);\\n            delete claim.recipient;\\n            delete claim.startingRewardRateFP;\\n            delete claim.amount;\\n        }\\n    }\\n\\n    function calcRewardAmount(uint8 tranche, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (claim.amount *\\n                (aggregatePeriodicRewardRateFP[tranche] -\\n                    claim.startingRewardRateFP)) / FP32;\\n    }\\n\\n    function viewRewardAmount(uint8 tranche, uint256 claimId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return calcRewardAmount(tranche, claims[claimId]);\\n    }\\n\\n    function withdrawReward(uint8 tranche, uint256 claimId)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n        return _withdrawReward(tranche, claim);\\n    }\\n\\n    function _withdrawReward(uint8 tranche, Claim storage claim)\\n        internal\\n        returns (uint256 rewardAmount)\\n    {\\n        rewardAmount = calcRewardAmount(tranche, claim);\\n\\n        require(\\n            Fund(fund()).withdraw(MFI, claim.recipient, rewardAmount),\\n            \\\"There seems to be a lack of MFI in the incentive fund!\\\"\\n        );\\n\\n        claim.startingRewardRateFP = aggregatePeriodicRewardRateFP[tranche];\\n    }\\n}\\n\",\"keccak256\":\"0x18fda58acf66d325873d876d87856ded2f93017a3caba64f182c76a319d9ca0c\",\"license\":\"GPL-2.0-only\"},\"contracts/IncentivizedHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @dev helper class to facilitate staking and unstaking\\n/// within the incentive system\\nabstract contract IncentivizedHolder is RoleAware {\\n    // here we cache incentive tranches to save on a bit of gas\\n    mapping(address => uint8) public incentiveTranches;\\n    // claimant => token => claimId\\n    mapping(address => mapping(address => uint256)) public claimIds;\\n\\n    function setIncentiveTranche(address token, uint8 tranche) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set incentive tranche\\\"\\n        );\\n        incentiveTranches[token] = tranche;\\n    }\\n\\n    function stakeClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        IncentiveDistribution iD =\\n            IncentiveDistribution(incentiveDistributor());\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        if (claimId > 0) {\\n            iD.addToClaimAmount(tranche, claimId, amount);\\n        } else {\\n            claimId = iD.startClaim(tranche, claimant, amount);\\n            claimIds[claimant][token] = claimId;\\n        }\\n    }\\n\\n    function withdrawClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\\n            tranche,\\n            claimId,\\n            amount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7642b09d4964ef5ae3405e4dd1f391697bbbdfe808197bf520bfd7fe039c6bf8\",\"license\":\"GPL-2.0-only\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"./BondLending.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\ncontract Lending is\\n    BaseLending,\\n    HourlyBondSubscriptionLending,\\n    BondLending,\\n    IncentivizedHolder\\n{\\n    /// @dev IDs for all bonds held by an address\\n    mapping(address => uint256[]) public bondIds;\\n\\n    constructor(address _roles) RoleAware(_roles) Ownable() {\\n        uint256 APR = 899;\\n        maxHourlyYieldFP = (FP32 * APR) / 100 / (24 * 365);\\n\\n        uint256 aprChangePerMil = 3;\\n        yieldChangePerSecondFP = (FP32 * aprChangePerMil) / 1000;\\n    }\\n\\n    /// @dev how much interest has accrued to a borrowed balance over time\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256 balanceWithInterest) {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[token];\\n        balanceWithInterest = applyInterest(\\n            balance,\\n            yA.accumulatorFP,\\n            yieldQuotientFP\\n        );\\n\\n        uint256 deltaAmount = balanceWithInterest - balance;\\n        totalBorrowed[token] += deltaAmount;\\n    }\\n\\n    /// @dev view function to get current borrowing interest\\n    function viewBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYieldFP(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    /// @dev gets called by router to register if a trader borrows tokens\\n    function registerBorrow(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        require(Fund(fund()).activeTokens(token), \\\"Not an approved token\\\");\\n        totalBorrowed[token] += amount;\\n        require(\\n            totalLending[token] >= totalBorrowed[token],\\n            \\\"Insufficient capital to lend, try again later!\\\"\\n        );\\n    }\\n\\n    /// @dev gets called by router if loan is extinguished\\n    function payOff(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        totalBorrowed[token] -= amount;\\n    }\\n\\n    /// @dev get the borrow yield\\n    function viewBorrowingYieldFP(address token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            viewCumulativeYieldFP(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n    }\\n\\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal override {\\n        _makeHourlyBond(token, holder, amount);\\n    }\\n\\n    /// @dev withdraw an hour bond\\n    function withdrawHourlyBond(address token, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        super._withdrawHourlyBond(token, bond, msg.sender, amount);\\n\\n        withdrawClaim(msg.sender, token, amount);\\n    }\\n\\n    /// @dev buy hourly bond subscription\\n    function buyHourlyBondSubscription(address token, uint256 amount) external {\\n        if (lendingTarget(token) >= totalLending[token] + amount) {\\n            require(\\n                Fund(fund()).depositFor(msg.sender, token, amount),\\n                \\\"Could not transfer bond deposit token to fund\\\"\\n            );\\n            super._makeHourlyBond(token, msg.sender, amount);\\n\\n            stakeClaim(msg.sender, token, amount);\\n        }\\n    }\\n\\n    /// @dev buy fixed term bond that does not renew\\n    function buyBond(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) external returns (uint256 bondIndex) {\\n        if (\\n            lendingTarget(token) >= totalLending[token] + amount &&\\n            maxRuntime >= runtime &&\\n            runtime >= minRuntime\\n        ) {\\n            bondIndex = super._makeBond(\\n                msg.sender,\\n                token,\\n                runtime,\\n                amount,\\n                minReturn\\n            );\\n            bondIds[msg.sender].push(bondIndex);\\n\\n            stakeClaim(msg.sender, token, amount);\\n        }\\n    }\\n\\n    /// @dev send back funds of bond after maturity\\n    function withdrawBond(uint256 bondId) external {\\n        Bond storage bond = bonds[bondId];\\n        require(msg.sender == bond.holder, \\\"Not holder of bond\\\");\\n        require(\\n            block.timestamp > bond.maturityTimestamp,\\n            \\\"bond is still immature\\\"\\n        );\\n\\n        super._withdrawBond(bond);\\n        delete bonds[bondId];\\n        // in case of a shortfall, governance can step in to provide\\n        // additonal compensation beyond the usual incentive which\\n        // gets withdrawn here\\n        withdrawClaim(msg.sender, bond.token, bond.originalPrice);\\n    }\\n\\n    function initBorrowYieldAccumulator(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to init yield accumulator\\\"\\n        );\\n        borrowYieldAccumulators[token].accumulatorFP = FP32;\\n    }\\n\\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\\n        external\\n        onlyOwner\\n    {\\n        borrowingFactorPercent = borrowingFactor;\\n    }\\n}\\n\",\"keccak256\":\"0x74b28cdafc9c7b3baa12eef0cd594391a4a74d4eac564e5a6901c8f30210fa54\",\"license\":\"GPL-2.0-only\"},\"contracts/MarginRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"../interfaces/IMarginTrading.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./Admin.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\ncontract MarginRouter is RoleAware, IncentivizedHolder, Ownable {\\n    /// different uniswap compatible factories to talk to\\n    mapping(address => bool) public factories;\\n    /// wrapped ETH ERC20 contract\\n    address public WETH;\\n    address public constant UNI = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address public constant SUSHI = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\\n    /// emitted when a trader depoits on cross margin\\n    event CrossDeposit(\\n        address trader,\\n        address depositToken,\\n        uint256 depositAmount\\n    );\\n    /// emitted whenever a trade happens\\n    event CrossTrade(\\n        address trader,\\n        address inToken,\\n        uint256 inTokenAmount,\\n        uint256 inTokenBorrow,\\n        address outToken,\\n        uint256 outTokenAmount,\\n        uint256 outTokenExtinguish\\n    );\\n    /// emitted when a trader withdraws funds\\n    event CrossWithdraw(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    );\\n    /// emitted upon sucessfully borrowing\\n    event CrossBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    );\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Trade has expired\\\");\\n        _;\\n    }\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        factories[UNI] = true;\\n        factories[SUSHI] = true;\\n\\n        WETH = _WETH;\\n    }\\n\\n    function authorizeAMM(address ammFactory) external onlyOwner {\\n        factories[ammFactory] = true;\\n    }\\n\\n    /// @dev traders call this to deposit funds on cross margin\\n    function crossDeposit(address depositToken, uint256 depositAmount)\\n        external\\n    {\\n        require(\\n            Fund(fund()).depositFor(msg.sender, depositToken, depositAmount),\\n            \\\"Cannot transfer deposit to margin account\\\"\\n        );\\n        uint256 extinguishAmount =\\n            IMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                depositToken,\\n                depositAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(depositToken, extinguishAmount);\\n            withdrawClaim(msg.sender, depositToken, extinguishAmount);\\n        }\\n        emit CrossDeposit(msg.sender, depositToken, depositAmount);\\n    }\\n\\n    /// @dev deposit wrapped ehtereum into cross margin account\\n    function crossDepositETH() external payable {\\n        Fund(fund()).depositToWETH{value: msg.value}();\\n        uint256 extinguishAmount =\\n            IMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                WETH,\\n                msg.value\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(WETH, extinguishAmount);\\n            withdrawClaim(msg.sender, WETH, extinguishAmount);\\n        }\\n        emit CrossDeposit(msg.sender, WETH, msg.value);\\n    }\\n\\n    /// @dev withdraw deposits/earnings from cross margin account\\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\\n        external\\n    {\\n        IMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            withdrawToken,\\n            withdrawAmount\\n        );\\n        require(\\n            Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount),\\n            \\\"Could not withdraw from fund\\\"\\n        );\\n        emit CrossWithdraw(msg.sender, withdrawToken, withdrawAmount);\\n    }\\n\\n    /// @dev withdraw ethereum from cross margin account\\n    function crossWithdrawETH(uint256 withdrawAmount) external {\\n        IMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            WETH,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\\n    }\\n\\n    /// @dev borrow into cross margin trading account\\n    function crossBorrow(address borrowToken, uint256 borrowAmount) external {\\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\\n        IMarginTrading(marginTrading()).registerBorrow(\\n            msg.sender,\\n            borrowToken,\\n            borrowAmount\\n        );\\n\\n        stakeClaim(msg.sender, borrowToken, borrowAmount);\\n        emit CrossBorrow(msg.sender, borrowToken, borrowAmount);\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0\\n                    ? (uint256(0), amountOut)\\n                    : (amountOut, uint256(0));\\n            address to =\\n                i < path.length - 2\\n                    ? UniswapV2Library.pairFor(factory, output, path[i + 2])\\n                    : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output))\\n                .swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    /// @dev internal helper swapping exact token for token on AMM\\n    function _swapExactT4T(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) internal returns (uint256[] memory amounts) {\\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        require(\\n            Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            ),\\n            \\\"MarginRouter: Insufficient lending funds\\\"\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    /// @dev external function to make swaps on AMM using protocol funds, only for authorized contracts\\n    function authorizedSwapExactT4T(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external returns (uint256[] memory) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        return _swapExactT4T(factory, amountIn, amountOutMin, path);\\n    }\\n\\n    // @dev internal helper swapping exact token for token on on AMM\\n    function _swapT4ExactT(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) internal returns (uint256[] memory amounts) {\\n        // TODO minimum trade?\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"MarginRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        require(\\n            Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            ),\\n            \\\"MarginRouter: Insufficient lending funds\\\"\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    //// @dev external function for swapping protocol funds on AMM, only for authorized\\n    function authorizedSwapT4ExactT(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) external returns (uint256[] memory) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        return _swapT4ExactT(factory, amountOut, amountInMax, path);\\n    }\\n\\n    /// @dev entry point for swapping tokens held in cross margin account\\n    function crossSwapExactTokensForTokens(\\n        address ammFactory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).subtractTradingFees(path[0], amountIn);\\n\\n        requireAuthorizedAMM(ammFactory);\\n        // swap\\n        amounts = _swapExactT4T(\\n            ammFactory,\\n            amountIn - fees,\\n            amountOutMin,\\n            path\\n        );\\n\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amountIn,\\n            amounts[amounts.length - 1]\\n        );\\n    }\\n\\n    /// @dev entry point for swapping tokens held in cross margin account\\n    function crossSwapTokensForExactTokens(\\n        address ammFactory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).addTradingFees(\\n                path[path.length - 1],\\n                amountOut\\n            );\\n\\n        requireAuthorizedAMM(ammFactory);\\n        // swap\\n        amounts = _swapT4ExactT(\\n            ammFactory,\\n            amountOut + fees,\\n            amountInMax,\\n            path\\n        );\\n\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amounts[0],\\n            amountOut\\n        );\\n    }\\n\\n    /// @dev helper function does all the work of telling other contracts\\n    /// about a trade\\n    function registerTrade(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        (uint256 extinguishAmount, uint256 borrowAmount) =\\n            IMarginTrading(marginTrading()).registerTradeAndBorrow(\\n                trader,\\n                inToken,\\n                outToken,\\n                inAmount,\\n                outAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(outToken, extinguishAmount);\\n            withdrawClaim(trader, outToken, extinguishAmount);\\n        }\\n        if (borrowAmount > 0) {\\n            Lending(lending()).registerBorrow(inToken, borrowAmount);\\n            stakeClaim(trader, inToken, borrowAmount);\\n        }\\n\\n        emit CrossTrade(\\n            trader,\\n            inToken,\\n            inAmount,\\n            borrowAmount,\\n            outToken,\\n            outAmount,\\n            extinguishAmount\\n        );\\n    }\\n\\n    function getAmountsOut(\\n        address factory,\\n        uint256 inAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        return UniswapV2Library.getAmountsOut(factory, inAmount, path);\\n    }\\n\\n    function getAmountsIn(\\n        address factory,\\n        uint256 outAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        return UniswapV2Library.getAmountsIn(factory, outAmount, path);\\n    }\\n\\n    function requireAuthorizedAMM(address ammFactory) internal view {\\n        require(\\n            ammFactory == UNI || ammFactory == SUSHI || factories[ammFactory],\\n            \\\"Not using an authorized AMM\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5702bf3dd5d878f26e845ab5feaa53ec1fc975eaf398913bdf6b640de9dfaf38\",\"license\":\"GPL-2.0-only\"},\"contracts/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\n\\n/// Stores how many of token you could get for 1k of peg\\nstruct TokenPrice {\\n    uint256 blockLastUpdated;\\n    uint256 tokenPer1k;\\n    address[] liquidationPath;\\n    address[] inverseLiquidationPath;\\n}\\n\\nabstract contract PriceAware is Ownable, RoleAware {\\n    address public constant UNI = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address public peg;\\n    mapping(address => TokenPrice) public tokenPrices;\\n    /// update window in blocks\\n    uint16 public priceUpdateWindow = 8;\\n    uint256 public TEPID_UPDATE_RATE_PERMIL = 20;\\n    uint256 public CONFIDENT_UPDATE_RATE_PERMIL = 650;\\n    uint256 UPDATE_MAX_PEG_AMOUNT = 50_000;\\n    uint256 UPDATE_MIN_PEG_AMOUNT = 1_000;\\n\\n    constructor(address _peg) Ownable() {\\n        peg = _peg;\\n    }\\n\\n    function setPriceUpdateWindow(uint16 window) external onlyOwner {\\n        priceUpdateWindow = window;\\n    }\\n\\n    function setTepidUpdateRate(uint256 rate) external onlyOwner {\\n        TEPID_UPDATE_RATE_PERMIL = rate;\\n    }\\n\\n    function setConfidentUpdateRate(uint256 rate) external onlyOwner {\\n        CONFIDENT_UPDATE_RATE_PERMIL = rate;\\n    }\\n\\n    function forcePriceUpdate(address token, uint256 inAmount)\\n        public\\n        returns (uint256)\\n    {\\n        return getUpdatedPriceInPeg(token, inAmount);\\n    }\\n\\n    function setUpdateMaxPegAmount(uint256 amount) external onlyOwner {\\n        UPDATE_MAX_PEG_AMOUNT = amount;\\n    }\\n\\n    function setUpdateMinPegAmount(uint256 amount) external onlyOwner {\\n        UPDATE_MIN_PEG_AMOUNT = amount;\\n    }\\n\\n    function getCurrentPriceInPeg(\\n        address token,\\n        uint256 inAmount,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        TokenPrice storage tokenPrice = tokenPrices[token];\\n        if (\\n            block.number - tokenPrice.blockLastUpdated > priceUpdateWindow ||\\n            (forceCurBlock && block.number != tokenPrice.blockLastUpdated) ||\\n            tokenPrice.tokenPer1k == 0\\n        ) {\\n            return getUpdatedPriceInPeg(token, inAmount);\\n        } else {\\n            return (inAmount * 1000 ether) / tokenPrice.tokenPer1k;\\n        }\\n    }\\n\\n    function getUpdatedPriceInPeg(address token, uint256 inAmount)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return inAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            uint256[] memory pathAmounts =\\n                MarginRouter(router()).getAmountsOut(\\n                    UNI,\\n                    inAmount,\\n                    tokenPrice.liquidationPath\\n                );\\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\\n\\n            if (\\n                outAmount > UPDATE_MIN_PEG_AMOUNT &&\\n                outAmount < UPDATE_MAX_PEG_AMOUNT\\n            ) {\\n                confidentUpdatePriceInPeg(tokenPrice, inAmount, outAmount);\\n            }\\n\\n            return outAmount;\\n        }\\n    }\\n\\n    // /// Do a tepid update of price coming from a potentially unreliable source\\n    // function tepidUpdatePriceInPeg(\\n    //     address token,\\n    //     uint256 inAmount,\\n    //     uint256 outAmount\\n    // ) internal {\\n    //     _updatePriceInPeg(\\n    //         tokenPrices[token],\\n    //         inAmount,\\n    //         outAmount,\\n    //         TEPID_UPDATE_RATE_PERMIL\\n    //     );\\n    // }\\n\\n    function confidentUpdatePriceInPeg(\\n        TokenPrice storage tokenPrice,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        _updatePriceInPeg(\\n            tokenPrice,\\n            inAmount,\\n            outAmount,\\n            CONFIDENT_UPDATE_RATE_PERMIL\\n        );\\n        tokenPrice.blockLastUpdated = block.number;\\n    }\\n\\n    function _updatePriceInPeg(\\n        TokenPrice storage tokenPrice,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        uint256 weightPerMil\\n    ) internal {\\n        uint256 updatePer1k = (1000 ether * inAmount) / (outAmount + 1);\\n        tokenPrice.tokenPer1k =\\n            (tokenPrice.tokenPer1k *\\n                (1000 - weightPerMil) +\\n                updatePer1k *\\n                weightPerMil) /\\n            1000;\\n    }\\n\\n    // add path from token to current liquidation peg\\n    function setLiquidationPath(address[] memory path) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set lending cap\\\"\\n        );\\n        address token = path[0];\\n        tokenPrices[token].liquidationPath = new address[](path.length);\\n        tokenPrices[token].inverseLiquidationPath = new address[](path.length);\\n\\n        for (uint16 i = 0; path.length > i; i++) {\\n            tokenPrices[token].liquidationPath[i] = path[i];\\n            tokenPrices[token].inverseLiquidationPath[i] = path[\\n                path.length - i - 1\\n            ];\\n        }\\n        uint256[] memory pathAmounts =\\n            MarginRouter(router()).getAmountsIn(UNI, 1000 ether, path);\\n        uint256 inAmount = pathAmounts[0];\\n        _updatePriceInPeg(tokenPrices[token], inAmount, 1000 ether, 1000);\\n    }\\n\\n    function liquidateToPeg(address token, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return amount;\\n        } else {\\n            TokenPrice storage tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapExactT4T(\\n                    UNI,\\n                    amount,\\n                    0,\\n                    tP.liquidationPath\\n                );\\n\\n            uint256 outAmount = amounts[amounts.length - 1];\\n            confidentUpdatePriceInPeg(tP, amount, outAmount);\\n\\n            return outAmount;\\n        }\\n    }\\n\\n    function liquidateFromPeg(address token, uint256 targetAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return targetAmount;\\n        } else {\\n            TokenPrice storage tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapT4ExactT(\\n                    UNI,\\n                    targetAmount,\\n                    type(uint256).max,\\n                    tP.inverseLiquidationPath\\n                );\\n\\n            confidentUpdatePriceInPeg(tP, targetAmount, amounts[0]);\\n\\n            return amounts[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbe77a44f7dc600eecdbcab096e304ca63dd66ebcdf49f7088be6d7faecfb0e4d\",\"license\":\"GPL-2.0-only\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    uint16 public constant WITHDRAWER = 1;\\n    uint16 public constant MARGIN_CALLER = 2;\\n    uint16 public constant BORROWER = 3;\\n    uint16 public constant MARGIN_TRADER = 4;\\n    uint16 public constant FEE_SOURCE = 5;\\n    uint16 public constant LIQUIDATOR = 6;\\n    uint16 public constant AUTHORIZED_FUND_TRADER = 7;\\n    uint16 public constant INCENTIVE_REPORTER = 8;\\n    uint16 public constant TOKEN_ACTIVATOR = 9;\\n    uint16 public constant STAKE_PENALIZER = 10;\\n\\n    uint16 public constant FUND = 101;\\n    uint16 public constant LENDING = 102;\\n    uint16 public constant ROUTER = 103;\\n    uint16 public constant MARGIN_TRADING = 104;\\n    uint16 public constant FEE_CONTROLLER = 105;\\n    uint16 public constant PRICE_CONTROLLER = 106;\\n    uint16 public constant ADMIN = 107;\\n    uint16 public constant INCENTIVE_DISTRIBUTION = 108;\\n\\n    Roles public roles;\\n    mapping(uint16 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint16 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint16 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint16 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function router() internal view returns (address) {\\n        return mainCharacterCache[ROUTER];\\n    }\\n\\n    function marginTrading() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isWithdrawer(address contr) internal view returns (bool) {\\n        return roleCache[contr][WITHDRAWER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roles.getRole(STAKE_PENALIZER, contr);\\n    }\\n}\\n\",\"keccak256\":\"0x779699aa9143f47f47fa1a42f1dcf168188654d923c76667edf723489bdbfbc6\",\"license\":\"GPL-2.0-only\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint16 => bool)) public roles;\\n    mapping(uint16 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][9] = true;\\n    }\\n\\n    function giveRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint16 role, address actor) external onlyOwner {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint16 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n}\\n\",\"keccak256\":\"0x7437a9ae57cabebc07d13141ac137ffbc5a3ed8c68f2f7f7685608a2bd6a6847\",\"license\":\"GPL-2.0-only\"},\"interfaces/IMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\ninterface IMarginTrading {\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 extinguishAmount);\\n\\n    function registerWithdrawal(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerBorrow(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) external returns (uint256 extinguishAmount, uint256 borrowAmount);\\n\\n    function registerLiquidation(address trader) external;\\n}\\n\",\"keccak256\":\"0xf9d48e0d55bb9102563c71f87e1e6ea106ca287d6dd54060118237f05e0d6148\",\"license\":\"GPL-2.0-only\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"},\"libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            bytes20(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) - 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d78664942fa3474ad9b20e71a55c0b55cf2cf8e86ecabdc7261dc1c76c95005\"}},\"version\":1}",
  "bytecode": "0x6080604052678ac7230489e80000600a553480156200001d57600080fd5b506040516200260738038062002607833981016040819052620000409162000169565b600080546001600160a01b0319166001600160a01b0383161781556200006562000148565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35050600480546001600160a01b03199081166001600160a01b0395861617909155600894909455670de0b6b3a7640000600a556010805485169284169290921780835583166000818152600b60209081526040808320805489169094179093559354600d805491871691881682179055600e80549097168117909655948552600c835284209216909252905243600f55620001cf565b3390565b80516001600160a01b03811681146200016457600080fd5b919050565b600080600080600060a0868803121562000181578081fd5b8551945062000193602087016200014c565b9350620001a3604087016200014c565b9250620001b3606087016200014c565b9150620001c3608087016200014c565b90509295509295909350565b61242880620001df6000396000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c80636cd5cd60116101b2578063b4481652116100f9578063cb82cc8f116100a2578063dc5c66f91161007c578063dc5c66f9146105be578063e909ebfa146105d1578063e9f39e16146105e4578063f2fde38b146105ec57610336565b8063cb82cc8f14610590578063d5d7ed7f146105a3578063d8715ca7146105ab57610336565b8063c3fff5d9116100d3578063c3fff5d91461056d578063c76139d014610580578063cacf8d451461058857610336565b8063b44816521461053f578063bf9befb114610552578063c34316c31461055a57610336565b806383a49c7c1161015b578063a94c7c3411610135578063a94c7c3414610519578063a9cc053614610521578063b0411f461461052957610336565b806383a49c7c146105015780638da5cb5b14610509578063a0098d691461051157610336565b80637fbc953d1161018c5780637fbc953d146104de578063806cdada146104f157806381ca6600146104f957610336565b80636cd5cd60146104b0578063715018a6146104c35780637b23cbce146104cb57610336565b806320e8d81911610281578063392f5f641161022a57806348fb27b81161020457806348fb27b8146104855780635c275a391461048d578063669419841461049557806367cbf42d1461049d57610336565b8063392f5f64146104625780633f0e9edf1461046a57806346b887961461047d57610336565b80632a0acc6a1161025b5780632a0acc6a1461044a5780632fe94def1461045257806332fe7b261461045a57610336565b806320e8d81914610411578063219f951d1461042457806325d5971f1461043757610336565b806316934fc4116102e35780631b669507116102bd5780631b669507146103ee5780631bc5d81d146103f65780631cead9a7146103fe57610336565b806316934fc4146103cb5780631a38de1d146103de5780631aea9f52146103e657610336565b80630a45bc1b116103145780630a45bc1b1461038e5780630ad69150146103ae578063152119d8146103b657610336565b8063020d308d1461033b578063055cfe5314610350578063065d570f14610379575b600080fd5b61034e610349366004611d27565b6105ff565b005b61036361035e366004611d27565b6106ee565b6040516103709190611efc565b60405180910390f35b61038161070e565b60405161037091906122ba565b6103a161039c366004611dbe565b610713565b60405161037091906122f3565b6103a16107c2565b6103be6107c8565b6040516103709190611e84565b6103a16103d9366004611cef565b6107e4565b6103be6107f6565b6103a16109bc565b6103816109c2565b6103816109c7565b6103a161040c366004611cef565b6109cc565b61034e61041f366004611e39565b6109de565b61034e610432366004611e54565b610aef565b61034e610445366004611e54565b610be8565b610381610c33565b610381610c38565b610381610c3d565b6103be610c42565b6103a1610478366004611d93565b610c5e565b610381610d0c565b610381610d11565b610381610d16565b610381610d1b565b6103a16104ab366004611d93565b610d20565b61034e6104be366004611e1f565b610d72565b61034e610e71565b6103636104d9366004611cef565b610f53565b6103a16104ec366004611cef565b610fd2565b6103be6110e2565b6103816110fe565b610381611103565b6103be611108565b610381611124565b610381611129565b61038161112e565b610531611133565b604051610370929190611ed6565b6103be61054d366004611e1f565b611245565b6103a161126d565b610363610568366004611d5f565b611273565b6103be61057b366004611cef565b611293565b6103816112bb565b6103816112c0565b61034e61059e366004611e54565b6112c5565b6103816112cf565b61034e6105b9366004611e54565b6112d4565b6103a16105cc366004611cef565b61134c565b61034e6105df366004611d27565b61135e565b6103be611447565b61034e6105fa366004611cef565b611463565b3373ffffffffffffffffffffffffffffffffffffffff83161480610653575073ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832033845290915290205460ff165b610692576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106899061207d565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600c60209081526040808320939094168252919091522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b600c60209081526000928352604080842090915290825290205460ff1681565b600381565b600061071e336115b1565b610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990611f66565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600560205260409020548311156107ad575073ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260409020546107b0565b50815b6107bb848284611661565b9392505050565b600a5481565b60105473ffffffffffffffffffffffffffffffffffffffff1681565b60056020526000908152604090205481565b600d54600090819061081d9073ffffffffffffffffffffffffffffffffffffffff16610fd2565b90505b80600a54600f5443610832919061238a565b61083c919061234d565b1061099e5780600a5411156108c957600d805473ffffffffffffffffffffffffffffffffffffffff9081166000908152600b602052604080822054600e548416835281832080549185167fffffffffffffffffffffffff00000000000000000000000000000000000000009283168117909155855490941683529120805482169055825416179055610975565b600a54600d5473ffffffffffffffffffffffffffffffffffffffff166000908152600560205260409020546108fe9190612314565b600f600082825461090f91906122fc565b9091555050600d8054600e80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8085169182179093556000908152600b6020526040902054921691161790555b600d546109979073ffffffffffffffffffffffffffffffffffffffff16610fd2565b9050610820565b5050600d5473ffffffffffffffffffffffffffffffffffffffff1690565b600f5481565b600a81565b600881565b60096020526000908152604090205481565b6000546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290610a3690859085906004016122c9565b60206040518083038186803b158015610a4e57600080fd5b505afa158015610a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a869190611dff565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020908152604080832061ffff90951683529390529190912080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b600a5433600090815260056020526040902054610b0c90836122fc565b1015610b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990612020565b610b4e338261190a565b336000908152600b602052604090205473ffffffffffffffffffffffffffffffffffffffff16610be557610b806107f6565b336000818152600b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff9586167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600e549094168252902080549092161790555b50565b610bf133610f53565b15610c28576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106899061225d565b610be5338233611661565b606b81565b606981565b606781565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c6933611c18565b610c9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990612226565b600854610cae906127106122fc565b82600854610cbc919061234d565b610cc69190612314565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260096020526040812080549293508392909190610d009084906122fc565b90915550909392505050565b600681565b606681565b606581565b600181565b6000610d2b33611c18565b610d61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990612226565b61271082600854610cbc919061234d565b6000546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90610dc89084906004016122ba565b60206040518083038186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190611d0b565b61ffff91909116600090815260016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b610e79611c4f565b73ffffffffffffffffffffffffffffffffffffffff16610e97611108565b73ffffffffffffffffffffffffffffffffffffffff1614610ee4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610689906120da565b60035460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600080610f5e6107f6565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806107bb575073ffffffffffffffffffffffffffffffffffffffff8082166000908152600c602090815260408083209387168352929052205460ff169392505050565b60105460009073ffffffffffffffffffffffffffffffffffffffff838116911614156110b557600480546010546040517f70a0823100000000000000000000000000000000000000000000000000000000815260029373ffffffffffffffffffffffffffffffffffffffff938416936370a08231936110549391169101611e84565b60206040518083038186803b15801561106c57600080fd5b505afa158015611080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a49190611e6c565b6110ae9190612314565b90506110dd565b5073ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260409020545b919050565b600e5473ffffffffffffffffffffffffffffffffffffffff1681565b606a81565b600981565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b600281565b600581565b606881565b600d5473ffffffffffffffffffffffffffffffffffffffff1660008061115883610fd2565b9050600f5491505b600a54819061116f844361238a565b611179919061234d565b106112405780600a5411156111c35773ffffffffffffffffffffffffffffffffffffffff9283166000908152600b6020526040902054909216916111bc83610fd2565b905061123b565b600a54600d5473ffffffffffffffffffffffffffffffffffffffff166000908152600560205260409020546111f89190612314565b61120290836122fc565b73ffffffffffffffffffffffffffffffffffffffff9384166000908152600b602052604090205490931692915061123883610fd2565b90505b611160565b509091565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600260209081526000928352604080842090915290825290205460ff1681565b600b6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b606c81565b600481565b610be5338261190a565b600781565b6112dc611c4f565b73ffffffffffffffffffffffffffffffffffffffff166112fa611108565b73ffffffffffffffffffffffffffffffffffffffff1614611347576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610689906120da565b600a55565b60076020526000908152604090205481565b3373ffffffffffffffffffffffffffffffffffffffff831614806113b2575073ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832033845290915290205460ff165b6113e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106899061207d565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600c60209081526040808320939094168252919091522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b61146b611c4f565b73ffffffffffffffffffffffffffffffffffffffff16611489611108565b73ffffffffffffffffffffffffffffffffffffffff16146114d6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610689906120da565b73ffffffffffffffffffffffffffffffffffffffff8116611523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990611fc3565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600080546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd29061160b90600a9086906004016122c9565b60206040518083038186803b15801561162357600080fd5b505afa158015611637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165b9190611dff565b92915050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260408120805490849055600680549192859261169f90849061238a565b909155506116ad9050611c53565b600480546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363d9caed129361170893909116918791899101611ea5565b602060405180830381600087803b15801561172257600080fd5b505af1158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175a9190611dff565b611790576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610689906121c9565b82811415611862576117a0611c98565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600760205260408082205490517fc6de9d5d000000000000000000000000000000000000000000000000000000008152939092169263c6de9d5d926118059291600401611f38565b600060405180830381600087803b15801561181f57600080fd5b505af1158015611833573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff851660009081526007602052604081205550611904565b61186a611c98565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600760205260408082205490517fa8016711000000000000000000000000000000000000000000000000000000008152939092169263a8016711926118d192918890600401611f4b565b600060405180830381600087803b1580156118eb57600080fd5b505af11580156118ff573d6000803e3d6000fd5b505050505b50505050565b611912611c53565b600480546040517fb3db428b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363b3db428b9361196c938893921691879101611ea5565b602060405180830381600087803b15801561198657600080fd5b505af115801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190611dff565b6119f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990612146565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081208054839290611a299084906122fc565b925050819055508060066000828254611a4291906122fc565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604090205415611b1857611a7a611c98565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600760205260408082205490517ff5428087000000000000000000000000000000000000000000000000000000008152939092169263f542808792611ae192918690600401611f4b565b600060405180830381600087803b158015611afb57600080fd5b505af1158015611b0f573d6000803e3d6000fd5b50505050611c14565b6000611b22611c98565b73ffffffffffffffffffffffffffffffffffffffff1663583d8616600085856040518463ffffffff1660e01b8152600401611b5f93929190611f07565b602060405180830381600087803b158015611b7957600080fd5b505af1158015611b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb19190611e6c565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600760205260409020819055905080611c12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106899061210f565b505b5050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206005845290915290205460ff1690565b3390565b606560005260016020527f6def5a300acb6fcaa0dab3a41e9d6457b5147a641e641380f8cc4bf5308b16fe5473ffffffffffffffffffffffffffffffffffffffff1690565b606c60005260016020527fd80c728dcb954e7539257f5b9090fa0c83e482d978be864c61ec2b155c05c2525473ffffffffffffffffffffffffffffffffffffffff1690565b803561ffff811681146110dd57600080fd5b600060208284031215611d00578081fd5b81356107bb816123d0565b600060208284031215611d1c578081fd5b81516107bb816123d0565b60008060408385031215611d39578081fd5b8235611d44816123d0565b91506020830135611d54816123d0565b809150509250929050565b60008060408385031215611d71578182fd5b8235611d7c816123d0565b9150611d8a60208401611cdd565b90509250929050565b60008060408385031215611da5578182fd5b8235611db0816123d0565b946020939093013593505050565b600080600060608486031215611dd2578081fd5b8335611ddd816123d0565b9250602084013591506040840135611df4816123d0565b809150509250925092565b600060208284031215611e10578081fd5b815180151581146107bb578182fd5b600060208284031215611e30578081fd5b6107bb82611cdd565b60008060408385031215611e4b578182fd5b611d4483611cdd565b600060208284031215611e65578081fd5b5035919050565b600060208284031215611e7d578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b60ff93909316835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60ff929092168252602082015260400190565b60ff9390931683526020830191909152604082015260600190565b6020808252602d908201527f6d73672e73656e646572206e6f7420617574686f72697a656420746f2070656e60408201527f616c697a65207374616b65727300000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f496e73756666696369656e74207374616b6520746f2063616c6c206576656e2060408201527f6f6e6520626c6f636b0000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f6d73672e73656e646572206e6f7420617574686f72697a656420746f2064656c60408201527f656761746520666f72207374616b657200000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f446973747269627574696f6e206973206f766572206f72207061757365640000604082015260600190565b60208082526047908201527f436f756c64206e6f74206465706f736974207374616b652066756e647320287060408201527f657268617073206d616b6520616c6c6f77616e636520746f2066756e6420636f60608201527f6e74726163743f00000000000000000000000000000000000000000000000000608082015260a00190565b60208082526032908201527f496e73756666696369656e742066756e6473202d2d20736f6d657468696e672060408201527f77656e74207265616c6c792077726f6e672e0000000000000000000000000000606082015260800190565b6020808252601d908201527f4e6f7420617574686f72697a656420746f20736f757263652066656573000000604082015260600190565b60208082526031908201527f596f752063616e2774207769746864726177207768696c6520796f752772652060408201527f617574686f72697a6564207374616b6572000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b6000821982111561230f5761230f6123a1565b500190565b600082612348577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612385576123856123a1565b500290565b60008282101561239c5761239c6123a1565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610be557600080fdfea2646970667358221220f75269779b78ef1d2a88acd63aeeb679ab6663656f297dbb190e1f90238786de64736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103365760003560e01c80636cd5cd60116101b2578063b4481652116100f9578063cb82cc8f116100a2578063dc5c66f91161007c578063dc5c66f9146105be578063e909ebfa146105d1578063e9f39e16146105e4578063f2fde38b146105ec57610336565b8063cb82cc8f14610590578063d5d7ed7f146105a3578063d8715ca7146105ab57610336565b8063c3fff5d9116100d3578063c3fff5d91461056d578063c76139d014610580578063cacf8d451461058857610336565b8063b44816521461053f578063bf9befb114610552578063c34316c31461055a57610336565b806383a49c7c1161015b578063a94c7c3411610135578063a94c7c3414610519578063a9cc053614610521578063b0411f461461052957610336565b806383a49c7c146105015780638da5cb5b14610509578063a0098d691461051157610336565b80637fbc953d1161018c5780637fbc953d146104de578063806cdada146104f157806381ca6600146104f957610336565b80636cd5cd60146104b0578063715018a6146104c35780637b23cbce146104cb57610336565b806320e8d81911610281578063392f5f641161022a57806348fb27b81161020457806348fb27b8146104855780635c275a391461048d578063669419841461049557806367cbf42d1461049d57610336565b8063392f5f64146104625780633f0e9edf1461046a57806346b887961461047d57610336565b80632a0acc6a1161025b5780632a0acc6a1461044a5780632fe94def1461045257806332fe7b261461045a57610336565b806320e8d81914610411578063219f951d1461042457806325d5971f1461043757610336565b806316934fc4116102e35780631b669507116102bd5780631b669507146103ee5780631bc5d81d146103f65780631cead9a7146103fe57610336565b806316934fc4146103cb5780631a38de1d146103de5780631aea9f52146103e657610336565b80630a45bc1b116103145780630a45bc1b1461038e5780630ad69150146103ae578063152119d8146103b657610336565b8063020d308d1461033b578063055cfe5314610350578063065d570f14610379575b600080fd5b61034e610349366004611d27565b6105ff565b005b61036361035e366004611d27565b6106ee565b6040516103709190611efc565b60405180910390f35b61038161070e565b60405161037091906122ba565b6103a161039c366004611dbe565b610713565b60405161037091906122f3565b6103a16107c2565b6103be6107c8565b6040516103709190611e84565b6103a16103d9366004611cef565b6107e4565b6103be6107f6565b6103a16109bc565b6103816109c2565b6103816109c7565b6103a161040c366004611cef565b6109cc565b61034e61041f366004611e39565b6109de565b61034e610432366004611e54565b610aef565b61034e610445366004611e54565b610be8565b610381610c33565b610381610c38565b610381610c3d565b6103be610c42565b6103a1610478366004611d93565b610c5e565b610381610d0c565b610381610d11565b610381610d16565b610381610d1b565b6103a16104ab366004611d93565b610d20565b61034e6104be366004611e1f565b610d72565b61034e610e71565b6103636104d9366004611cef565b610f53565b6103a16104ec366004611cef565b610fd2565b6103be6110e2565b6103816110fe565b610381611103565b6103be611108565b610381611124565b610381611129565b61038161112e565b610531611133565b604051610370929190611ed6565b6103be61054d366004611e1f565b611245565b6103a161126d565b610363610568366004611d5f565b611273565b6103be61057b366004611cef565b611293565b6103816112bb565b6103816112c0565b61034e61059e366004611e54565b6112c5565b6103816112cf565b61034e6105b9366004611e54565b6112d4565b6103a16105cc366004611cef565b61134c565b61034e6105df366004611d27565b61135e565b6103be611447565b61034e6105fa366004611cef565b611463565b3373ffffffffffffffffffffffffffffffffffffffff83161480610653575073ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832033845290915290205460ff165b610692576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106899061207d565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600c60209081526040808320939094168252919091522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b600c60209081526000928352604080842090915290825290205460ff1681565b600381565b600061071e336115b1565b610754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990611f66565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600560205260409020548311156107ad575073ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260409020546107b0565b50815b6107bb848284611661565b9392505050565b600a5481565b60105473ffffffffffffffffffffffffffffffffffffffff1681565b60056020526000908152604090205481565b600d54600090819061081d9073ffffffffffffffffffffffffffffffffffffffff16610fd2565b90505b80600a54600f5443610832919061238a565b61083c919061234d565b1061099e5780600a5411156108c957600d805473ffffffffffffffffffffffffffffffffffffffff9081166000908152600b602052604080822054600e548416835281832080549185167fffffffffffffffffffffffff00000000000000000000000000000000000000009283168117909155855490941683529120805482169055825416179055610975565b600a54600d5473ffffffffffffffffffffffffffffffffffffffff166000908152600560205260409020546108fe9190612314565b600f600082825461090f91906122fc565b9091555050600d8054600e80547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8085169182179093556000908152600b6020526040902054921691161790555b600d546109979073ffffffffffffffffffffffffffffffffffffffff16610fd2565b9050610820565b5050600d5473ffffffffffffffffffffffffffffffffffffffff1690565b600f5481565b600a81565b600881565b60096020526000908152604090205481565b6000546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290610a3690859085906004016122c9565b60206040518083038186803b158015610a4e57600080fd5b505afa158015610a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a869190611dff565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020908152604080832061ffff90951683529390529190912080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b600a5433600090815260056020526040902054610b0c90836122fc565b1015610b44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990612020565b610b4e338261190a565b336000908152600b602052604090205473ffffffffffffffffffffffffffffffffffffffff16610be557610b806107f6565b336000818152600b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff9586167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600e549094168252902080549092161790555b50565b610bf133610f53565b15610c28576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106899061225d565b610be5338233611661565b606b81565b606981565b606781565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c6933611c18565b610c9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990612226565b600854610cae906127106122fc565b82600854610cbc919061234d565b610cc69190612314565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260096020526040812080549293508392909190610d009084906122fc565b90915550909392505050565b600681565b606681565b606581565b600181565b6000610d2b33611c18565b610d61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990612226565b61271082600854610cbc919061234d565b6000546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90610dc89084906004016122ba565b60206040518083038186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190611d0b565b61ffff91909116600090815260016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b610e79611c4f565b73ffffffffffffffffffffffffffffffffffffffff16610e97611108565b73ffffffffffffffffffffffffffffffffffffffff1614610ee4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610689906120da565b60035460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600080610f5e6107f6565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806107bb575073ffffffffffffffffffffffffffffffffffffffff8082166000908152600c602090815260408083209387168352929052205460ff169392505050565b60105460009073ffffffffffffffffffffffffffffffffffffffff838116911614156110b557600480546010546040517f70a0823100000000000000000000000000000000000000000000000000000000815260029373ffffffffffffffffffffffffffffffffffffffff938416936370a08231936110549391169101611e84565b60206040518083038186803b15801561106c57600080fd5b505afa158015611080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a49190611e6c565b6110ae9190612314565b90506110dd565b5073ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260409020545b919050565b600e5473ffffffffffffffffffffffffffffffffffffffff1681565b606a81565b600981565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b600281565b600581565b606881565b600d5473ffffffffffffffffffffffffffffffffffffffff1660008061115883610fd2565b9050600f5491505b600a54819061116f844361238a565b611179919061234d565b106112405780600a5411156111c35773ffffffffffffffffffffffffffffffffffffffff9283166000908152600b6020526040902054909216916111bc83610fd2565b905061123b565b600a54600d5473ffffffffffffffffffffffffffffffffffffffff166000908152600560205260409020546111f89190612314565b61120290836122fc565b73ffffffffffffffffffffffffffffffffffffffff9384166000908152600b602052604090205490931692915061123883610fd2565b90505b611160565b509091565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600260209081526000928352604080842090915290825290205460ff1681565b600b6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b606c81565b600481565b610be5338261190a565b600781565b6112dc611c4f565b73ffffffffffffffffffffffffffffffffffffffff166112fa611108565b73ffffffffffffffffffffffffffffffffffffffff1614611347576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610689906120da565b600a55565b60076020526000908152604090205481565b3373ffffffffffffffffffffffffffffffffffffffff831614806113b2575073ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832033845290915290205460ff165b6113e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106899061207d565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600c60209081526040808320939094168252919091522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b61146b611c4f565b73ffffffffffffffffffffffffffffffffffffffff16611489611108565b73ffffffffffffffffffffffffffffffffffffffff16146114d6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610689906120da565b73ffffffffffffffffffffffffffffffffffffffff8116611523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990611fc3565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600080546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd29061160b90600a9086906004016122c9565b60206040518083038186803b15801561162357600080fd5b505afa158015611637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165b9190611dff565b92915050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260408120805490849055600680549192859261169f90849061238a565b909155506116ad9050611c53565b600480546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363d9caed129361170893909116918791899101611ea5565b602060405180830381600087803b15801561172257600080fd5b505af1158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175a9190611dff565b611790576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610689906121c9565b82811415611862576117a0611c98565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600760205260408082205490517fc6de9d5d000000000000000000000000000000000000000000000000000000008152939092169263c6de9d5d926118059291600401611f38565b600060405180830381600087803b15801561181f57600080fd5b505af1158015611833573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff851660009081526007602052604081205550611904565b61186a611c98565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600760205260408082205490517fa8016711000000000000000000000000000000000000000000000000000000008152939092169263a8016711926118d192918890600401611f4b565b600060405180830381600087803b1580156118eb57600080fd5b505af11580156118ff573d6000803e3d6000fd5b505050505b50505050565b611912611c53565b600480546040517fb3db428b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363b3db428b9361196c938893921691879101611ea5565b602060405180830381600087803b15801561198657600080fd5b505af115801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be9190611dff565b6119f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990612146565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081208054839290611a299084906122fc565b925050819055508060066000828254611a4291906122fc565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604090205415611b1857611a7a611c98565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600760205260408082205490517ff5428087000000000000000000000000000000000000000000000000000000008152939092169263f542808792611ae192918690600401611f4b565b600060405180830381600087803b158015611afb57600080fd5b505af1158015611b0f573d6000803e3d6000fd5b50505050611c14565b6000611b22611c98565b73ffffffffffffffffffffffffffffffffffffffff1663583d8616600085856040518463ffffffff1660e01b8152600401611b5f93929190611f07565b602060405180830381600087803b158015611b7957600080fd5b505af1158015611b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb19190611e6c565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600760205260409020819055905080611c12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106899061210f565b505b5050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206005845290915290205460ff1690565b3390565b606560005260016020527f6def5a300acb6fcaa0dab3a41e9d6457b5147a641e641380f8cc4bf5308b16fe5473ffffffffffffffffffffffffffffffffffffffff1690565b606c60005260016020527fd80c728dcb954e7539257f5b9090fa0c83e482d978be864c61ec2b155c05c2525473ffffffffffffffffffffffffffffffffffffffff1690565b803561ffff811681146110dd57600080fd5b600060208284031215611d00578081fd5b81356107bb816123d0565b600060208284031215611d1c578081fd5b81516107bb816123d0565b60008060408385031215611d39578081fd5b8235611d44816123d0565b91506020830135611d54816123d0565b809150509250929050565b60008060408385031215611d71578182fd5b8235611d7c816123d0565b9150611d8a60208401611cdd565b90509250929050565b60008060408385031215611da5578182fd5b8235611db0816123d0565b946020939093013593505050565b600080600060608486031215611dd2578081fd5b8335611ddd816123d0565b9250602084013591506040840135611df4816123d0565b809150509250925092565b600060208284031215611e10578081fd5b815180151581146107bb578182fd5b600060208284031215611e30578081fd5b6107bb82611cdd565b60008060408385031215611e4b578182fd5b611d4483611cdd565b600060208284031215611e65578081fd5b5035919050565b600060208284031215611e7d578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b60ff93909316835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60ff929092168252602082015260400190565b60ff9390931683526020830191909152604082015260600190565b6020808252602d908201527f6d73672e73656e646572206e6f7420617574686f72697a656420746f2070656e60408201527f616c697a65207374616b65727300000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f496e73756666696369656e74207374616b6520746f2063616c6c206576656e2060408201527f6f6e6520626c6f636b0000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f6d73672e73656e646572206e6f7420617574686f72697a656420746f2064656c60408201527f656761746520666f72207374616b657200000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f446973747269627574696f6e206973206f766572206f72207061757365640000604082015260600190565b60208082526047908201527f436f756c64206e6f74206465706f736974207374616b652066756e647320287060408201527f657268617073206d616b6520616c6c6f77616e636520746f2066756e6420636f60608201527f6e74726163743f00000000000000000000000000000000000000000000000000608082015260a00190565b60208082526032908201527f496e73756666696369656e742066756e6473202d2d20736f6d657468696e672060408201527f77656e74207265616c6c792077726f6e672e0000000000000000000000000000606082015260800190565b6020808252601d908201527f4e6f7420617574686f72697a656420746f20736f757263652066656573000000604082015260600190565b60208082526031908201527f596f752063616e2774207769746864726177207768696c6520796f752772652060408201527f617574686f72697a6564207374616b6572000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b6000821982111561230f5761230f6123a1565b500190565b600082612348577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612385576123856123a1565b500290565b60008282101561239c5761239c6123a1565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610be557600080fdfea2646970667358221220f75269779b78ef1d2a88acd63aeeb679ab6663656f297dbb190e1f90238786de64736f6c63430008010033",
  "devdoc": {
    "details": "Here we support staking for MFI incentives as well as staking to perform the maintenance role.",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11727,
        "contract": "contracts/Admin.sol:Admin",
        "label": "roles",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Roles)12117"
      },
      {
        "astId": 11731,
        "contract": "contracts/Admin.sol:Admin",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 11737,
        "contract": "contracts/Admin.sol:Admin",
        "label": "roleCache",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_bool))"
      },
      {
        "astId": 381,
        "contract": "contracts/Admin.sol:Admin",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2765,
        "contract": "contracts/Admin.sol:Admin",
        "label": "MFI",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2769,
        "contract": "contracts/Admin.sol:Admin",
        "label": "stakes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2771,
        "contract": "contracts/Admin.sol:Admin",
        "label": "totalStakes",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2775,
        "contract": "contracts/Admin.sol:Admin",
        "label": "claimIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2777,
        "contract": "contracts/Admin.sol:Admin",
        "label": "feesPer10k",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2781,
        "contract": "contracts/Admin.sol:Admin",
        "label": "collectedFees",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2784,
        "contract": "contracts/Admin.sol:Admin",
        "label": "maintenanceStakePerBlock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2788,
        "contract": "contracts/Admin.sol:Admin",
        "label": "nextMaintenanceStaker",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2794,
        "contract": "contracts/Admin.sol:Admin",
        "label": "maintenanceDelegateTo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2796,
        "contract": "contracts/Admin.sol:Admin",
        "label": "currentMaintenanceStaker",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 2798,
        "contract": "contracts/Admin.sol:Admin",
        "label": "prevMaintenanceStaker",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 2800,
        "contract": "contracts/Admin.sol:Admin",
        "label": "currentMaintenanceStakerStartBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2802,
        "contract": "contracts/Admin.sol:Admin",
        "label": "lockedMFI",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Roles)12117": {
        "encoding": "inplace",
        "label": "contract Roles",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}