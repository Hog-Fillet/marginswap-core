{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_MFI",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startingDailyDistributionWithoutDecimals",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUTHORIZED_FUND_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_SOURCE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUND",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_DISTRIBUTION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_REPORTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LENDING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_CALLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_ACTIVATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "additionalAmount",
          "type": "uint256"
        }
      ],
      "name": "addToClaimAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "aggregatePeriodicRewardRateFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startingRewardRateFP",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDailyDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "currentPeriodTotals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        }
      ],
      "name": "endClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        }
      ],
      "name": "forcePeriodTotalUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "initTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "lastUpdatedPeriods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextClaimId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "setTrancheShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        }
      ],
      "name": "startClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "subtractAmount",
          "type": "uint256"
        }
      ],
      "name": "subtractFromClaimAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "trancheShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trancheShareTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        }
      ],
      "name": "viewRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        }
      ],
      "name": "withdrawReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf61437d80184b602ec8e962b0092ac5b5f6255f2bc314dc32db9259db423e13",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1484185",
    "logsBloom": "0x
    "blockHash": "0xb368b6975c301120649b2d1786cb6a973a20833571aeb325b97c4c0363a5968a",
    "transactionHash": "0xcf61437d80184b602ec8e962b0092ac5b5f6255f2bc314dc32db9259db423e13",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0xcf61437d80184b602ec8e962b0092ac5b5f6255f2bc314dc32db9259db423e13",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb368b6975c301120649b2d1786cb6a973a20833571aeb325b97c4c0363a5968a"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "1484185",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAa4e3edb11AFa93c41db59842b29de64b72E355B",
    4000,
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "solcInputHash": "8c921e6c2c5339f5fd0c9f2117ed580b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MFI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingDailyDistributionWithoutDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORIZED_FUND_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_SOURCE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_REPORTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_CALLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ACTIVATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalAmount\",\"type\":\"uint256\"}],\"name\":\"addToClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"aggregatePeriodicRewardRateFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startingRewardRateFP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDailyDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"currentPeriodTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"name\":\"endClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"}],\"name\":\"forcePeriodTotalUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"initTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastUpdatedPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextClaimId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"setTrancheShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"startClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subtractAmount\",\"type\":\"uint256\"}],\"name\":\"subtractFromClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"trancheShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trancheShareTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"name\":\"viewRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IncentiveDistribution.sol\":\"IncentiveDistribution\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\ncontract Fund is RoleAware, Ownable {\\n    address public WETH;\\n    mapping(address => bool) public activeTokens;\\n\\n    constructor(address _WETH, address _roles) Ownable() RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    function activateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = true;\\n    }\\n\\n    function deactivateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = false;\\n    }\\n\\n    function deposit(address depositToken, uint256 depositAmount)\\n        external\\n        returns (bool)\\n    {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external returns (bool) {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        require(isWithdrawer(msg.sender), \\\"Contract not authorized to deposit\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external returns (bool) {\\n        require(\\n            isWithdrawer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        return IERC20(withdrawalToken).transfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isWithdrawer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        payable(recipient).transfer(withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x0bb5339cb309267349880a96a90781bfc988c418ef69eb1d5cf09403bc4bb3d9\",\"license\":\"GPL-2.0-only\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    address recipient;\\n    uint256 amount;\\n}\\n\\ncontract IncentiveDistribution is RoleAware, Ownable {\\n    // fixed point number factor\\n    uint256 constant FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    uint256 constant contractionPerMil = 999;\\n    // the period for which claims are batch updated\\n    uint256 constant period = 4 hours;\\n    uint256 constant periodsPerDay = 24 hours / period;\\n    address MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n        lastDailyDistributionUpdate = block.timestamp / (1 days);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n    // last day on which we updated currentDailyDistribution\\n    uint256 lastDailyDistributionUpdate;\\n    // portion of daily distribution per each tranche\\n    mapping(uint8 => uint256) public trancheShare;\\n    uint256 public trancheShareTotal;\\n\\n    // tranche => claim totals for the period we're currently aggregating\\n    mapping(uint8 => uint256) public currentPeriodTotals;\\n    // tranche => timestamp / period of last update\\n    mapping(uint8 => uint256) public lastUpdatedPeriods;\\n\\n    // how each claim unit would get if they had staked from the dawn of time\\n    // expressed as fixed point number\\n    // claim amounts are expressed relative to this ongoing aggregate\\n    mapping(uint8 => uint256) public aggregatePeriodicRewardRateFP;\\n    // claim records\\n    mapping(uint256 => Claim) public claims;\\n    uint256 public nextClaimId = 1;\\n\\n    function setTrancheShare(uint8 tranche, uint256 share) external onlyOwner {\\n        require(\\n            lastUpdatedPeriods[tranche] > 0,\\n            \\\"Tranche is not initialized, please initialize first\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint8 tranche, uint256 share) internal {\\n        if (share > trancheShare[tranche]) {\\n            trancheShareTotal += share - trancheShare[tranche];\\n        } else {\\n            trancheShareTotal -= trancheShare[tranche] - share;\\n        }\\n        trancheShare[tranche] = share;\\n    }\\n\\n    function initTranche(uint8 tranche, uint256 share) external onlyOwner {\\n        _setTrancheShare(tranche, share);\\n\\n        lastUpdatedPeriods[tranche] = block.timestamp / period;\\n        // simply initialize to 1.0\\n        aggregatePeriodicRewardRateFP[tranche] = FP32;\\n    }\\n\\n    function updatePeriodTotals(uint8 tranche) internal {\\n        uint256 currentPeriod = block.timestamp / period;\\n\\n        // update the amount that gets distributed per day, if there has been\\n        // a day transition\\n        updateCurrentDailyDistribution();\\n        // Do a bunch of updating of periodic variables when the period changes\\n        uint256 lU = lastUpdatedPeriods[tranche];\\n        uint256 periodDiff = currentPeriod - lU;\\n\\n        if (periodDiff > 0) {\\n            aggregatePeriodicRewardRateFP[tranche] +=\\n                currentPeriodicRewardRateFP(tranche) *\\n                periodDiff;\\n        }\\n\\n        lastUpdatedPeriods[tranche] = currentPeriod;\\n    }\\n\\n    function forcePeriodTotalUpdate(uint8 tranche) external {\\n        updatePeriodTotals(tranche);\\n    }\\n\\n    function updateCurrentDailyDistribution() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastDailyDistributionUpdate;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n        }\\n        // now update this memo\\n        lastDailyDistributionUpdate = nowDay;\\n    }\\n\\n    function currentPeriodicRewardRateFP(uint8 tranche)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // scale daily distribution down to tranche share\\n        uint256 tranchePeriodDistributionFP =\\n            (FP32 * currentDailyDistribution * trancheShare[tranche]) /\\n                trancheShareTotal /\\n                periodsPerDay;\\n\\n        // rate = (total_reward / total_claims) per period\\n        return tranchePeriodDistributionFP / currentPeriodTotals[tranche];\\n    }\\n\\n    function startClaim(\\n        uint8 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external returns (uint256) {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += claimAmount;\\n\\n            claims[nextClaimId] = Claim({\\n                startingRewardRateFP: aggregatePeriodicRewardRateFP[tranche],\\n                recipient: recipient,\\n                amount: claimAmount\\n            });\\n            nextClaimId += 1;\\n            return nextClaimId - 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function addToClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 additionalAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += additionalAmount;\\n\\n            Claim storage claim = claims[claimId];\\n            require(\\n                claim.startingRewardRateFP > 0,\\n                \\\"Trying to add to non-existant claim\\\"\\n            );\\n            _withdrawReward(tranche, claim);\\n            claim.amount += additionalAmount;\\n        }\\n    }\\n\\n    function subtractFromClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n\\n        currentPeriodTotals[tranche] -= subtractAmount;\\n\\n        Claim storage claim = claims[claimId];\\n        _withdrawReward((tranche), claim);\\n        claim.amount -= subtractAmount;\\n    }\\n\\n    function endClaim(uint8 tranche, uint256 claimId) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n\\n        if (claim.startingRewardRateFP > 0) {\\n            _withdrawReward(tranche, claim);\\n            delete claim.recipient;\\n            delete claim.startingRewardRateFP;\\n            delete claim.amount;\\n        }\\n    }\\n\\n    function calcRewardAmount(uint8 tranche, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (claim.amount *\\n                (aggregatePeriodicRewardRateFP[tranche] -\\n                    claim.startingRewardRateFP)) / FP32;\\n    }\\n\\n    function viewRewardAmount(uint8 tranche, uint256 claimId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return calcRewardAmount(tranche, claims[claimId]);\\n    }\\n\\n    function withdrawReward(uint8 tranche, uint256 claimId)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n        return _withdrawReward(tranche, claim);\\n    }\\n\\n    function _withdrawReward(uint8 tranche, Claim storage claim)\\n        internal\\n        returns (uint256 rewardAmount)\\n    {\\n        rewardAmount = calcRewardAmount(tranche, claim);\\n\\n        require(\\n            Fund(fund()).withdraw(MFI, claim.recipient, rewardAmount),\\n            \\\"There seems to be a lack of MFI in the incentive fund!\\\"\\n        );\\n\\n        claim.startingRewardRateFP = aggregatePeriodicRewardRateFP[tranche];\\n    }\\n}\\n\",\"keccak256\":\"0x18fda58acf66d325873d876d87856ded2f93017a3caba64f182c76a319d9ca0c\",\"license\":\"GPL-2.0-only\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract RoleAware {\\n    uint16 public constant WITHDRAWER = 1;\\n    uint16 public constant MARGIN_CALLER = 2;\\n    uint16 public constant BORROWER = 3;\\n    uint16 public constant MARGIN_TRADER = 4;\\n    uint16 public constant FEE_SOURCE = 5;\\n    uint16 public constant LIQUIDATOR = 6;\\n    uint16 public constant AUTHORIZED_FUND_TRADER = 7;\\n    uint16 public constant INCENTIVE_REPORTER = 8;\\n    uint16 public constant TOKEN_ACTIVATOR = 9;\\n\\n    uint16 public constant FUND = 101;\\n    uint16 public constant LENDING = 102;\\n    uint16 public constant ROUTER = 103;\\n    uint16 public constant MARGIN_TRADING = 104;\\n    uint16 public constant FEE_CONTROLLER = 105;\\n    uint16 public constant PRICE_CONTROLLER = 106;\\n    uint16 public constant ADMIN = 107;\\n    uint16 public constant INCENTIVE_DISTRIBUTION = 108;\\n\\n    Roles public roles;\\n\\n    constructor(address _roles) {\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return roles.mainCharacters(FUND);\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return roles.mainCharacters(LENDING);\\n    }\\n\\n    function router() internal view returns (address) {\\n        return roles.mainCharacters(ROUTER);\\n    }\\n\\n    function marginTrading() internal view returns (address) {\\n        return roles.mainCharacters(MARGIN_TRADING);\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return roles.mainCharacters(FEE_CONTROLLER);\\n    }\\n\\n    function price() internal view returns (address) {\\n        return roles.mainCharacters(PRICE_CONTROLLER);\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return roles.mainCharacters(ADMIN);\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return roles.mainCharacters(INCENTIVE_DISTRIBUTION);\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roles.getRole(BORROWER, contr);\\n    }\\n\\n    function isWithdrawer(address contr) internal view returns (bool) {\\n        return roles.getRole(WITHDRAWER, contr);\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roles.getRole(MARGIN_TRADER, contr);\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roles.getRole(FEE_SOURCE, contr);\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roles.getRole(MARGIN_CALLER, contr);\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roles.getRole(LIQUIDATOR, contr);\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roles.getRole(AUTHORIZED_FUND_TRADER, contr);\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roles.getRole(INCENTIVE_REPORTER, contr);\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roles.getRole(TOKEN_ACTIVATOR, contr);\\n    }\\n}\\n\",\"keccak256\":\"0x933fb92e5d0a05c1152f74fe81e1467db81a51f7a382f82112a5887111340900\",\"license\":\"GPL-2.0-only\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint16 => bool)) public roles;\\n    mapping(uint16 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][9] = true;\\n    }\\n\\n    function giveRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint16 role, address actor) external onlyOwner {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint16 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n}\\n\",\"keccak256\":\"0x7437a9ae57cabebc07d13141ac137ffbc5a3ed8c68f2f7f7685608a2bd6a6847\",\"license\":\"GPL-2.0-only\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"}},\"version\":1}",
  "bytecode": "0x60806040526001600b553480156200001657600080fd5b506040516200195c3803806200195c83398101604081905262000039916200011b565b600080546001600160a01b0319166001600160a01b0383161781556200005e620000fa565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160a01b0319166001600160a01b038516179055620000db82670de0b6b3a76400006200017c565b600355620000ed62015180426200015b565b60045550620001a8915050565b3390565b80516001600160a01b03811681146200011657600080fd5b919050565b60008060006060848603121562000130578283fd5b6200013b84620000fe565b9250602084015191506200015260408501620000fe565b90509250925092565b6000826200017757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615620001a357634e487b7160e01b81526011600452602481fd5b500290565b6117a480620001b86000396000f3fe608060405234801561001057600080fd5b50600436106102915760003560e01c806381ca660011610160578063a9cc0536116100d8578063d56b10541161008c578063eb3b6cec11610071578063eb3b6cec14610473578063f2fde38b14610486578063f54280871461049957610291565b8063d56b105414610458578063d5d7ed7f1461046b57610291565b8063c6de9d5d116100bd578063c6de9d5d14610435578063c76139d014610448578063cacf8d451461045057610291565b8063a9cc05361461041a578063c63f5ab71461042257610291565b8063a0021cf11161012f578063a801671111610114578063a8016711146103dd578063a888c2cd146103f0578063a94c7c341461041257610291565b8063a0021cf1146103cd578063a0098d69146103d557610291565b806381ca6600146103a257806383a49c7c146103aa5780638da5cb5b146103b257806398239023146103ba57610291565b8063392f5f641161020e5780635c275a39116101c2578063678337f8116101a7578063678337f81461037f578063715018a6146103875780637fad8a181461038f57610291565b80635c275a391461036f578063669419841461037757610291565b806346b88796116101f357806346b887961461034c57806348fb27b814610354578063583d86161461035c57610291565b8063392f5f6414610324578063430c39e41461033957610291565b806319f51afb116102655780632a0acc6a1161024a5780632a0acc6a1461030c5780632fe94def1461031457806332fe7b261461031c57610291565b806319f51afb146102ef5780631bc5d81d1461030457610291565b8062fae52b14610296578063065d570f146102bf57806317eef6f3146102d457806318e843b7146102dc575b600080fd5b6102a96102a43660046112c6565b6104ac565b6040516102b6919061160a565b60405180910390f35b6102c76104be565b6040516102b691906115d1565b6102a96104c3565b6102a96102ea3660046112c6565b6104c9565b6103026102fd36600461131e565b6104db565b005b6102c76105ae565b6102c76105b3565b6102c76105b8565b6102c76105bd565b61032c6105c2565b6040516102b69190611379565b61030261034736600461131e565b6105de565b6102c7610694565b6102c7610699565b6102a961036a3660046112e0565b61069e565b6102c76107e0565b6102c76107e5565b6102a96107ea565b6103026107f0565b6102a961039d3660046112c6565b6108d2565b6102c76108e4565b6102c76108e9565b61032c6108ee565b6102a96103c836600461131e565b61090a565b6102a9610923565b6102c7610929565b6103026103eb366004611347565b61092e565b6104036103fe3660046112ae565b6109d5565b6040516102b693929190611613565b6102c7610a0c565b6102c7610a11565b6102a96104303660046112c6565b610a16565b61030261044336600461131e565b610a28565b6102c7610aca565b6102c7610acf565b6102a961046636600461131e565b610ad4565b6102c7610b3e565b6103026104813660046112c6565b610b43565b610302610494366004611256565b610b4f565b6103026104a7366004611347565b610c9d565b60076020526000908152604090205481565b600381565b60035481565b60056020526000908152604090205481565b6104e3610d79565b73ffffffffffffffffffffffffffffffffffffffff166105016108ee565b73ffffffffffffffffffffffffffffffffffffffff1614610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611485565b60405180910390fd5b60ff82166000908152600860205260409020546105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611517565b6105aa8282610d7d565b5050565b600881565b606b81565b606981565b606781565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6105e6610d79565b73ffffffffffffffffffffffffffffffffffffffff166106046108ee565b73ffffffffffffffffffffffffffffffffffffffff1614610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611485565b61065b8282610d7d565b61066761384042611657565b60ff9092166000908152600860209081526040808320949094556009905291909120640100000000905550565b600681565b606681565b60006106a933610e1b565b6106df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906114ba565b600354156107d5576106f084610ecd565b60ff84166000908152600760205260408120805484929061071290849061163f565b90915550506040805160608101825260ff861660009081526009602090815283822054835273ffffffffffffffffffffffffffffffffffffffff878116828501908152848601888152600b80548652600a9094529584209451855551600180860180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169290931691909117909155935160029093019290925581546107ba90849061163f565b9091555050600b546107ce906001906116cd565b90506107d9565b5060005b9392505050565b606581565b600181565b60065481565b6107f8610d79565b73ffffffffffffffffffffffffffffffffffffffff166108166108ee565b73ffffffffffffffffffffffffffffffffffffffff1614610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611485565b60015460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60096020526000908152604090205481565b606a81565b600981565b60015473ffffffffffffffffffffffffffffffffffffffff1690565b6000818152600a602052604081206107d9908490610f5f565b600b5481565b600281565b61093733610e1b565b61096d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906114ba565b61097683610ecd565b60ff8316600090815260076020526040812080548392906109989084906116cd565b90915550506000828152600a602052604090206109b58482610fa0565b50818160020160008282546109ca91906116cd565b909155505050505050565b600a60205260009081526040902080546001820154600290920154909173ffffffffffffffffffffffffffffffffffffffff169083565b600581565b606881565b60086020526000908152604090205481565b610a3133610e1b565b610a67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906114ba565b610a7082610ecd565b6000818152600a60205260409020805415610ac557610a8f8382610fa0565b506001810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600080825560028201555b505050565b606c81565b600481565b6000610adf33610e1b565b610b15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906114ba565b610b1e83610ecd565b6000828152600a60205260409020610b368482610fa0565b949350505050565b600781565b610b4c81610ecd565b50565b610b57610d79565b73ffffffffffffffffffffffffffffffffffffffff16610b756108ee565b73ffffffffffffffffffffffffffffffffffffffff1614610bc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611485565b73ffffffffffffffffffffffffffffffffffffffff8116610c0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906113cb565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610ca633610e1b565b610cdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906114ba565b60035415610ac557610ced83610ecd565b60ff831660009081526007602052604081208054839290610d0f90849061163f565b90915550506000828152600a602052604090208054610d5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611428565b610d648482610fa0565b50818160020160008282546109ca919061163f565b3390565b60ff8216600090815260056020526040902054811115610dd05760ff8216600090815260056020526040902054610db490826116cd565b60066000828254610dc5919061163f565b90915550610e059050565b60ff8216600090815260056020526040902054610dee9082906116cd565b60066000828254610dff91906116cd565b90915550505b60ff909116600090815260056020526040902055565b600080546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290610e759060089086906004016115e0565b60206040518083038186803b158015610e8d57600080fd5b505afa158015610ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec5919061128e565b90505b919050565b6000610edb61384042611657565b9050610ee56110b9565b60ff821660009081526008602052604081205490610f0382846116cd565b90508015610f475780610f1585611120565b610f1f9190611690565b60ff851660009081526009602052604081208054909190610f4190849061163f565b90915550505b505060ff909116600090815260086020526040902055565b805460ff8316600090815260096020526040812054909164010000000091610f8791906116cd565b8360020154610f969190611690565b6107d99190611657565b6000610fac8383610f5f565b9050610fb6611198565b60025460018401546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363d9caed12936110189390821692911690869060040161139a565b602060405180830381600087803b15801561103257600080fd5b505af1158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a919061128e565b6110a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611574565b60ff909216600090815260096020526040902054905590565b60006110c86201518042611657565b90506000600454826110da91906116cd565b905060005b81811015611119576103e86103e76003546110fa9190611690565b6111049190611657565b60035580611111816116e4565b9150506110df565b5050600455565b60008061113261384062015180611657565b60065460ff851660009081526005602052604090205460035461115a90640100000000611690565b6111649190611690565b61116e9190611657565b6111789190611657565b60ff84166000908152600760205260409020549091506107d99082611657565b600080546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c906111f0906065906004016115d1565b60206040518083038186803b15801561120857600080fd5b505afa15801561121c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112409190611272565b905090565b803560ff81168114610ec857600080fd5b600060208284031215611267578081fd5b81356107d98161174c565b600060208284031215611283578081fd5b81516107d98161174c565b60006020828403121561129f578081fd5b815180151581146107d9578182fd5b6000602082840312156112bf578081fd5b5035919050565b6000602082840312156112d7578081fd5b6107d982611245565b6000806000606084860312156112f4578182fd5b6112fd84611245565b9250602084013561130d8161174c565b929592945050506040919091013590565b60008060408385031215611330578182fd5b61133983611245565b946020939093013593505050565b60008060006060848603121561135b578283fd5b61136484611245565b95602085013595506040909401359392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f547279696e6720746f2061646420746f206e6f6e2d6578697374616e7420636c60408201527f61696d0000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602c908201527f436f6e7472616374206e6f7420617574686f72697a656420746f207265706f7260408201527f7420696e63656e74697665730000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f5472616e636865206973206e6f7420696e697469616c697a65642c20706c656160408201527f736520696e697469616c697a6520666972737400000000000000000000000000606082015260800190565b60208082526036908201527f5468657265207365656d7320746f2062652061206c61636b206f66204d46492060408201527f696e2074686520696e63656e746976652066756e642100000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b600082198211156116525761165261171d565b500190565b60008261168b577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116c8576116c861171d565b500290565b6000828210156116df576116df61171d565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117165761171661171d565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610b4c57600080fdfea26469706673582212201d5b4510e506c1c1ce53cc4e02f945b0aa0d4b79fd2cbc87c10cf54e8906229c64736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102915760003560e01c806381ca660011610160578063a9cc0536116100d8578063d56b10541161008c578063eb3b6cec11610071578063eb3b6cec14610473578063f2fde38b14610486578063f54280871461049957610291565b8063d56b105414610458578063d5d7ed7f1461046b57610291565b8063c6de9d5d116100bd578063c6de9d5d14610435578063c76139d014610448578063cacf8d451461045057610291565b8063a9cc05361461041a578063c63f5ab71461042257610291565b8063a0021cf11161012f578063a801671111610114578063a8016711146103dd578063a888c2cd146103f0578063a94c7c341461041257610291565b8063a0021cf1146103cd578063a0098d69146103d557610291565b806381ca6600146103a257806383a49c7c146103aa5780638da5cb5b146103b257806398239023146103ba57610291565b8063392f5f641161020e5780635c275a39116101c2578063678337f8116101a7578063678337f81461037f578063715018a6146103875780637fad8a181461038f57610291565b80635c275a391461036f578063669419841461037757610291565b806346b88796116101f357806346b887961461034c57806348fb27b814610354578063583d86161461035c57610291565b8063392f5f6414610324578063430c39e41461033957610291565b806319f51afb116102655780632a0acc6a1161024a5780632a0acc6a1461030c5780632fe94def1461031457806332fe7b261461031c57610291565b806319f51afb146102ef5780631bc5d81d1461030457610291565b8062fae52b14610296578063065d570f146102bf57806317eef6f3146102d457806318e843b7146102dc575b600080fd5b6102a96102a43660046112c6565b6104ac565b6040516102b6919061160a565b60405180910390f35b6102c76104be565b6040516102b691906115d1565b6102a96104c3565b6102a96102ea3660046112c6565b6104c9565b6103026102fd36600461131e565b6104db565b005b6102c76105ae565b6102c76105b3565b6102c76105b8565b6102c76105bd565b61032c6105c2565b6040516102b69190611379565b61030261034736600461131e565b6105de565b6102c7610694565b6102c7610699565b6102a961036a3660046112e0565b61069e565b6102c76107e0565b6102c76107e5565b6102a96107ea565b6103026107f0565b6102a961039d3660046112c6565b6108d2565b6102c76108e4565b6102c76108e9565b61032c6108ee565b6102a96103c836600461131e565b61090a565b6102a9610923565b6102c7610929565b6103026103eb366004611347565b61092e565b6104036103fe3660046112ae565b6109d5565b6040516102b693929190611613565b6102c7610a0c565b6102c7610a11565b6102a96104303660046112c6565b610a16565b61030261044336600461131e565b610a28565b6102c7610aca565b6102c7610acf565b6102a961046636600461131e565b610ad4565b6102c7610b3e565b6103026104813660046112c6565b610b43565b610302610494366004611256565b610b4f565b6103026104a7366004611347565b610c9d565b60076020526000908152604090205481565b600381565b60035481565b60056020526000908152604090205481565b6104e3610d79565b73ffffffffffffffffffffffffffffffffffffffff166105016108ee565b73ffffffffffffffffffffffffffffffffffffffff1614610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611485565b60405180910390fd5b60ff82166000908152600860205260409020546105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611517565b6105aa8282610d7d565b5050565b600881565b606b81565b606981565b606781565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6105e6610d79565b73ffffffffffffffffffffffffffffffffffffffff166106046108ee565b73ffffffffffffffffffffffffffffffffffffffff1614610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611485565b61065b8282610d7d565b61066761384042611657565b60ff9092166000908152600860209081526040808320949094556009905291909120640100000000905550565b600681565b606681565b60006106a933610e1b565b6106df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906114ba565b600354156107d5576106f084610ecd565b60ff84166000908152600760205260408120805484929061071290849061163f565b90915550506040805160608101825260ff861660009081526009602090815283822054835273ffffffffffffffffffffffffffffffffffffffff878116828501908152848601888152600b80548652600a9094529584209451855551600180860180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169290931691909117909155935160029093019290925581546107ba90849061163f565b9091555050600b546107ce906001906116cd565b90506107d9565b5060005b9392505050565b606581565b600181565b60065481565b6107f8610d79565b73ffffffffffffffffffffffffffffffffffffffff166108166108ee565b73ffffffffffffffffffffffffffffffffffffffff1614610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611485565b60015460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60096020526000908152604090205481565b606a81565b600981565b60015473ffffffffffffffffffffffffffffffffffffffff1690565b6000818152600a602052604081206107d9908490610f5f565b600b5481565b600281565b61093733610e1b565b61096d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906114ba565b61097683610ecd565b60ff8316600090815260076020526040812080548392906109989084906116cd565b90915550506000828152600a602052604090206109b58482610fa0565b50818160020160008282546109ca91906116cd565b909155505050505050565b600a60205260009081526040902080546001820154600290920154909173ffffffffffffffffffffffffffffffffffffffff169083565b600581565b606881565b60086020526000908152604090205481565b610a3133610e1b565b610a67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906114ba565b610a7082610ecd565b6000818152600a60205260409020805415610ac557610a8f8382610fa0565b506001810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600080825560028201555b505050565b606c81565b600481565b6000610adf33610e1b565b610b15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906114ba565b610b1e83610ecd565b6000828152600a60205260409020610b368482610fa0565b949350505050565b600781565b610b4c81610ecd565b50565b610b57610d79565b73ffffffffffffffffffffffffffffffffffffffff16610b756108ee565b73ffffffffffffffffffffffffffffffffffffffff1614610bc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611485565b73ffffffffffffffffffffffffffffffffffffffff8116610c0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906113cb565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610ca633610e1b565b610cdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e906114ba565b60035415610ac557610ced83610ecd565b60ff831660009081526007602052604081208054839290610d0f90849061163f565b90915550506000828152600a602052604090208054610d5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611428565b610d648482610fa0565b50818160020160008282546109ca919061163f565b3390565b60ff8216600090815260056020526040902054811115610dd05760ff8216600090815260056020526040902054610db490826116cd565b60066000828254610dc5919061163f565b90915550610e059050565b60ff8216600090815260056020526040902054610dee9082906116cd565b60066000828254610dff91906116cd565b90915550505b60ff909116600090815260056020526040902055565b600080546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290610e759060089086906004016115e0565b60206040518083038186803b158015610e8d57600080fd5b505afa158015610ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec5919061128e565b90505b919050565b6000610edb61384042611657565b9050610ee56110b9565b60ff821660009081526008602052604081205490610f0382846116cd565b90508015610f475780610f1585611120565b610f1f9190611690565b60ff851660009081526009602052604081208054909190610f4190849061163f565b90915550505b505060ff909116600090815260086020526040902055565b805460ff8316600090815260096020526040812054909164010000000091610f8791906116cd565b8360020154610f969190611690565b6107d99190611657565b6000610fac8383610f5f565b9050610fb6611198565b60025460018401546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384169363d9caed12936110189390821692911690869060040161139a565b602060405180830381600087803b15801561103257600080fd5b505af1158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a919061128e565b6110a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611574565b60ff909216600090815260096020526040902054905590565b60006110c86201518042611657565b90506000600454826110da91906116cd565b905060005b81811015611119576103e86103e76003546110fa9190611690565b6111049190611657565b60035580611111816116e4565b9150506110df565b5050600455565b60008061113261384062015180611657565b60065460ff851660009081526005602052604090205460035461115a90640100000000611690565b6111649190611690565b61116e9190611657565b6111789190611657565b60ff84166000908152600760205260409020549091506107d99082611657565b600080546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c906111f0906065906004016115d1565b60206040518083038186803b15801561120857600080fd5b505afa15801561121c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112409190611272565b905090565b803560ff81168114610ec857600080fd5b600060208284031215611267578081fd5b81356107d98161174c565b600060208284031215611283578081fd5b81516107d98161174c565b60006020828403121561129f578081fd5b815180151581146107d9578182fd5b6000602082840312156112bf578081fd5b5035919050565b6000602082840312156112d7578081fd5b6107d982611245565b6000806000606084860312156112f4578182fd5b6112fd84611245565b9250602084013561130d8161174c565b929592945050506040919091013590565b60008060408385031215611330578182fd5b61133983611245565b946020939093013593505050565b60008060006060848603121561135b578283fd5b61136484611245565b95602085013595506040909401359392505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f547279696e6720746f2061646420746f206e6f6e2d6578697374616e7420636c60408201527f61696d0000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602c908201527f436f6e7472616374206e6f7420617574686f72697a656420746f207265706f7260408201527f7420696e63656e74697665730000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f5472616e636865206973206e6f7420696e697469616c697a65642c20706c656160408201527f736520696e697469616c697a6520666972737400000000000000000000000000606082015260800190565b60208082526036908201527f5468657265207365656d7320746f2062652061206c61636b206f66204d46492060408201527f696e2074686520696e63656e746976652066756e642100000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b600082198211156116525761165261171d565b500190565b60008261168b577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116c8576116c861171d565b500290565b6000828210156116df576116df61171d565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117165761171661171d565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610b4c57600080fdfea26469706673582212201d5b4510e506c1c1ce53cc4e02f945b0aa0d4b79fd2cbc87c10cf54e8906229c64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9426,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "roles",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Roles)9765"
      },
      {
        "astId": 381,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6675,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "MFI",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6711,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "currentDailyDistribution",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6713,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "lastDailyDistributionUpdate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6717,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "trancheShare",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 6719,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "trancheShareTotal",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6723,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "currentPeriodTotals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 6727,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "lastUpdatedPeriods",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 6731,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "aggregatePeriodicRewardRateFP",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 6736,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "claims",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Claim)6653_storage)"
      },
      {
        "astId": 6739,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "nextClaimId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Roles)9765": {
        "encoding": "inplace",
        "label": "contract Roles",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Claim)6653_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)6653_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Claim)6653_storage": {
        "encoding": "inplace",
        "label": "struct Claim",
        "members": [
          {
            "astId": 6648,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "startingRewardRateFP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6650,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6652,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}