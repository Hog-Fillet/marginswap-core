{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidationShortfall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUTHORIZED_FUND_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_SOURCE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUND",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_DISTRIBUTION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_REPORTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LENDING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_CALLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_PENALIZER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_ACTIVATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coolingOffPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "liquidatedAccounts",
          "type": "address[]"
        }
      ],
      "name": "disburseMCAttacks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getBorrowAmounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "borrowTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "borrowAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getHoldingAmounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "holdingTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "holdingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getTradeBorrowAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "liquidationCandidates",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "currentCaller",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maintainerCut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationThresholdPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "registerBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "registerDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extinguishableDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "name": "registerTradeAndBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extinguishableDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "registerWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocks",
          "type": "uint256"
        }
      ],
      "name": "setCoolingOffPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leverage",
          "type": "uint256"
        }
      ],
      "name": "setLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationThresholdPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "setTokenCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalLong",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalShort",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "role",
          "type": "uint16"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "role",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e383440a56d866e2e97f7edff5a4feb3188b2fdb6debc160cd29fc90935a45a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3883124",
    "logsBloom": "0x
    "blockHash": "0x124d74ccb856312f38e06c00cf2d0b558670ec9c51ef405e8373319171c0bcd9",
    "transactionHash": "0x1e383440a56d866e2e97f7edff5a4feb3188b2fdb6debc160cd29fc90935a45a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x1e383440a56d866e2e97f7edff5a4feb3188b2fdb6debc160cd29fc90935a45a",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x124d74ccb856312f38e06c00cf2d0b558670ec9c51ef405e8373319171c0bcd9"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "3883124",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "solcInputHash": "79119ed825065c61cbca8e8b1e4ce68d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidationShortfall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORIZED_FUND_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_SOURCE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_REPORTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_CALLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_PENALIZER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ACTIVATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolingOffPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"liquidatedAccounts\",\"type\":\"address[]\"}],\"name\":\"disburseMCAttacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getBorrowAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getHoldingAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"holdingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"holdingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTradeBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"liquidationCandidates\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"currentCaller\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maintainerCut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"registerBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"registerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extinguishableDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"name\":\"registerTradeAndBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extinguishableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"registerWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"setCoolingOffPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"}],\"name\":\"setLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setLiquidationThresholdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setTokenCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"role\",\"type\":\"uint16\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"role\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossMarginTrading.sol\":\"CrossMarginTrading\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./CrossMarginTrading.sol\\\";\\n\\ncontract Admin is RoleAware, Ownable {\\n    address MFI;\\n    mapping(address => uint256) public stakes;\\n    uint256 public totalStakes;\\n    mapping(address => uint256) public claimIds;\\n\\n    uint256 feesPer10k;\\n    mapping(address => uint256) public collectedFees;\\n\\n    uint256 public maintenanceStakePerBlock;\\n    mapping(address => address) public nextMaintenanceStaker;\\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\\n    address currentMaintenanceStaker;\\n    address prevMaintenanceStaker;\\n    uint256 currentMaintenanceStakerStartBlock;\\n\\n    // TODO initialize the above\\n\\n    constructor(\\n        uint256 _feesPer10k,\\n        address _MFI,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        feesPer10k = _feesPer10k;\\n        maintenanceStakePerBlock = 1 ether;\\n    }\\n\\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\\n        maintenanceStakePerBlock = amount;\\n    }\\n\\n    function _stake(address holder, uint256 amount) internal {\\n        require(\\n            Fund(fund()).depositFor(holder, MFI, amount),\\n            \\\"Could not deposit stake funds (perhaps make allowance to fund contract?\\\"\\n        );\\n        stakes[msg.sender] += amount;\\n        totalStakes += amount;\\n\\n        if (claimIds[holder] > 0) {\\n            IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\\n                0,\\n                claimIds[holder],\\n                amount\\n            );\\n        } else {\\n            uint256 claimId =\\n                IncentiveDistribution(incentiveDistributor()).startClaim(\\n                    0,\\n                    holder,\\n                    amount\\n                );\\n            claimIds[msg.sender] = claimId;\\n            require(claimId > 0, \\\"Distribution is over or paused\\\");\\n        }\\n    }\\n\\n    function depositStake(uint256 amount) external {\\n        _stake(msg.sender, amount);\\n    }\\n\\n    function _withdrawStake(\\n        address holder,\\n        uint256 amount,\\n        address recipient\\n    ) internal {\\n        uint256 stakeAmount = stakes[holder];\\n        // overflow failure desirable\\n        stakes[holder] = amount;\\n        totalStakes -= amount;\\n        require(\\n            Fund(fund()).withdraw(MFI, recipient, amount),\\n            \\\"Insufficient funds -- something went really wrong.\\\"\\n        );\\n        if (stakeAmount == amount) {\\n            IncentiveDistribution(incentiveDistributor()).endClaim(\\n                0,\\n                claimIds[holder]\\n            );\\n            claimIds[holder] = 0;\\n        } else {\\n            IncentiveDistribution(incentiveDistributor())\\n                .subtractFromClaimAmount(0, claimIds[holder], amount);\\n        }\\n    }\\n\\n    function withdrawStake(uint256 amount) external {\\n        require(\\n            !isAuthorizedStaker(msg.sender),\\n            \\\"You can't withdraw while you're authorized staker\\\"\\n        );\\n        _withdrawStake(msg.sender, amount, msg.sender);\\n    }\\n\\n    function addTradingFees(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / 10_000;\\n        collectedFees[token] += fees;\\n    }\\n\\n    function subtractTradingFees(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / (10_000 + feesPer10k);\\n        collectedFees[token] += fees;\\n    }\\n\\n    function depositMaintenanceStake(uint256 amount) external {\\n        require(\\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\\n            \\\"Insufficient stake to call even one block\\\"\\n        );\\n        _stake(msg.sender, amount);\\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\\n        }\\n    }\\n\\n    function getUpdatedCurrentStaker() public returns (address) {\\n        while (\\n            (block.number - currentMaintenanceStakerStartBlock) *\\n                maintenanceStakePerBlock >=\\n            stakes[currentMaintenanceStaker]\\n        ) {\\n            if (maintenanceStakePerBlock > stakes[currentMaintenanceStaker]) {\\n                // delete current from daisy chain\\n                address nextOne =\\n                    nextMaintenanceStaker[currentMaintenanceStaker];\\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\\n\\n                currentMaintenanceStaker = nextOne;\\n            } else {\\n                currentMaintenanceStakerStartBlock +=\\n                    stakes[currentMaintenanceStaker] /\\n                    maintenanceStakePerBlock;\\n                prevMaintenanceStaker = currentMaintenanceStaker;\\n                currentMaintenanceStaker = nextMaintenanceStaker[\\n                    currentMaintenanceStaker\\n                ];\\n            }\\n        }\\n        return currentMaintenanceStaker;\\n    }\\n\\n    // TODO rethink authorization\\n    function addDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = true;\\n    }\\n\\n    function removeDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = false;\\n    }\\n\\n    function isAuthorizedStaker(address caller)\\n        public\\n        returns (bool isAuthorized)\\n    {\\n        address currentStaker = getUpdatedCurrentStaker();\\n        isAuthorized =\\n            currentStaker == caller ||\\n            maintenanceDelegateTo[currentStaker][caller];\\n    }\\n\\n    function penalizeMaintenanceStake(\\n        address maintainer,\\n        uint256 penalty,\\n        address recipient\\n    ) external returns (uint256 stakeTaken) {\\n        require(\\n            isStakePenalizer(msg.sender),\\n            \\\"msg.sender not authorized to penalize stakers\\\"\\n        );\\n        if (penalty > stakes[maintainer]) {\\n            stakeTaken = stakes[maintainer];\\n        } else {\\n            stakeTaken = penalty;\\n        }\\n        _withdrawStake(maintainer, stakeTaken, recipient);\\n    }\\n}\\n\",\"keccak256\":\"0xc0a849af5b2a02bf833f1b85ab8250c6f687bbbdbbfe54dee5ef4c599145e11e\",\"license\":\"GPL-2.0-only\"},\"contracts/BaseLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\nabstract contract BaseLending is RoleAware, Ownable {\\n    uint256 constant FP32 = 2**32;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    mapping(address => uint256) public totalLending;\\n    mapping(address => uint256) public totalBorrowed;\\n    // TODO init lending target with some amount out the gate\\n    mapping(address => uint256) public lendingTarget;\\n    mapping(address => uint256) public totalHourlyYieldFP;\\n    uint256 public yieldChangePerSecondFP;\\n\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    function updatedYieldFP(\\n        uint256 _yieldFP,\\n        uint256 lastUpdated,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketTarget,\\n        uint256 buying,\\n        uint256 withdrawing,\\n        uint256 bucketMaxYield\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = _yieldFP;\\n        uint256 timeDiff = block.timestamp - lastUpdated;\\n        uint256 yieldDiff = timeDiff * yieldChangePerSecondFP;\\n\\n        if (\\n            totalLendingInBucket >= bucketTarget ||\\n            // TODO is this too restrictive?\\n            (buying >= withdrawing &&\\n                buying - withdrawing >= bucketTarget - totalLendingInBucket)\\n        ) {\\n            // TODO underflow\\n            yieldFP -= yieldDiff;\\n            if (FP32 > yieldFP) {\\n                yieldFP = FP32;\\n            }\\n        } else if (\\n            bucketTarget > totalLendingInBucket &&\\n            (withdrawing > buying ||\\n                bucketTarget - totalLendingInBucket > buying - withdrawing)\\n        ) {\\n            yieldFP += yieldDiff;\\n            if (yieldFP > bucketMaxYield) {\\n                yieldFP = bucketMaxYield;\\n            }\\n        }\\n    }\\n\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xfd25ab876a6509123a782d3f2b6bab24af5b0ae501a4a9a5ec3d96de8158ad73\",\"license\":\"GPL-2.0-only\"},\"contracts/BondLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Bond {\\n    address holder;\\n    address token;\\n    uint256 originalPrice;\\n    uint256 returnAmount;\\n    uint256 maturityTimestamp;\\n    uint256 runtime;\\n    uint256 yieldFP;\\n}\\n\\nabstract contract BondLending is BaseLending {\\n    // CAUTION: minRuntime must be at least 1 hour\\n    uint256 public minRuntime;\\n    uint256 public maxRuntime;\\n    uint256 public diffMaxMinRuntime;\\n    // this is the numerator under runtimeWeights.\\n    // any excess left over is the weight of hourly bonds\\n    uint256 public weightTotal;\\n    uint256 public borrowingMarkupFP;\\n\\n    mapping(address => uint256[]) public maxYield;\\n    mapping(address => uint256[]) public runtimeWeights;\\n    mapping(address => uint256[]) public buyingSpeed;\\n    mapping(address => uint256[]) public lastBought;\\n    mapping(address => uint256[]) public withdrawingSpeed;\\n    mapping(address => uint256[]) public lastWithdrawn;\\n    mapping(address => uint256[]) public yieldLastUpdated;\\n\\n    mapping(uint256 => Bond) public bonds;\\n\\n    mapping(address => uint256[]) public totalLendingPerRuntime;\\n    mapping(address => uint256[]) runtimeYieldsFP;\\n    uint256 public nextBondIndex = 1;\\n\\n    event LiquidityWarning(\\n        address indexed token,\\n        address indexed holder,\\n        uint256 value\\n    );\\n\\n    function _makeBond(\\n        address holder,\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) internal returns (uint256 bondIndex) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        uint256 bondReturn = (yieldFP * amount) / FP32;\\n        if (bondReturn >= minReturn) {\\n            if (Fund(fund()).depositFor(holder, token, amount)) {\\n                uint256 interpolatedAmount = (amount + bondReturn) / 2;\\n                totalLending[token] += interpolatedAmount;\\n                totalLendingPerRuntime[token][\\n                    bucketIndex\\n                ] += interpolatedAmount;\\n                // TODO overflow??\\n                totalHourlyYieldFP[token] +=\\n                    (amount * yieldFP * (1 hours)) /\\n                    runtime;\\n                bondIndex = nextBondIndex;\\n                nextBondIndex++;\\n                bonds[bondIndex] = Bond({\\n                    holder: holder,\\n                    token: token,\\n                    originalPrice: amount,\\n                    returnAmount: bondReturn,\\n                    maturityTimestamp: block.timestamp + runtime,\\n                    runtime: runtime,\\n                    yieldFP: yieldFP\\n                });\\n                updateSpeed(\\n                    buyingSpeed[token],\\n                    lastBought[token],\\n                    bucketIndex,\\n                    amount\\n                );\\n            }\\n        }\\n    }\\n\\n    function _withdrawBond(Bond storage bond) internal {\\n        address token = bond.token;\\n        uint256 bucketIndex = getBucketIndex(token, bond.runtime);\\n        uint256 interpolatedAmount =\\n            (bond.originalPrice + bond.returnAmount) / 2;\\n        totalLending[token] -= interpolatedAmount;\\n        totalLendingPerRuntime[token][bucketIndex] -= interpolatedAmount;\\n\\n        updateSpeed(\\n            withdrawingSpeed[token],\\n            lastWithdrawn[token],\\n            bucketIndex,\\n            bond.originalPrice\\n        );\\n\\n        if (\\n            totalBorrowed[token] > totalLending[token] ||\\n            !Fund(fund()).withdraw(token, bond.holder, bond.returnAmount)\\n        ) {\\n            // apparently there is a liquidity issue\\n            emit LiquidityWarning(token, bond.holder, bond.returnAmount);\\n            _makeFallbackBond(token, bond.holder, bond.returnAmount);\\n        }\\n    }\\n\\n    function getUpdatedBondYieldFP(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) internal returns (uint256 yieldFP, uint256 bucketIndex) {\\n        bucketIndex = getBucketIndex(token, runtime);\\n        yieldFP = calcBondYieldFP(\\n            token,\\n            amount + totalLendingPerRuntime[token][bucketIndex],\\n            bucketIndex\\n        );\\n        runtimeYieldsFP[token][bucketIndex] = yieldFP;\\n        yieldLastUpdated[token][bucketIndex] = block.timestamp;\\n    }\\n\\n    // TODO make sure yield changes can't get stuck under some circumstances\\n    function calcBondYieldFP(\\n        address token,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketIndex\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = runtimeYieldsFP[token][bucketIndex];\\n        uint256 lastUpdated = yieldLastUpdated[token][bucketIndex];\\n        uint256 bucketTarget =\\n            (lendingTarget[token] * runtimeWeights[token][bucketIndex]) /\\n                weightTotal;\\n        uint256 buying = buyingSpeed[token][bucketIndex];\\n        uint256 withdrawing = withdrawingSpeed[token][bucketIndex];\\n        uint256 bucketMaxYield = maxYield[token][bucketIndex];\\n\\n        yieldFP = updatedYieldFP(\\n            yieldFP,\\n            lastUpdated,\\n            totalLendingInBucket,\\n            bucketTarget,\\n            buying,\\n            withdrawing,\\n            bucketMaxYield\\n        );\\n    }\\n\\n    function viewBondReturn(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        return (yieldFP * amount) / FP32;\\n    }\\n\\n    function getAvgLendingYieldFP(address token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return totalHourlyYieldFP[token] / totalLending[token];\\n    }\\n\\n    function getHourlyBorrowYieldFP(address token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (getAvgLendingYieldFP(token) * borrowingMarkupFP) / FP32;\\n    }\\n\\n    function getBucketIndex(address token, uint256 runtime)\\n        internal\\n        view\\n        returns (uint256 bucketIndex)\\n    {\\n        uint256[] storage yieldsFP = runtimeYieldsFP[token];\\n        uint256 bucketSize = diffMaxMinRuntime / yieldsFP.length;\\n        bucketIndex = runtime / bucketSize;\\n    }\\n\\n    function updateSpeed(\\n        uint256[] storage speedRegister,\\n        uint256[] storage lastAction,\\n        uint256 bucketIndex,\\n        uint256 amount\\n    ) internal {\\n        uint256 bucketSize = diffMaxMinRuntime / speedRegister.length;\\n        uint256 runtime = bucketSize * bucketIndex;\\n        uint256 timeDiff = block.timestamp - lastAction[bucketIndex];\\n        uint256 currentSpeed = (amount * runtime) / timeDiff;\\n\\n        // TODO init speed with runtime\\n        speedRegister[bucketIndex] =\\n            (speedRegister[bucketIndex] * runtime + currentSpeed * timeDiff) /\\n            (runtime + timeDiff);\\n        lastAction[bucketIndex] = block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x75b61a52342b27cee7897b228de2bafcd31391f310eda30b669541c9c1b1d6c7\",\"license\":\"GPL-2.0-only\"},\"contracts/CrossMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"./Price.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\nstruct CrossMarginAccount {\\n    uint256 lastDepositBlock;\\n    address[] borrowTokens;\\n    mapping(address => uint256) borrowed;\\n    mapping(address => uint256) borrowedYieldQuotientsFP;\\n    address[] holdingTokens;\\n    mapping(address => uint256) holdings;\\n    mapping(address => bool) holdsToken;\\n}\\n\\ncontract CrossMarginTrading is RoleAware, Ownable {\\n    event LiquidationShortfall(uint256 amount);\\n\\n    uint256 public leverage;\\n    uint256 public liquidationThresholdPercent;\\n    mapping(address => CrossMarginAccount) marginAccounts;\\n    mapping(address => uint256) public tokenCaps;\\n    mapping(address => uint256) public totalShort;\\n    mapping(address => uint256) public totalLong;\\n    uint256 public coolingOffPeriod;\\n\\n    constructor(address _roles) RoleAware(_roles) Ownable() {\\n        liquidationThresholdPercent = 20;\\n        coolingOffPeriod = 20;\\n    }\\n\\n    function setTokenCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set token cap\\\"\\n        );\\n        tokenCaps[token] = cap;\\n    }\\n\\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\\n        coolingOffPeriod = blocks;\\n    }\\n\\n    function getHoldingAmounts(address trader)\\n        external\\n        view\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n        )\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        holdingTokens = account.holdingTokens;\\n\\n        holdingAmounts = new uint256[](account.holdingTokens.length);\\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\\n            address tokenAddress = holdingTokens[idx];\\n            holdingAmounts[idx] = account.holdings[tokenAddress];\\n        }\\n\\n        (holdingTokens, holdingAmounts);\\n    }\\n\\n    function getBorrowAmounts(address trader)\\n        external\\n        view\\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrowTokens = account.borrowTokens;\\n\\n        borrowAmounts = new uint256[](account.borrowTokens.length);\\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\\n            address tokenAddress = borrowTokens[idx];\\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\\n                account.borrowed[tokenAddress],\\n                tokenAddress,\\n                account.borrowedYieldQuotientsFP[tokenAddress]\\n            );\\n        }\\n\\n        (borrowTokens, borrowAmounts);\\n    }\\n\\n    function setLeverage(uint256 _leverage) external onlyOwner {\\n        leverage = _leverage;\\n    }\\n\\n    function setLiquidationThresholdPercent(uint256 threshold)\\n        external\\n        onlyOwner\\n    {\\n        liquidationThresholdPercent = threshold;\\n    }\\n\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 depositAmount\\n    ) external returns (uint256 extinguishableDebt) {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        totalLong[token] += depositAmount;\\n        require(\\n            tokenCaps[token] >= totalLong[token],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        addHolding(account, token, depositAmount);\\n        if (account.borrowed[token] > 0) {\\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\\n            extinguishDebt(account, token, extinguishableDebt);\\n            totalShort[token] -= extinguishableDebt;\\n        }\\n        account.lastDepositBlock = block.number;\\n    }\\n\\n    function addHolding(\\n        CrossMarginAccount storage account,\\n        address token,\\n        uint256 depositAmount\\n    ) internal {\\n        if (!hasHoldingToken(account, token)) {\\n            account.holdingTokens.push(token);\\n        }\\n\\n        account.holdings[token] += depositAmount;\\n    }\\n\\n    function registerBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) external {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        totalShort[borrowToken] += borrowAmount;\\n        totalLong[borrowToken] += borrowAmount;\\n        require(\\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrow(account, borrowToken, borrowAmount);\\n    }\\n\\n    function borrow(\\n        CrossMarginAccount storage account,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) internal {\\n        if (!hasBorrowedToken(account, borrowToken)) {\\n            account.borrowTokens.push(borrowToken);\\n\\n            account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\\n                .viewBorrowingYield(borrowToken);\\n        } else {\\n            account.borrowed[borrowToken] = Lending(lending())\\n                .applyBorrowInterest(\\n                account.borrowed[borrowToken],\\n                borrowToken,\\n                account.borrowedYieldQuotientsFP[borrowToken]\\n            );\\n        }\\n        account.borrowed[borrowToken] += borrowAmount;\\n        addHolding(account, borrowToken, borrowAmount);\\n\\n        require(positiveBalance(account), \\\"Can't borrow: insufficient balance\\\");\\n    }\\n\\n    function registerWithdrawal(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    ) external {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        require(\\n            block.number > account.lastDepositBlock + coolingOffPeriod,\\n            \\\"To prevent attacks you must wait until your cooling off period is over to withdraw\\\"\\n        );\\n\\n        totalLong[withdrawToken] -= withdrawAmount;\\n        // throws on underflow\\n        account.holdings[withdrawToken] =\\n            account.holdings[withdrawToken] -\\n            withdrawAmount;\\n        require(\\n            positiveBalance(account),\\n            \\\"Account balance is too low to withdraw\\\"\\n        );\\n    }\\n\\n    function positiveBalance(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account);\\n        uint256 holdings = holdingsInPeg(account);\\n        // The following condition should hold:\\n        // holdings / loan >= (leverage + 1) / leverage\\n        // =>\\n        return holdings * (leverage + 1) >= loan * leverage;\\n    }\\n\\n    function extinguishDebt(\\n        CrossMarginAccount storage account,\\n        address debtToken,\\n        uint256 extinguishAmount\\n    ) internal {\\n        // will throw if insufficient funds\\n        account.borrowed[debtToken] = Lending(lending()).applyBorrowInterest(\\n            account.borrowed[debtToken],\\n            debtToken,\\n            account.borrowedYieldQuotientsFP[debtToken]\\n        );\\n        account.borrowed[debtToken] =\\n            account.borrowed[debtToken] -\\n            extinguishAmount;\\n        account.holdings[debtToken] =\\n            account.holdings[debtToken] -\\n            extinguishAmount;\\n    }\\n\\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.holdsToken[token];\\n    }\\n\\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.borrowedYieldQuotientsFP[token] > 0;\\n    }\\n\\n    function loanInPeg(CrossMarginAccount storage account)\\n        internal\\n        returns (uint256)\\n    {\\n        return\\n            sumTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP\\n            );\\n    }\\n\\n    function holdingsInPeg(CrossMarginAccount storage account)\\n        internal\\n        returns (uint256)\\n    {\\n        return sumTokensInPeg(account.holdingTokens, account.holdings);\\n    }\\n\\n    function belowMaintenanceThreshold(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account);\\n        uint256 holdings = holdingsInPeg(account);\\n        // The following should hold:\\n        // holdings / loan >= 1.1\\n        // => holdings >= loan * 1.1\\n        return\\n            1000  * holdings >= 1100 * loan;\\n    }\\n\\n    function canBorrow(\\n        CrossMarginAccount storage account,\\n        address token,\\n        uint256 amount\\n    ) internal view returns (bool) {\\n        return account.holdings[token] >= amount;\\n    }\\n\\n    function getTradeBorrowAmount(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 borrowAmount) {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader\\\"\\n        );\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrowAmount = amount - account.holdings[token];\\n        require(\\n            canBorrow(account, token, borrowAmount),\\n            \\\"Can't borrow full amount\\\"\\n        );\\n    }\\n\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) external returns (uint256 extinguishableDebt, uint256 borrowAmount) {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader agent\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n\\n        if (account.borrowed[tokenTo] > 0) {\\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\\n            extinguishDebt(account, tokenTo, extinguishableDebt);\\n            totalShort[tokenTo] -= extinguishableDebt;\\n        }\\n        totalLong[tokenFrom] -= inAmount;\\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\\n        require(\\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        uint256 sellAmount = inAmount;\\n        if (inAmount > account.holdings[tokenFrom]) {\\n            sellAmount = account.holdings[tokenFrom];\\n            borrowAmount = inAmount - sellAmount;\\n\\n            totalShort[tokenFrom] += borrowAmount;\\n            require(\\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\\n                \\\"Exceeding global exposure cap to token -- try again later\\\"\\n            );\\n\\n            borrow(account, tokenFrom, borrowAmount);\\n        }\\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\\n    }\\n\\n    function sumTokensInPeg(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += Price(price()).getUpdatedPriceInPeg(\\n                token,\\n                amounts[token]\\n            );\\n        }\\n    }\\n\\n    function sumTokensInPegWithYield(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += yieldTokenInPeg(\\n                token,\\n                amounts[token],\\n                yieldQuotientsFP\\n            );\\n        }\\n    }\\n\\n    function yieldTokenInPeg(\\n        address token,\\n        uint256 amount,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal returns (uint256) {\\n        uint256 yield = Lending(lending()).viewBorrowingYield(token);\\n        // 1 * FP / FP = 1\\n        uint256 amountInToken = (amount * yield) / yieldQuotientsFP[token];\\n        return Price(price()).getUpdatedPriceInPeg(token, amountInToken);\\n    }\\n\\n    function adjustAmounts(\\n        CrossMarginAccount storage account,\\n        address fromToken,\\n        address toToken,\\n        uint256 soldAmount,\\n        uint256 boughtAmount\\n    ) internal {\\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\\n        addHolding(account, toToken, boughtAmount);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    struct Liquidation {\\n        uint256 buy;\\n        uint256 sell;\\n        uint256 blockNum;\\n    }\\n    mapping(address => Liquidation) liquidationAmounts;\\n    address[] sellTokens;\\n    address[] buyTokens;\\n    address[] tradersToLiquidate;\\n\\n    struct MCRecord {\\n        uint256 blockNum;\\n        address loser;\\n        uint256 amount;\\n        address stakeAttacker;\\n    }\\n    mapping(address => MCRecord) stakeAttackRecords;\\n    uint256 avgLiquidationPerBlock = 10;\\n\\n    uint256 mcAttackWindow = 5;\\n\\n    function calcLiquidationAmounts(\\n        address[] memory liquidationCandidates,\\n        bool isAuthorized\\n    ) internal returns (uint256 attackReturns) {\\n        sellTokens = new address[](0);\\n        buyTokens = new address[](0);\\n        tradersToLiquidate = new address[](0);\\n        // TODO test\\n        for (\\n            uint256 traderIndex = 0;\\n            liquidationCandidates.length > traderIndex;\\n            traderIndex++\\n        ) {\\n            address traderAddress = liquidationCandidates[traderIndex];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n            if (belowMaintenanceThreshold(account)) {\\n                // TODO optimize maybe put in the whole account?\\n                // TODO unique?\\n                tradersToLiquidate.push(traderAddress);\\n                for (\\n                    uint256 sellIdx = 0;\\n                    account.holdingTokens.length > sellIdx;\\n                    sellIdx++\\n                ) {\\n                    address token = account.holdingTokens[sellIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n                    if (liquidation.blockNum != block.number) {\\n                        // TODO delete liquidationAmounts at end of call?\\n                        liquidation.sell = account.holdings[token];\\n                        liquidation.buy = 0;\\n                        liquidation.blockNum = block.number;\\n                        sellTokens.push(token);\\n                    } else {\\n                        liquidation.sell += account.holdings[token];\\n                    }\\n                }\\n                for (\\n                    uint256 buyIdx = 0;\\n                    account.borrowTokens.length > buyIdx;\\n                    buyIdx++\\n                ) {\\n                    address token = account.borrowTokens[buyIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    uint256 yield =\\n                        Lending(lending()).viewBorrowingYield(token);\\n                    uint256 loanAmount =\\n                        (account.borrowed[token] * yield) /\\n                            account.borrowedYieldQuotientsFP[token];\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = 0;\\n                        liquidation.buy = loanAmount;\\n                        liquidation.blockNum = block.number;\\n                        buyTokens.push(token);\\n                    } else {\\n                        liquidation.buy += loanAmount;\\n                    }\\n                }\\n            }\\n\\n            MCRecord storage mcRecord = stakeAttackRecords[traderAddress];\\n            if (isAuthorized) {\\n                attackReturns += _disburseMCAttack(mcRecord);\\n            }\\n        }\\n    }\\n\\n    function _disburseMCAttack(MCRecord storage mcRecord)\\n        internal\\n        returns (uint256 returnAmount)\\n    {\\n        if (mcRecord.amount > 0) {\\n            // validate attack records, if any\\n            uint256 blockDif =\\n                min(1 + block.number - mcRecord.blockNum, mcAttackWindow);\\n            uint256 attackerCut = (blockDif * mcRecord.amount) / mcAttackWindow;\\n            Fund(fund()).withdraw(\\n                Price(price()).peg(),\\n                mcRecord.stakeAttacker,\\n                attackerCut\\n            );\\n\\n            Admin a = Admin(admin());\\n            uint256 penalty =\\n                (a.maintenanceStakePerBlock() * attackerCut) /\\n                    avgLiquidationPerBlock;\\n            a.penalizeMaintenanceStake(\\n                mcRecord.loser,\\n                penalty,\\n                mcRecord.stakeAttacker\\n            );\\n\\n            mcRecord.amount = 0;\\n            mcRecord.stakeAttacker = address(0);\\n            mcRecord.blockNum = 0;\\n            mcRecord.loser = address(0);\\n\\n            returnAmount = mcRecord.amount - attackerCut;\\n        }\\n    }\\n\\n    function disburseMCAttacks(address[] memory liquidatedAccounts) external {\\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\\n            MCRecord storage mcRecord =\\n                stakeAttackRecords[liquidatedAccounts[i]];\\n            if (block.number > mcRecord.blockNum + mcAttackWindow) {\\n                _disburseMCAttack(mcRecord);\\n            }\\n        }\\n    }\\n\\n    function liquidateFromPeg() internal returns (uint256 pegAmount) {\\n        for (uint256 tokenIdx = 0; buyTokens.length > tokenIdx; tokenIdx++) {\\n            address buyToken = buyTokens[tokenIdx];\\n            Liquidation storage liq = liquidationAmounts[buyToken];\\n            if (liq.buy > liq.sell) {\\n                pegAmount += Price(price()).liquidateToPeg(\\n                    buyToken,\\n                    liq.buy - liq.sell\\n                );\\n            }\\n        }\\n    }\\n\\n    function liquidateToPeg() internal returns (uint256 pegAmount) {\\n        for (\\n            uint256 tokenIndex = 0;\\n            sellTokens.length > tokenIndex;\\n            tokenIndex++\\n        ) {\\n            address token = sellTokens[tokenIndex];\\n            Liquidation storage liq = liquidationAmounts[token];\\n            if (liq.sell > liq.buy) {\\n                uint256 sellAmount = liq.sell - liq.buy;\\n                pegAmount += Price(price()).liquidateToPeg(token, sellAmount);\\n            }\\n        }\\n    }\\n\\n    function deleteAccount(CrossMarginAccount storage account) internal {\\n        for (\\n            uint256 borrowIdx = 0;\\n            account.borrowTokens.length > borrowIdx;\\n            borrowIdx++\\n        ) {\\n            address borrowToken = account.borrowTokens[borrowIdx];\\n            account.borrowed[borrowToken] = 0;\\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\\n        }\\n        for (\\n            uint256 holdingIdx = 0;\\n            account.holdingTokens.length > holdingIdx;\\n            holdingIdx++\\n        ) {\\n            address holdingToken = account.holdingTokens[holdingIdx];\\n            account.holdings[holdingToken] = 0;\\n            account.holdsToken[holdingToken] = false;\\n        }\\n        delete account.borrowTokens;\\n        delete account.holdingTokens;\\n    }\\n\\n    function liquidate(\\n        address[] memory liquidationCandidates,\\n        address currentCaller\\n    ) external returns (uint256 maintainerCut) {\\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\\n\\n        uint256 attackReturns2Authorized =\\n            calcLiquidationAmounts(liquidationCandidates, isAuthorized);\\n        maintainerCut += attackReturns2Authorized;\\n\\n        uint256 sale2pegAmount = liquidateToPeg();\\n        uint256 peg2targetCost = liquidateFromPeg();\\n\\n        if (peg2targetCost > sale2pegAmount) {\\n            emit LiquidationShortfall(peg2targetCost - sale2pegAmount);\\n        }\\n\\n        for (\\n            uint256 traderIdx = 0;\\n            tradersToLiquidate.length > traderIdx;\\n            traderIdx++\\n        ) {\\n            address traderAddress = tradersToLiquidate[traderIdx];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n\\n            uint256 holdingsValue = holdingsInPeg(account);\\n            uint256 borrowValue = loanInPeg(account);\\n            // 5% of value borrowed\\n            uint256 mCut4Account = borrowValue * 1000 / 50;\\n            if (isAuthorized) {\\n                maintainerCut += mCut4Account;\\n            } else {\\n                // This could theoretically lead to a previous attackers\\n                // record being overwritten, but only if the trader restarts\\n                // their account and goes back into the red within the short time window\\n                // which would be a costly attack requiring collusion without upside\\n                MCRecord storage mcRecord = stakeAttackRecords[traderAddress];\\n                mcRecord.amount = mCut4Account;\\n                mcRecord.stakeAttacker = currentCaller;\\n                mcRecord.blockNum = block.number;\\n                mcRecord.loser = Admin(admin()).getUpdatedCurrentStaker();\\n            }\\n\\n            if (holdingsValue >= mCut4Account + borrowValue) {\\n                // send remaining funds back to trader\\n                Fund(fund()).withdraw(\\n                    Price(price()).peg(),\\n                    traderAddress,\\n                    holdingsValue - borrowValue - mCut4Account\\n                );\\n            } else {\\n                uint256 shortfall =\\n                    (borrowValue + mCut4Account) - holdingsValue;\\n                emit LiquidationShortfall(shortfall);\\n            }\\n\\n            deleteAccount(account);\\n        }\\n\\n        avgLiquidationPerBlock =\\n            (avgLiquidationPerBlock * 99 + maintainerCut) /\\n            100;\\n    }\\n}\\n\",\"keccak256\":\"0xda7bd1355314c4192b54735f048470f233213107ac046bdfbb472dad1709e49b\",\"license\":\"GPL-2.0-only\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\ncontract Fund is RoleAware, Ownable {\\n    address public WETH;\\n    mapping(address => bool) public activeTokens;\\n\\n    constructor(address _WETH, address _roles) Ownable() RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    function activateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = true;\\n    }\\n\\n    function deactivateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = false;\\n    }\\n\\n    function deposit(address depositToken, uint256 depositAmount)\\n        external\\n        returns (bool)\\n    {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external returns (bool) {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        require(isWithdrawer(msg.sender), \\\"Contract not authorized to deposit\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external returns (bool) {\\n        require(\\n            isWithdrawer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        return IERC20(withdrawalToken).transfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isWithdrawer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        payable(recipient).transfer(withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x0bb5339cb309267349880a96a90781bfc988c418ef69eb1d5cf09403bc4bb3d9\",\"license\":\"GPL-2.0-only\"},\"contracts/HourlyBondSubscriptionLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct YieldAccumulator {\\n    uint256 accumulatorFP;\\n    uint256 lastUpdated;\\n    uint256 hourlyYieldFP;\\n}\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n}\\n\\n// TODO totalHourlyYieldFP\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    uint256 constant WITHDRAWAL_WINDOW = 10 minutes;\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n    mapping(address => YieldAccumulator) public hourlyBondYieldAccumulators;\\n    mapping(address => uint256) public totalHourlyBond;\\n    mapping(address => uint256) public hourlyBondBuyingSpeed;\\n    mapping(address => uint256) public hourlyBondWithdrawingSpeed;\\n    uint256 public hourlyMaxYield;\\n\\n    function _makeHourlyBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[token][holder];\\n        updateHourlyBondAmount(token, bond);\\n        bond.yieldQuotientFP = hourlyBondYieldAccumulators[token].accumulatorFP;\\n        bond.moduloHour = block.timestamp % (1 hours);\\n        bond.amount += amount;\\n        totalHourlyBond[token] += amount;\\n        totalLending[token] += amount;\\n    }\\n\\n    function updateHourlyBondAmount(address token, HourlyBond storage bond)\\n        internal\\n    {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            YieldAccumulator storage yA =\\n                getUpdatedCumulativeYield(\\n                    token,\\n                    hourlyBondYieldAccumulators,\\n                    block.timestamp\\n                );\\n\\n            uint256 oldAmount = bond.amount;\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            totalHourlyBond[token] += deltaAmount;\\n            totalLending[token] += deltaAmount;\\n            // TODO make a similar update for borrowing!\\n        }\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address token,\\n        HourlyBond storage bond,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            WITHDRAWAL_WINDOW >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        require(\\n            Fund(fund()).withdraw(token, recipient, amount),\\n            \\\"Insufficient liquidity\\\"\\n        );\\n\\n        bond.amount -= amount;\\n        totalHourlyBond[token] -= amount;\\n        totalLending[token] -= amount;\\n    }\\n\\n    function closeHourlyBondAccount(address token) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        _withdrawHourlyBond(token, bond, msg.sender, bond.amount);\\n        bond.amount = 0;\\n        bond.yieldQuotientFP = 0;\\n        bond.moduloHour = 0;\\n    }\\n\\n    function calcCumulativeYield(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // accumulator * hourly_yield == seconds_per_hour * accumulator * hourly_yield / seconds_per_hour\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            (yieldAccumulator.accumulatorFP *\\n                yieldAccumulator.hourlyYieldFP *\\n                secondsDelta) /\\n            (FP32 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            // This loop should hardly ever 1 or more unless something bad happened\\n            // In which case it costs gas but there isn't overflow\\n            for (uint256 i = 0; hoursDelta > i; i++) {\\n                // FP32 * FP32 / FP32 = FP32\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP32;\\n            }\\n        }\\n    }\\n\\n    function getUpdatedCumulativeYield(\\n        address token,\\n        mapping(address => YieldAccumulator) storage yieldAccumulators,\\n        uint256 timestamp\\n    ) internal returns (YieldAccumulator storage accumulator) {\\n        accumulator = yieldAccumulators[token];\\n        accumulator.hourlyYieldFP = updatedYieldFP(\\n            accumulator.hourlyYieldFP,\\n            accumulator.lastUpdated,\\n            totalLending[token],\\n            lendingTarget[token],\\n            hourlyBondBuyingSpeed[token],\\n            hourlyBondWithdrawingSpeed[token],\\n            hourlyMaxYield\\n        );\\n\\n        uint256 timeDelta = (timestamp - accumulator.lastUpdated);\\n        accumulator.accumulatorFP = calcCumulativeYield(accumulator, timeDelta);\\n    }\\n\\n    function viewCumulativeYield(\\n        address token,\\n        mapping(address => YieldAccumulator) storage yieldAccumulators,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yieldAccumulators[token].lastUpdated);\\n        return calcCumulativeYield(yieldAccumulators[token], timeDelta);\\n    }\\n}\\n\",\"keccak256\":\"0x4eed8f0361af2118ce1e049030bbcb6a7eb8c17791ce6238e470dba56ccc67c5\",\"license\":\"GPL-2.0-only\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    address recipient;\\n    uint256 amount;\\n}\\n\\ncontract IncentiveDistribution is RoleAware, Ownable {\\n    // fixed point number factor\\n    uint256 constant FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    uint256 constant contractionPerMil = 999;\\n    // the period for which claims are batch updated\\n    uint256 constant period = 4 hours;\\n    uint256 constant periodsPerDay = 24 hours / period;\\n    address MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n        lastDailyDistributionUpdate = block.timestamp / (1 days);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n    // last day on which we updated currentDailyDistribution\\n    uint256 lastDailyDistributionUpdate;\\n    // portion of daily distribution per each tranche\\n    mapping(uint8 => uint256) public trancheShare;\\n    uint256 public trancheShareTotal;\\n\\n    // tranche => claim totals for the period we're currently aggregating\\n    mapping(uint8 => uint256) public currentPeriodTotals;\\n    // tranche => timestamp / period of last update\\n    mapping(uint8 => uint256) public lastUpdatedPeriods;\\n\\n    // how each claim unit would get if they had staked from the dawn of time\\n    // expressed as fixed point number\\n    // claim amounts are expressed relative to this ongoing aggregate\\n    mapping(uint8 => uint256) public aggregatePeriodicRewardRateFP;\\n    // claim records\\n    mapping(uint256 => Claim) public claims;\\n    uint256 public nextClaimId = 1;\\n\\n    function setTrancheShare(uint8 tranche, uint256 share) external onlyOwner {\\n        require(\\n            lastUpdatedPeriods[tranche] > 0,\\n            \\\"Tranche is not initialized, please initialize first\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint8 tranche, uint256 share) internal {\\n        if (share > trancheShare[tranche]) {\\n            trancheShareTotal += share - trancheShare[tranche];\\n        } else {\\n            trancheShareTotal -= trancheShare[tranche] - share;\\n        }\\n        trancheShare[tranche] = share;\\n    }\\n\\n    function initTranche(uint8 tranche, uint256 share) external onlyOwner {\\n        _setTrancheShare(tranche, share);\\n\\n        lastUpdatedPeriods[tranche] = block.timestamp / period;\\n        // simply initialize to 1.0\\n        aggregatePeriodicRewardRateFP[tranche] = FP32;\\n    }\\n\\n    function updatePeriodTotals(uint8 tranche) internal {\\n        uint256 currentPeriod = block.timestamp / period;\\n\\n        // update the amount that gets distributed per day, if there has been\\n        // a day transition\\n        updateCurrentDailyDistribution();\\n        // Do a bunch of updating of periodic variables when the period changes\\n        uint256 lU = lastUpdatedPeriods[tranche];\\n        uint256 periodDiff = currentPeriod - lU;\\n\\n        if (periodDiff > 0) {\\n            aggregatePeriodicRewardRateFP[tranche] +=\\n                currentPeriodicRewardRateFP(tranche) *\\n                periodDiff;\\n        }\\n\\n        lastUpdatedPeriods[tranche] = currentPeriod;\\n    }\\n\\n    function forcePeriodTotalUpdate(uint8 tranche) external {\\n        updatePeriodTotals(tranche);\\n    }\\n\\n    function updateCurrentDailyDistribution() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastDailyDistributionUpdate;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n        }\\n        // now update this memo\\n        lastDailyDistributionUpdate = nowDay;\\n    }\\n\\n    function currentPeriodicRewardRateFP(uint8 tranche)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // scale daily distribution down to tranche share\\n        uint256 tranchePeriodDistributionFP =\\n            (FP32 * currentDailyDistribution * trancheShare[tranche]) /\\n                trancheShareTotal /\\n                periodsPerDay;\\n\\n        // rate = (total_reward / total_claims) per period\\n        return tranchePeriodDistributionFP / currentPeriodTotals[tranche];\\n    }\\n\\n    function startClaim(\\n        uint8 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external returns (uint256) {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += claimAmount;\\n\\n            claims[nextClaimId] = Claim({\\n                startingRewardRateFP: aggregatePeriodicRewardRateFP[tranche],\\n                recipient: recipient,\\n                amount: claimAmount\\n            });\\n            nextClaimId += 1;\\n            return nextClaimId - 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function addToClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 additionalAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += additionalAmount;\\n\\n            Claim storage claim = claims[claimId];\\n            require(\\n                claim.startingRewardRateFP > 0,\\n                \\\"Trying to add to non-existant claim\\\"\\n            );\\n            _withdrawReward(tranche, claim);\\n            claim.amount += additionalAmount;\\n        }\\n    }\\n\\n    function subtractFromClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n\\n        currentPeriodTotals[tranche] -= subtractAmount;\\n\\n        Claim storage claim = claims[claimId];\\n        _withdrawReward((tranche), claim);\\n        claim.amount -= subtractAmount;\\n    }\\n\\n    function endClaim(uint8 tranche, uint256 claimId) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n\\n        if (claim.startingRewardRateFP > 0) {\\n            _withdrawReward(tranche, claim);\\n            delete claim.recipient;\\n            delete claim.startingRewardRateFP;\\n            delete claim.amount;\\n        }\\n    }\\n\\n    function calcRewardAmount(uint8 tranche, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (claim.amount *\\n                (aggregatePeriodicRewardRateFP[tranche] -\\n                    claim.startingRewardRateFP)) / FP32;\\n    }\\n\\n    function viewRewardAmount(uint8 tranche, uint256 claimId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return calcRewardAmount(tranche, claims[claimId]);\\n    }\\n\\n    function withdrawReward(uint8 tranche, uint256 claimId)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n        return _withdrawReward(tranche, claim);\\n    }\\n\\n    function _withdrawReward(uint8 tranche, Claim storage claim)\\n        internal\\n        returns (uint256 rewardAmount)\\n    {\\n        rewardAmount = calcRewardAmount(tranche, claim);\\n\\n        require(\\n            Fund(fund()).withdraw(MFI, claim.recipient, rewardAmount),\\n            \\\"There seems to be a lack of MFI in the incentive fund!\\\"\\n        );\\n\\n        claim.startingRewardRateFP = aggregatePeriodicRewardRateFP[tranche];\\n    }\\n}\\n\",\"keccak256\":\"0x18fda58acf66d325873d876d87856ded2f93017a3caba64f182c76a319d9ca0c\",\"license\":\"GPL-2.0-only\"},\"contracts/IncentivizedHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\nabstract contract IncentivizedHolder is RoleAware {\\n    // here we cache incentive tranches to save on a bit of gas\\n    mapping(address => uint8) public incentiveTranches;\\n    // claimant => token => claimId\\n    mapping(address => mapping(address => uint256)) public claimIds;\\n\\n    function setIncentiveTranche(address token, uint8 tranche) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set incentive tranche\\\"\\n        );\\n        incentiveTranches[token] = tranche;\\n    }\\n\\n    function stakeClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        IncentiveDistribution iD =\\n            IncentiveDistribution(incentiveDistributor());\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        if (claimId > 0) {\\n            iD.addToClaimAmount(tranche, claimId, amount);\\n        } else {\\n            claimId = iD.startClaim(tranche, claimant, amount);\\n            claimIds[claimant][token] = claimId;\\n        }\\n    }\\n\\n    function withdrawClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\\n            tranche,\\n            claimId,\\n            amount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x28bf7f8c8df52011064375e7f633bfc009b327e736a8609aee922b1694924a86\",\"license\":\"GPL-2.0-only\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"./BondLending.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\ncontract Lending is\\n    BaseLending,\\n    HourlyBondSubscriptionLending,\\n    BondLending,\\n    IncentivizedHolder\\n{\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n    mapping(address => uint256[]) public bondIds;\\n\\n    constructor(address _roles) RoleAware(_roles) Ownable() {}\\n\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256) {\\n        YieldAccumulator storage yA =\\n            getUpdatedCumulativeYield(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n        return applyInterest(balance, yA.accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    function viewBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYield(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    function registerBorrow(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        require(Fund(fund()).activeTokens(token), \\\"Not an approved token\\\");\\n        totalBorrowed[token] += amount;\\n        require(\\n            totalLending[token] >= totalBorrowed[token],\\n            \\\"Insufficient capital to lend, try again later!\\\"\\n        );\\n    }\\n\\n    function payOff(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        totalBorrowed[token] -= amount;\\n    }\\n\\n    function viewBorrowingYield(address token) external view returns (uint256) {\\n        return\\n            viewCumulativeYield(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n    }\\n\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal override {\\n        _makeHourlyBond(token, holder, amount);\\n    }\\n\\n    function withdrawHourlyBond(address token, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        super._withdrawHourlyBond(token, bond, msg.sender, amount);\\n\\n        withdrawClaim(msg.sender, token, amount);\\n    }\\n\\n    function buyHourlyBondSubscription(address token, uint256 amount) external {\\n        if (lendingTarget[token] >= totalLending[token] + amount) {\\n            require(\\n                Fund(fund()).deposit(token, amount),\\n                \\\"Could not transfer bond deposit token to fund\\\"\\n            );\\n            super._makeHourlyBond(token, msg.sender, amount);\\n\\n            stakeClaim(msg.sender, token, amount);\\n        }\\n    }\\n\\n    function buyBond(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) external returns (uint256 bondIndex) {\\n        if (\\n            lendingTarget[token] >= totalLending[token] + amount &&\\n            maxRuntime >= runtime &&\\n            runtime >= minRuntime\\n        ) {\\n            bondIndex = super._makeBond(\\n                msg.sender,\\n                token,\\n                runtime,\\n                amount,\\n                minReturn\\n            );\\n            bondIds[msg.sender].push(bondIndex);\\n\\n            stakeClaim(msg.sender, token, amount);\\n        }\\n    }\\n\\n    function withdrawBond(uint256 bondId) external {\\n        Bond storage bond = bonds[bondId];\\n        require(msg.sender == bond.holder, \\\"Not holder of bond\\\");\\n        require(\\n            block.timestamp > bond.maturityTimestamp,\\n            \\\"bond is still immature\\\"\\n        );\\n\\n        super._withdrawBond(bond);\\n        // in case of a shortfall, governance can step in to provide\\n        // additonal compensation beyond the usual incentive which\\n        // gets withdrawn here\\n        withdrawClaim(msg.sender, bond.token, bond.originalPrice);\\n    }\\n}\\n\",\"keccak256\":\"0xac43b702822a25a865f4ac13ef95f5763567f4cfbb0930ec2ccee6f183c57417\",\"license\":\"GPL-2.0-only\"},\"contracts/MarginRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./CrossMarginTrading.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./Admin.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\n// TODO get rid of enum\\nenum AMM {uni, sushi, compare, split}\\n\\ncontract MarginRouter is RoleAware, IncentivizedHolder {\\n    mapping(AMM => address) factories;\\n    address WETH;\\n\\n    event CrossDeposit(\\n        address trader,\\n        address depositToken,\\n        uint256 depositAmount\\n    );\\n    event CrossTrade(\\n        address trader,\\n        address inToken,\\n        uint256 inTokenAmount,\\n        uint256 inTokenBorrow,\\n        address outToken,\\n        uint256 outTokenAmount,\\n        uint256 outTokenExtinguish\\n    );\\n    event CrossWithdraw(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    );\\n    event CrossBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    );\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"UniswapV2Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address uniswapFactory,\\n        address sushiswapFactory,\\n        address _WETH,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        factories[AMM.uni] = uniswapFactory;\\n        factories[AMM.sushi] = sushiswapFactory;\\n        WETH = _WETH;\\n    }\\n\\n    function crossDeposit(address depositToken, uint256 depositAmount)\\n        external\\n    {\\n        require(\\n            Fund(fund()).depositFor(msg.sender, depositToken, depositAmount),\\n            \\\"Cannot transfer deposit to margin account\\\"\\n        );\\n        uint256 extinguishAmount =\\n            CrossMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                depositToken,\\n                depositAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(depositToken, extinguishAmount);\\n            withdrawClaim(msg.sender, depositToken, extinguishAmount);\\n        }\\n        emit CrossDeposit(msg.sender, depositToken, depositAmount);\\n    }\\n\\n    function crossDepositETH() external payable {\\n        Fund(fund()).depositToWETH{value: msg.value}();\\n        uint256 extinguishAmount =\\n            CrossMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                WETH,\\n                msg.value\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(WETH, extinguishAmount);\\n            withdrawClaim(msg.sender, WETH, extinguishAmount);\\n        }\\n        emit CrossDeposit(msg.sender, WETH, msg.value);\\n    }\\n\\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\\n        external\\n    {\\n        CrossMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            withdrawToken,\\n            withdrawAmount\\n        );\\n        require(\\n            Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount),\\n            \\\"Could not withdraw from fund\\\"\\n        );\\n        emit CrossWithdraw(msg.sender, withdrawToken, withdrawAmount);\\n    }\\n\\n    function crossWithdrawETH(uint256 withdrawAmount) external {\\n        CrossMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            WETH,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\\n    }\\n\\n    function crossBorrow(address borrowToken, uint256 borrowAmount) external {\\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\\n        CrossMarginTrading(marginTrading()).registerBorrow(\\n            msg.sender,\\n            borrowToken,\\n            borrowAmount\\n        );\\n\\n        stakeClaim(msg.sender, borrowToken, borrowAmount);\\n        // TODO integrate into deposit\\n        emit CrossBorrow(msg.sender, borrowToken, borrowAmount);\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0\\n                    ? (uint256(0), amountOut)\\n                    : (amountOut, uint256(0));\\n            address to =\\n                i < path.length - 2\\n                    ? UniswapV2Library.pairFor(factory, output, path[i + 2])\\n                    : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output))\\n                .swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function _swapExactT4T(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) internal returns (uint256[] memory amounts) {\\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        require(\\n            Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            ),\\n            \\\"MarginRouter: Insufficient lending funds\\\"\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    function authorizedSwapExactT4T(\\n        AMM amm,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external returns (uint256[] memory) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        return _swapExactT4T(factories[amm], amountIn, amountOutMin, path);\\n    }\\n\\n    function _swapT4ExactT(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) internal returns (uint256[] memory amounts) {\\n        // TODO minimum trade?\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        require(\\n            Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            ),\\n            \\\"MarginRouter: Insufficient lending funds\\\"\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    function authorizedSwapT4ExactT(\\n        AMM amm,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) external returns (uint256[] memory) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        return _swapT4ExactT(factories[amm], amountOut, amountInMax, path);\\n    }\\n\\n    // deposit\\n    // borrow\\n    // auto-borrow for margin trades\\n    // auto-extinguish? yeah, why not\\n\\n    // fees from fee controller / admin\\n    // clear trade w/ margintrading\\n    // make trade\\n    // register trade w/ margintrading (register within transaction)\\n\\n    function crossSwapExactTokensForTokens(\\n        AMM amm,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).subtractTradingFees(path[0], amountIn);\\n\\n        // swap\\n        amounts = _swapExactT4T(\\n            factories[amm],\\n            amountIn - fees,\\n            amountOutMin,\\n            path\\n        );\\n\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amountIn,\\n            amounts[amounts.length - 1]\\n        );\\n    }\\n\\n    function crossSwapTokensForExactTokens(\\n        AMM amm,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).addTradingFees(\\n                path[path.length - 1],\\n                amountOut\\n            );\\n\\n        // swap\\n        amounts = _swapT4ExactT(\\n            factories[amm],\\n            amountOut + fees,\\n            amountInMax,\\n            path\\n        );\\n\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amounts[0],\\n            amountOut\\n        );\\n    }\\n\\n    function registerTrade(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        (uint256 extinguishAmount, uint256 borrowAmount) =\\n            CrossMarginTrading(marginTrading()).registerTradeAndBorrow(\\n                trader,\\n                inToken,\\n                outToken,\\n                inAmount,\\n                outAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(outToken, extinguishAmount);\\n            withdrawClaim(trader, outToken, extinguishAmount);\\n        }\\n        if (borrowAmount > 0) {\\n            Lending(lending()).registerBorrow(outToken, borrowAmount);\\n            stakeClaim(trader, inToken, borrowAmount);\\n        }\\n\\n        emit CrossTrade(\\n            trader,\\n            inToken,\\n            inAmount,\\n            borrowAmount,\\n            outToken,\\n            outAmount,\\n            extinguishAmount\\n        );\\n    }\\n\\n    function getAmountsOut(\\n        AMM amm,\\n        uint256 inAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        address factory = factories[amm];\\n        return UniswapV2Library.getAmountsOut(factory, inAmount, path);\\n    }\\n\\n    function getAmountsIn(\\n        AMM amm,\\n        uint256 outAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        address factory = factories[amm];\\n        return UniswapV2Library.getAmountsIn(factory, outAmount, path);\\n    }\\n}\\n\",\"keccak256\":\"0xbe76ba5a09e948ff03911cd26de7a7ff143738fafbd0ea6c97d94efd442a913e\",\"license\":\"GPL-2.0-only\"},\"contracts/Price.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\n\\n// Token price with rolling window\\nstruct TokenPrice {\\n    uint256 blockLastUpdated;\\n    uint256[] tokenPer1kHistory;\\n    uint256 currentPriceIndex;\\n    address[] liquidationPath;\\n    address[] inverseLiquidationPath;\\n}\\n\\ncontract Price is RoleAware, Ownable {\\n    address public peg;\\n    mapping(address => TokenPrice) tokenPrices;\\n    uint256 constant PRICE_HIST_LENGTH = 30;\\n\\n    constructor(address _peg, address _roles) RoleAware(_roles) Ownable() {\\n        peg = _peg;\\n    }\\n\\n    function getCurrentPriceInPeg(address token, uint256 inAmount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TokenPrice storage tokenPrice = tokenPrices[token];\\n        require(\\n            tokenPrice.liquidationPath.length > 1,\\n            \\\"Token does not have a liquidation path\\\"\\n        );\\n        return\\n            (inAmount * 1000 ether) /\\n            tokenPrice.tokenPer1kHistory[tokenPrice.currentPriceIndex];\\n    }\\n\\n    function getUpdatedPriceInPeg(address token, uint256 inAmount)\\n        external\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return inAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            require(\\n                tokenPrice.liquidationPath.length > 1,\\n                \\\"Token does not have a liquidation path\\\"\\n            );\\n            uint256[] memory pathAmounts =\\n                MarginRouter(router()).getAmountsOut(\\n                    AMM.uni,\\n                    inAmount,\\n                    tokenPrice.liquidationPath\\n                );\\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\\n            tokenPrice.currentPriceIndex =\\n                (tokenPrice.currentPriceIndex + 1) %\\n                tokenPrice.tokenPer1kHistory.length;\\n            tokenPrice.tokenPer1kHistory[tokenPrice.currentPriceIndex] =\\n                (1000 ether * inAmount) /\\n                outAmount;\\n            return outAmount;\\n        }\\n    }\\n\\n    // TODO rename to amounts in / out\\n    function getCostInPeg(address token, uint256 outAmount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return outAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            require(\\n                tokenPrice.inverseLiquidationPath.length > 1,\\n                \\\"Token does not have a liquidation path\\\"\\n            );\\n\\n            uint256[] memory pathAmounts =\\n                MarginRouter(router()).getAmountsIn(\\n                    AMM.uni,\\n                    outAmount,\\n                    tokenPrice.inverseLiquidationPath\\n                );\\n            uint256 inAmount = pathAmounts[0];\\n            return inAmount;\\n        }\\n    }\\n\\n    // add path from token to current liquidation peg (i.e. USDC)\\n    function setLiquidationPath(address[] memory path) external onlyOwner {\\n        // TODO\\n        // make sure paths aren't excessively long\\n        // add the inverse as well\\n    }\\n\\n    function liquidateToPeg(address token, uint256 amount)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isLiquidator(msg.sender),\\n            \\\"Calling contract is not authorized to liquidate\\\"\\n        );\\n        if (token == peg) {\\n            return amount;\\n        } else {\\n            TokenPrice memory tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapExactT4T(\\n                    AMM.uni,\\n                    amount,\\n                    0,\\n                    tP.liquidationPath\\n                );\\n            return amounts[amounts.length - 1];\\n        }\\n    }\\n\\n    function liquidateFromPeg(address token, uint256 targetAmount)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isLiquidator(msg.sender),\\n            \\\"Calling contract is not authorized to liquidate\\\"\\n        );\\n        if (token == peg) {\\n            return targetAmount;\\n        } else {\\n            TokenPrice memory tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapT4ExactT(\\n                    AMM.uni,\\n                    targetAmount,\\n                    // TODO set an actual max peg input value\\n                    0,\\n                    tP.inverseLiquidationPath\\n                );\\n            return amounts[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd181690f6288dcb1fa7ea3970af4bcd316c3eb76e74b36b5261bf8743be35db6\",\"license\":\"GPL-2.0-only\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract RoleAware {\\n    uint16 public constant WITHDRAWER = 1;\\n    uint16 public constant MARGIN_CALLER = 2;\\n    uint16 public constant BORROWER = 3;\\n    uint16 public constant MARGIN_TRADER = 4;\\n    uint16 public constant FEE_SOURCE = 5;\\n    uint16 public constant LIQUIDATOR = 6;\\n    uint16 public constant AUTHORIZED_FUND_TRADER = 7;\\n    uint16 public constant INCENTIVE_REPORTER = 8;\\n    uint16 public constant TOKEN_ACTIVATOR = 9;\\n    uint16 public constant STAKE_PENALIZER = 10;\\n\\n    uint16 public constant FUND = 101;\\n    uint16 public constant LENDING = 102;\\n    uint16 public constant ROUTER = 103;\\n    uint16 public constant MARGIN_TRADING = 104;\\n    uint16 public constant FEE_CONTROLLER = 105;\\n    uint16 public constant PRICE_CONTROLLER = 106;\\n    uint16 public constant ADMIN = 107;\\n    uint16 public constant INCENTIVE_DISTRIBUTION = 108;\\n\\n    Roles public roles;\\n    mapping(uint16 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint16 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint16 role, address contr) external {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint16 role) external {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function router() internal view returns (address) {\\n        return mainCharacterCache[ROUTER];\\n    }\\n\\n    function marginTrading() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isWithdrawer(address contr) internal view returns (bool) {\\n        return roleCache[contr][WITHDRAWER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roles.getRole(STAKE_PENALIZER, contr);\\n    }\\n}\\n\",\"keccak256\":\"0xf75bdbebcfe1a4ac92b37561c24f3258053c0dfd95aab1cd2ab87a4ae592dd6c\",\"license\":\"GPL-2.0-only\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint16 => bool)) public roles;\\n    mapping(uint16 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][9] = true;\\n    }\\n\\n    function giveRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint16 role, address actor) external onlyOwner {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint16 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n}\\n\",\"keccak256\":\"0x7437a9ae57cabebc07d13141ac137ffbc5a3ed8c68f2f7f7685608a2bd6a6847\",\"license\":\"GPL-2.0-only\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"},\"libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            bytes20(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) - 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d78664942fa3474ad9b20e71a55c0b55cf2cf8e86ecabdc7261dc1c76c95005\"}},\"version\":1}",
  "bytecode": "0x6080604052600a60105560056011553480156200001b57600080fd5b506040516200445c3803806200445c8339810160408190526200003e91620000c6565b600080546001600160a01b0319166001600160a01b03831617815562000063620000c2565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3505060146005819055600a55620000f6565b3390565b600060208284031215620000d8578081fd5b81516001600160a01b0381168114620000ef578182fd5b9392505050565b61435680620001066000396000f3fe608060405234801561001057600080fd5b50600436106102ff5760003560e01c80636612ce351161019c578063a9cc0536116100ee578063d0eb665311610097578063e0f3871f11610071578063e0f3871f14610575578063f2fde38b14610588578063f99fd97c1461059b576102ff565b8063d0eb665314610547578063d510c5351461055a578063d5d7ed7f1461056d576102ff565b8063c34316c3116100c8578063c34316c314610517578063c76139d014610537578063cacf8d451461053f576102ff565b8063a9cc0536146104e9578063b4481652146104f1578063bc44dcbc14610504576102ff565b806381ca660011610150578063a0098d691161012a578063a0098d69146104c6578063a12f5295146104ce578063a94c7c34146104e1576102ff565b806381ca6600146104ae57806383a49c7c146104b65780638da5cb5b146104be576102ff565b80636cd5cd60116101815780636cd5cd6014610480578063715018a61461049357806379575b231461049b576102ff565b80636612ce35146104655780636694198414610478576102ff565b80632febaa7411610255578063409fdb7211610209578063498d55eb116101e3578063498d55eb1461043757806352a664d91461044a5780635c275a391461045d576102ff565b8063409fdb721461040657806346b887961461042757806348fb27b81461042f576102ff565b806332fe7b261161023a57806332fe7b26146103c85780633500aa0b146103d0578063392f5f64146103f1576102ff565b80632febaa74146103b8578063320d2fa0146103c0576102ff565b80631d47e4a3116102b75780632a0acc6a116102915780632a0acc6a146103a05780632c86d98e146103a85780632fe94def146103b0576102ff565b80631d47e4a31461036757806320c271261461037a57806320e8d8191461038d576102ff565b806316317e7e116102e857806316317e7e146103425780631b669507146103575780631bc5d81d1461035f576102ff565b8063065d570f146103045780630f0f543614610322575b600080fd5b61030c6105ae565b6040516103199190614146565b60405180910390f35b610335610330366004613b47565b6105b3565b604051610319919061417f565b610355610350366004613bfc565b610aab565b005b61030c610b2c565b61030c610b31565b610355610375366004613ae1565b610b36565b6103356103883660046139d4565b610b9e565b61035561039b366004613bd1565b610bb0565b61030c610cc1565b610335610cc6565b61030c610ccc565b610335610cd1565b610335610cd7565b61030c610cdd565b6103e36103de366004613a13565b610ce2565b6040516103199291906141b4565b6103f9610ff6565b6040516103199190613c2c565b6104196104143660046139d4565b611012565b604051610319929190613cd4565b61030c611208565b61030c61120d565b610355610445366004613a6d565b611212565b610335610458366004613a6d565b6113a1565b61030c611568565b610335610473366004613a6d565b61156d565b61030c61163b565b61035561048e366004613bb7565b611640565b61035561173f565b6103556104a9366004613bfc565b611821565b61030c611899565b61030c61189e565b6103f96118a3565b61030c6118bf565b6103556104dc366004613b0c565b6118c4565b61030c61198e565b61030c611993565b6103f96104ff366004613bb7565b611998565b6103356105123660046139d4565b6119c0565b61052a610525366004613aad565b6119d2565b6040516103199190613d64565b61030c6119f2565b61030c6119f7565b610355610555366004613a6d565b6119fc565b6104196105683660046139d4565b611b7b565b61030c611df9565b6103356105833660046139d4565b611dfe565b6103556105963660046139d4565b611e10565b6103556105a9366004613bfc565b611f5e565b600381565b6000806105be611fd6565b73ffffffffffffffffffffffffffffffffffffffff16637b23cbce336040518263ffffffff1660e01b81526004016105f69190613c2c565b602060405180830381600087803b15801561061057600080fd5b505af1158015610624573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106489190613b97565b90506000610656858361201b565b905061066281846141c2565b9250600061066e612587565b9050600061067a6126e4565b9050818111156106c5577f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc6106af8383614250565b6040516106bc919061417f565b60405180910390a15b60005b600e54811015610a76576000600e828154811061070e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526006909152604082209092509061074b8261283a565b9050600061075883612854565b90506000603261076a836103e8614213565b61077491906141da565b9050891561078d57610786818c6141c2565b9a506108bf565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600f60205260409020600281018390556003810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928f16929092179091554381556107f7611fd6565b73ffffffffffffffffffffffffffffffffffffffff16631a38de1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561083e57600080fd5b505af1158015610852573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087691906139f7565b60019190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790555b6108c982826141c2565b8310610a03576108d761286a565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed126108fa6128af565b73ffffffffffffffffffffffffffffffffffffffff16631f1cb62b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097791906139f7565b87846109838789614250565b61098d9190614250565b6040518463ffffffff1660e01b81526004016109ab93929190613c4d565b602060405180830381600087803b1580156109c557600080fd5b505af11580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190613b97565b50610a55565b600083610a1083856141c2565b610a1a9190614250565b90507f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc81604051610a4b919061417f565b60405180910390a1505b610a5e846128f4565b50505050508080610a6e90614267565b9150506106c8565b506064856010546063610a899190614213565b610a9391906141c2565b610a9d91906141da565b601055509295945050505050565b610ab3612a76565b73ffffffffffffffffffffffffffffffffffffffff16610ad16118a3565b73ffffffffffffffffffffffffffffffffffffffff1614610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ffa565b60405180910390fd5b600555565b600a81565b600881565b610b3f33612a7a565b610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613d6f565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260076020526040902055565b60096020526000908152604090205481565b6000546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290610c089085908590600401614155565b60206040518083038186803b158015610c2057600080fd5b505afa158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190613b97565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020908152604080832061ffff90951683529390529190912080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b606b81565b60045481565b606981565b600a5481565b60055481565b606781565b600080610cee33612ab1565b610d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613dcc565b73ffffffffffffffffffffffffffffffffffffffff808816600090815260066020908152604080832093891683526002840190915290205415610ddc5773ffffffffffffffffffffffffffffffffffffffff86166000908152600282016020526040902054610d94908590612ae8565b9250610da1818785612b02565b73ffffffffffffffffffffffffffffffffffffffff861660009081526008602052604081208054859290610dd6908490614250565b90915550505b73ffffffffffffffffffffffffffffffffffffffff871660009081526009602052604081208054879290610e11908490614250565b90915550610e2190508385614250565b73ffffffffffffffffffffffffffffffffffffffff871660009081526009602052604081208054909190610e569084906141c2565b909155505073ffffffffffffffffffffffffffffffffffffffff86166000908152600960209081526040808320546007909252909120541015610ec5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e9061402f565b73ffffffffffffffffffffffffffffffffffffffff871660009081526005820160205260409020548590811115610fdd575073ffffffffffffffffffffffffffffffffffffffff87166000908152600582016020526040902054610f298187614250565b73ffffffffffffffffffffffffffffffffffffffff8916600090815260086020526040812080549295508592909190610f639084906141c2565b909155505073ffffffffffffffffffffffffffffffffffffffff88166000908152600860209081526040808320546007909252909120541015610fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e9061402f565b610fdd828985612c79565b610fea8289898489612f20565b50509550959350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602090815260409182902060048101805484518185028101850190955280855260609485949092919083018282801561109f57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611074575b5050506004840154929550505067ffffffffffffffff8111156110eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611114578160200160208202803683370190505b50915060005b808451111561120157600084828151811061115e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508260050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548483815181106111e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090810291909101015250806111f981614267565b91505061111a565b5050915091565b600681565b606681565b61121b33612ab1565b611251576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e906140e9565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040812080548392906112869084906141c2565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040812080548392906112c09084906141c2565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526008602090815260408083205460079092529091205410801590611335575073ffffffffffffffffffffffffffffffffffffffff821660009081526009602090815260408083205460079092529091205410155b61136b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e9061402f565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260066020526040902061139b818484612c79565b50505050565b60006113ac33612ab1565b6113e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e906140e9565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260096020526040812080548492906114179084906141c2565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600960209081526040808320546007909252909120541015611486576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e9061402f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602052604090206114b6818585612f8d565b73ffffffffffffffffffffffffffffffffffffffff841660009081526002820160205260409020541561155e5773ffffffffffffffffffffffffffffffffffffffff84166000908152600282016020526040902054611516908490612ae8565b9150611523818584612b02565b73ffffffffffffffffffffffffffffffffffffffff841660009081526008602052604081208054849290611558908490614250565b90915550505b4390559392505050565b606581565b600061157833612ab1565b6115ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ebd565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526006602090815260408083209387168352600584019091529020546115f09084614250565b91506115fd818584613032565b611633576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613e29565b509392505050565b600181565b6000546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90611696908490600401614146565b60206040518083038186803b1580156116ae57600080fd5b505afa1580156116c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e691906139f7565b61ffff91909116600090815260016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b611747612a76565b73ffffffffffffffffffffffffffffffffffffffff166117656118a3565b73ffffffffffffffffffffffffffffffffffffffff16146117b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ffa565b60035460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b611829612a76565b73ffffffffffffffffffffffffffffffffffffffff166118476118a3565b73ffffffffffffffffffffffffffffffffffffffff1614611894576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ffa565b600455565b606a81565b600981565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b600281565b60005b808251111561198a576000600f600084848151811061190f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050601154816000015461196591906141c2565b4311156119775761197581613064565b505b508061198281614267565b9150506118c7565b5050565b600581565b606881565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60086020526000908152604090205481565b600260209081526000928352604080842090915290825290205460ff1681565b606c81565b600481565b611a0533612ab1565b611a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e906140e9565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260409020600a548154611a6f91906141c2565b4311611aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613f77565b73ffffffffffffffffffffffffffffffffffffffff831660009081526009602052604081208054849290611adc908490614250565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600582016020526040902054611b14908390614250565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600583016020526040902055611b45816133c3565b61139b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613f1a565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020908152604091829020600181018054845181850281018501909552808552606094859490929190830182828015611c0857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611bdd575b5050506001840154929550505067ffffffffffffffff811115611c54577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611c7d578160200160208202803683370190505b50915060005b8084511115611201576000848281518110611cc7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611cd961340e565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260028601602090815260408083205460038901909252918290205491517f687680ed000000000000000000000000000000000000000000000000000000008152939092169263687680ed92611d52929091869190600401614188565b60206040518083038186803b158015611d6a57600080fd5b505afa158015611d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da29190613c14565b848381518110611ddb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101525080611df181614267565b915050611c83565b600781565b60076020526000908152604090205481565b611e18612a76565b73ffffffffffffffffffffffffffffffffffffffff16611e366118a3565b73ffffffffffffffffffffffffffffffffffffffff1614611e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ffa565b73ffffffffffffffffffffffffffffffffffffffff8116611ed0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613e60565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611f66612a76565b73ffffffffffffffffffffffffffffffffffffffff16611f846118a3565b73ffffffffffffffffffffffffffffffffffffffff1614611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ffa565b600a55565b606b60005260016020527fd70e245266dfd722d237312ada32b3921705992efb298b14480ba0acaaa0765a5473ffffffffffffffffffffffffffffffffffffffff1690565b60408051600080825260208201928390529051909161203d91600c9190613840565b50604080516000815260208101918290525161205b91600d91613840565b50604080516000815260208101918290525161207991600e91613840565b5060005b80845111156125805760008482815181106120c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061211781613453565b1561252957600e805460018101825560009182527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b60048201548110156123045760008260040182815481106121d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600b909152604090912060028101549192509043146122ac5773ffffffffffffffffffffffffffffffffffffffff82166000818152600586016020526040812054600180850191909155818455436002850155600c805491820181559091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790556122ef565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600585016020526040812054600183018054919290916122e99084906141c2565b90915550505b505080806122fc90614267565b91505061218c565b5060005b6001820154811015612527576000826001018281548110612352577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600b909152604082209092509061238e61340e565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1846040518263ffffffff1660e01b81526004016123c69190613c2c565b60206040518083038186803b1580156123de57600080fd5b505afa1580156123f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124169190613c14565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260038701602090815260408083205460028a01909252822054929350909161245b908490614213565b61246591906141da565b9050438360020154146124f65760006001848101829055828555436002860155600d805491820181559091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055612510565b8083600001600082825461250a91906141c2565b90915550505b50505050808061251f90614267565b915050612308565b505b73ffffffffffffffffffffffffffffffffffffffff82166000908152600f60205260409020851561256a5761255d81613064565b61256790866141c2565b94505b505050808061257890614267565b91505061207d565b5092915050565b6000805b600c548110156126e0576000600c82815481106125d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600b909152604090912080546001820154929350909111156126cb578054600182015460009161262791614250565b90506126316128af565b73ffffffffffffffffffffffffffffffffffffffff166305883f7c84836040518363ffffffff1660e01b815260040161266b929190613c7e565b602060405180830381600087803b15801561268557600080fd5b505af1158015612699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bd9190613c14565b6126c790866141c2565b9450505b505080806126d890614267565b91505061258b565b5090565b6000805b600d548110156126e0576000600d828154811061272e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600b90915260409091206001810154815492935090911115612825576127796128af565b73ffffffffffffffffffffffffffffffffffffffff166305883f7c83836001015484600001546127a99190614250565b6040518363ffffffff1660e01b81526004016127c6929190613c7e565b602060405180830381600087803b1580156127e057600080fd5b505af11580156127f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128189190613c14565b61282290856141c2565b93505b5050808061283290614267565b9150506126e8565b600061284c8260040183600501613486565b90505b919050565b600061284c8260010183600201846003016135d4565b606560005260016020527f6def5a300acb6fcaa0dab3a41e9d6457b5147a641e641380f8cc4bf5308b16fe5473ffffffffffffffffffffffffffffffffffffffff1690565b606a60005260016020527fdd2cb9885bc4a6b7d63bce617b9a4981fb4dfc6d1957489e794070560e4e930d5473ffffffffffffffffffffffffffffffffffffffff1690565b60005b6001820154811015612992576000826001018281548110612941577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168252600285018152604080832083905560038601909152812055508061298a81614267565b9150506128f7565b5060005b6004820154811015612a565760008260040182815481106129e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168252600585018152604080832083905560068601909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555080612a4e81614267565b915050612996565b50612a656001820160006138c6565b612a736004820160006138c6565b50565b3390565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206009845290915290205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206004845290915290205460ff1690565b600081831115612af9575080612afc565b50815b92915050565b612b0a61340e565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260028601602090815260408083205460038901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892612b83929091879190600401614188565b602060405180830381600087803b158015612b9d57600080fd5b505af1158015612bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd59190613c14565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002850160205260409020819055612c0a908290614250565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002850160209081526040808320939093556005860190522054612c4b908290614250565b73ffffffffffffffffffffffffffffffffffffffff9092166000908152600590930160205250604090912055565b612c83838361367c565b612d98576001838101805491820181556000908152602090200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055612ce361340e565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1836040518263ffffffff1660e01b8152600401612d1b9190613c2c565b60206040518083038186803b158015612d3357600080fd5b505afa158015612d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6b9190613c14565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600385016020526040902055612e94565b612da061340e565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260028601602090815260408083205460038901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892612e19929091879190600401614188565b602060405180830381600087803b158015612e3357600080fd5b505af1158015612e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6b9190613c14565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002850160205260409020555b73ffffffffffffffffffffffffffffffffffffffff8216600090815260028401602052604081208054839290612ecb9084906141c2565b90915550612edc9050838383612f8d565b612ee5836133c3565b612f1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e9061408c565b505050565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600586016020526040902054612f53908390614250565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600587016020526040902055612f86858483612f8d565b5050505050565b612f9783836136aa565b612ff157600483018054600181018255600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600584016020526040812080548392906130289084906141c2565b9091555050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005840160205260409020548111159392505050565b60028101546000901561284f578154600090613097906130854360016141c2565b61308f9190614250565b601154612ae8565b905060006011548460020154836130ae9190614213565b6130b891906141da565b90506130c261286a565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed126130e56128af565b73ffffffffffffffffffffffffffffffffffffffff16631f1cb62b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561312a57600080fd5b505afa15801561313e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316291906139f7565b60038701546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526131b9929173ffffffffffffffffffffffffffffffffffffffff16908690600401613c4d565b602060405180830381600087803b1580156131d357600080fd5b505af11580156131e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320b9190613b97565b506000613216611fd6565b90506000601054838373ffffffffffffffffffffffffffffffffffffffff16630ad691506040518163ffffffff1660e01b815260040160206040518083038186803b15801561326457600080fd5b505afa158015613278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329c9190613c14565b6132a69190614213565b6132b091906141da565b600187015460038801546040517f0a45bc1b00000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff80861693630a45bc1b9361331793908316928792911690600401613ca4565b602060405180830381600087803b15801561333157600080fd5b505af1158015613345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133699190613c14565b506000600287018190556003870180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915581885560018801805490911690556133b9908490614250565b9695505050505050565b6000806133cf83612854565b905060006133dc8461283a565b9050600454826133ec9190614213565b6004546133fa9060016141c2565b6134049083614213565b1015949350505050565b606660005260016020527f8a7727369fa1a496cab5c3debb1ff9323f499df74f8bfc03a975054ef960ee6d5473ffffffffffffffffffffffffffffffffffffffff1690565b60008061345f83612854565b9050600061346c8461283a565b905061347a8261044c614213565b613404826103e8614213565b6000805b83548110156125805760008482815481106134ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1690506134fa6128af565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260208790526040908190205490517fe47109a9000000000000000000000000000000000000000000000000000000008152929091169163e47109a99161356291859190600401613c7e565b602060405180830381600087803b15801561357c57600080fd5b505af1158015613590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b49190613c14565b6135be90846141c2565b92505080806135cc90614267565b91505061348a565b6000805b845481101561163357600085828154811061361c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083529087905260409091205490915061365c908290866136d9565b61366690846141c2565b925050808061367490614267565b9150506135d8565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003919091016020526040902054151590565b73ffffffffffffffffffffffffffffffffffffffff166000908152600691909101602052604090205460ff1690565b6000806136e461340e565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1866040518263ffffffff1660e01b815260040161371c9190613c2c565b60206040518083038186803b15801561373457600080fd5b505afa158015613748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376c9190613c14565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260208590526040812054919250906137a08387614213565b6137aa91906141da565b90506137b46128af565b73ffffffffffffffffffffffffffffffffffffffff1663e47109a987836040518363ffffffff1660e01b81526004016137ee929190613c7e565b602060405180830381600087803b15801561380857600080fd5b505af115801561381c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133b99190613c14565b8280548282559060005260206000209081019282156138ba579160200282015b828111156138ba57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190613860565b506126e09291506138e0565b5080546000825590600052602060002090810190612a7391905b5b808211156126e057600081556001016138e1565b803561284f816142fe565b600082601f830112613910578081fd5b8135602067ffffffffffffffff8083111561392d5761392d6142cf565b8183026040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561396f5761396f6142cf565b6040528481528381019250868401828801850189101561398d578687fd5b8692505b858310156139b6576139a2816138f5565b845292840192600192909201918401613991565b50979650505050505050565b803561ffff8116811461284f57600080fd5b6000602082840312156139e5578081fd5b81356139f0816142fe565b9392505050565b600060208284031215613a08578081fd5b81516139f0816142fe565b600080600080600060a08688031215613a2a578081fd5b8535613a35816142fe565b94506020860135613a45816142fe565b93506040860135613a55816142fe565b94979396509394606081013594506080013592915050565b600080600060608486031215613a81578283fd5b8335613a8c816142fe565b92506020840135613a9c816142fe565b929592945050506040919091013590565b60008060408385031215613abf578182fd5b8235613aca816142fe565b9150613ad8602084016139c2565b90509250929050565b60008060408385031215613af3578182fd5b8235613afe816142fe565b946020939093013593505050565b600060208284031215613b1d578081fd5b813567ffffffffffffffff811115613b33578182fd5b613b3f84828501613900565b949350505050565b60008060408385031215613b59578182fd5b823567ffffffffffffffff811115613b6f578283fd5b613b7b85828601613900565b9250506020830135613b8c816142fe565b809150509250929050565b600060208284031215613ba8578081fd5b815180151581146139f0578182fd5b600060208284031215613bc8578081fd5b6139f0826139c2565b60008060408385031215613be3578182fd5b613bec836139c2565b91506020830135613b8c816142fe565b600060208284031215613c0d578081fd5b5035919050565b600060208284031215613c25578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681526020810192909252909116604082015260600190565b604080825283519082018190526000906020906060840190828701845b82811015613d2357815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101613cf1565b50505083810382850152845180825285830191830190845b81811015613d5757835183529284019291840191600101613d3b565b5090979650505050505050565b901515815260200190565b60208082526026908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420746f6b60408201527f656e206361700000000000000000000000000000000000000000000000000000606082015260800190565b60208082526039908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e20747261646572206167656e7400000000000000606082015260800190565b60208082526018908201527f43616e277420626f72726f772066756c6c20616d6f756e740000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e2074726164657200000000000000000000000000606082015260800190565b60208082526026908201527f4163636f756e742062616c616e636520697320746f6f206c6f7720746f20776960408201527f7468647261770000000000000000000000000000000000000000000000000000606082015260800190565b60208082526052908201527f546f2070726576656e742061747461636b7320796f75206d757374207761697460408201527f20756e74696c20796f757220636f6f6c696e67206f666620706572696f64206960608201527f73206f76657220746f2077697468647261770000000000000000000000000000608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526039908201527f457863656564696e6720676c6f62616c206578706f737572652063617020746f60408201527f20746f6b656e202d2d2074727920616761696e206c6174657200000000000000606082015260800190565b60208082526022908201527f43616e277420626f72726f773a20696e73756666696369656e742062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f43616c6c696e6720636f6e7472616374206e6f7420617574686f72697a65642060408201527f746f206465706f73697400000000000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b918252602082015260400190565b600082198211156141d5576141d56142a0565b500190565b60008261420e577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561424b5761424b6142a0565b500290565b600082821015614262576142626142a0565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614299576142996142a0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612a7357600080fdfea2646970667358221220a5ee8f333518cff41431a9b13a087bdf6f138faa68a5da07f57bbca5b3a57c6064736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ff5760003560e01c80636612ce351161019c578063a9cc0536116100ee578063d0eb665311610097578063e0f3871f11610071578063e0f3871f14610575578063f2fde38b14610588578063f99fd97c1461059b576102ff565b8063d0eb665314610547578063d510c5351461055a578063d5d7ed7f1461056d576102ff565b8063c34316c3116100c8578063c34316c314610517578063c76139d014610537578063cacf8d451461053f576102ff565b8063a9cc0536146104e9578063b4481652146104f1578063bc44dcbc14610504576102ff565b806381ca660011610150578063a0098d691161012a578063a0098d69146104c6578063a12f5295146104ce578063a94c7c34146104e1576102ff565b806381ca6600146104ae57806383a49c7c146104b65780638da5cb5b146104be576102ff565b80636cd5cd60116101815780636cd5cd6014610480578063715018a61461049357806379575b231461049b576102ff565b80636612ce35146104655780636694198414610478576102ff565b80632febaa7411610255578063409fdb7211610209578063498d55eb116101e3578063498d55eb1461043757806352a664d91461044a5780635c275a391461045d576102ff565b8063409fdb721461040657806346b887961461042757806348fb27b81461042f576102ff565b806332fe7b261161023a57806332fe7b26146103c85780633500aa0b146103d0578063392f5f64146103f1576102ff565b80632febaa74146103b8578063320d2fa0146103c0576102ff565b80631d47e4a3116102b75780632a0acc6a116102915780632a0acc6a146103a05780632c86d98e146103a85780632fe94def146103b0576102ff565b80631d47e4a31461036757806320c271261461037a57806320e8d8191461038d576102ff565b806316317e7e116102e857806316317e7e146103425780631b669507146103575780631bc5d81d1461035f576102ff565b8063065d570f146103045780630f0f543614610322575b600080fd5b61030c6105ae565b6040516103199190614146565b60405180910390f35b610335610330366004613b47565b6105b3565b604051610319919061417f565b610355610350366004613bfc565b610aab565b005b61030c610b2c565b61030c610b31565b610355610375366004613ae1565b610b36565b6103356103883660046139d4565b610b9e565b61035561039b366004613bd1565b610bb0565b61030c610cc1565b610335610cc6565b61030c610ccc565b610335610cd1565b610335610cd7565b61030c610cdd565b6103e36103de366004613a13565b610ce2565b6040516103199291906141b4565b6103f9610ff6565b6040516103199190613c2c565b6104196104143660046139d4565b611012565b604051610319929190613cd4565b61030c611208565b61030c61120d565b610355610445366004613a6d565b611212565b610335610458366004613a6d565b6113a1565b61030c611568565b610335610473366004613a6d565b61156d565b61030c61163b565b61035561048e366004613bb7565b611640565b61035561173f565b6103556104a9366004613bfc565b611821565b61030c611899565b61030c61189e565b6103f96118a3565b61030c6118bf565b6103556104dc366004613b0c565b6118c4565b61030c61198e565b61030c611993565b6103f96104ff366004613bb7565b611998565b6103356105123660046139d4565b6119c0565b61052a610525366004613aad565b6119d2565b6040516103199190613d64565b61030c6119f2565b61030c6119f7565b610355610555366004613a6d565b6119fc565b6104196105683660046139d4565b611b7b565b61030c611df9565b6103356105833660046139d4565b611dfe565b6103556105963660046139d4565b611e10565b6103556105a9366004613bfc565b611f5e565b600381565b6000806105be611fd6565b73ffffffffffffffffffffffffffffffffffffffff16637b23cbce336040518263ffffffff1660e01b81526004016105f69190613c2c565b602060405180830381600087803b15801561061057600080fd5b505af1158015610624573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106489190613b97565b90506000610656858361201b565b905061066281846141c2565b9250600061066e612587565b9050600061067a6126e4565b9050818111156106c5577f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc6106af8383614250565b6040516106bc919061417f565b60405180910390a15b60005b600e54811015610a76576000600e828154811061070e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526006909152604082209092509061074b8261283a565b9050600061075883612854565b90506000603261076a836103e8614213565b61077491906141da565b9050891561078d57610786818c6141c2565b9a506108bf565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600f60205260409020600281018390556003810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928f16929092179091554381556107f7611fd6565b73ffffffffffffffffffffffffffffffffffffffff16631a38de1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561083e57600080fd5b505af1158015610852573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087691906139f7565b60019190910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790555b6108c982826141c2565b8310610a03576108d761286a565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed126108fa6128af565b73ffffffffffffffffffffffffffffffffffffffff16631f1cb62b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097791906139f7565b87846109838789614250565b61098d9190614250565b6040518463ffffffff1660e01b81526004016109ab93929190613c4d565b602060405180830381600087803b1580156109c557600080fd5b505af11580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190613b97565b50610a55565b600083610a1083856141c2565b610a1a9190614250565b90507f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc81604051610a4b919061417f565b60405180910390a1505b610a5e846128f4565b50505050508080610a6e90614267565b9150506106c8565b506064856010546063610a899190614213565b610a9391906141c2565b610a9d91906141da565b601055509295945050505050565b610ab3612a76565b73ffffffffffffffffffffffffffffffffffffffff16610ad16118a3565b73ffffffffffffffffffffffffffffffffffffffff1614610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ffa565b60405180910390fd5b600555565b600a81565b600881565b610b3f33612a7a565b610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613d6f565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260076020526040902055565b60096020526000908152604090205481565b6000546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290610c089085908590600401614155565b60206040518083038186803b158015610c2057600080fd5b505afa158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190613b97565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260026020908152604080832061ffff90951683529390529190912080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909216919091179055565b606b81565b60045481565b606981565b600a5481565b60055481565b606781565b600080610cee33612ab1565b610d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613dcc565b73ffffffffffffffffffffffffffffffffffffffff808816600090815260066020908152604080832093891683526002840190915290205415610ddc5773ffffffffffffffffffffffffffffffffffffffff86166000908152600282016020526040902054610d94908590612ae8565b9250610da1818785612b02565b73ffffffffffffffffffffffffffffffffffffffff861660009081526008602052604081208054859290610dd6908490614250565b90915550505b73ffffffffffffffffffffffffffffffffffffffff871660009081526009602052604081208054879290610e11908490614250565b90915550610e2190508385614250565b73ffffffffffffffffffffffffffffffffffffffff871660009081526009602052604081208054909190610e569084906141c2565b909155505073ffffffffffffffffffffffffffffffffffffffff86166000908152600960209081526040808320546007909252909120541015610ec5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e9061402f565b73ffffffffffffffffffffffffffffffffffffffff871660009081526005820160205260409020548590811115610fdd575073ffffffffffffffffffffffffffffffffffffffff87166000908152600582016020526040902054610f298187614250565b73ffffffffffffffffffffffffffffffffffffffff8916600090815260086020526040812080549295508592909190610f639084906141c2565b909155505073ffffffffffffffffffffffffffffffffffffffff88166000908152600860209081526040808320546007909252909120541015610fd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e9061402f565b610fdd828985612c79565b610fea8289898489612f20565b50509550959350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602090815260409182902060048101805484518185028101850190955280855260609485949092919083018282801561109f57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611074575b5050506004840154929550505067ffffffffffffffff8111156110eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611114578160200160208202803683370190505b50915060005b808451111561120157600084828151811061115e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508260050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548483815181106111e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090810291909101015250806111f981614267565b91505061111a565b5050915091565b600681565b606681565b61121b33612ab1565b611251576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e906140e9565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040812080548392906112869084906141c2565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040812080548392906112c09084906141c2565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526008602090815260408083205460079092529091205410801590611335575073ffffffffffffffffffffffffffffffffffffffff821660009081526009602090815260408083205460079092529091205410155b61136b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e9061402f565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260066020526040902061139b818484612c79565b50505050565b60006113ac33612ab1565b6113e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e906140e9565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260096020526040812080548492906114179084906141c2565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600960209081526040808320546007909252909120541015611486576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e9061402f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602052604090206114b6818585612f8d565b73ffffffffffffffffffffffffffffffffffffffff841660009081526002820160205260409020541561155e5773ffffffffffffffffffffffffffffffffffffffff84166000908152600282016020526040902054611516908490612ae8565b9150611523818584612b02565b73ffffffffffffffffffffffffffffffffffffffff841660009081526008602052604081208054849290611558908490614250565b90915550505b4390559392505050565b606581565b600061157833612ab1565b6115ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ebd565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526006602090815260408083209387168352600584019091529020546115f09084614250565b91506115fd818584613032565b611633576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613e29565b509392505050565b600181565b6000546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90611696908490600401614146565b60206040518083038186803b1580156116ae57600080fd5b505afa1580156116c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e691906139f7565b61ffff91909116600090815260016020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b611747612a76565b73ffffffffffffffffffffffffffffffffffffffff166117656118a3565b73ffffffffffffffffffffffffffffffffffffffff16146117b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ffa565b60035460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b611829612a76565b73ffffffffffffffffffffffffffffffffffffffff166118476118a3565b73ffffffffffffffffffffffffffffffffffffffff1614611894576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ffa565b600455565b606a81565b600981565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b600281565b60005b808251111561198a576000600f600084848151811061190f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050601154816000015461196591906141c2565b4311156119775761197581613064565b505b508061198281614267565b9150506118c7565b5050565b600581565b606881565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60086020526000908152604090205481565b600260209081526000928352604080842090915290825290205460ff1681565b606c81565b600481565b611a0533612ab1565b611a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e906140e9565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260409020600a548154611a6f91906141c2565b4311611aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613f77565b73ffffffffffffffffffffffffffffffffffffffff831660009081526009602052604081208054849290611adc908490614250565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600582016020526040902054611b14908390614250565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600583016020526040902055611b45816133c3565b61139b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613f1a565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020908152604091829020600181018054845181850281018501909552808552606094859490929190830182828015611c0857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611bdd575b5050506001840154929550505067ffffffffffffffff811115611c54577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611c7d578160200160208202803683370190505b50915060005b8084511115611201576000848281518110611cc7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611cd961340e565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260028601602090815260408083205460038901909252918290205491517f687680ed000000000000000000000000000000000000000000000000000000008152939092169263687680ed92611d52929091869190600401614188565b60206040518083038186803b158015611d6a57600080fd5b505afa158015611d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da29190613c14565b848381518110611ddb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101525080611df181614267565b915050611c83565b600781565b60076020526000908152604090205481565b611e18612a76565b73ffffffffffffffffffffffffffffffffffffffff16611e366118a3565b73ffffffffffffffffffffffffffffffffffffffff1614611e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ffa565b73ffffffffffffffffffffffffffffffffffffffff8116611ed0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613e60565b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611f66612a76565b73ffffffffffffffffffffffffffffffffffffffff16611f846118a3565b73ffffffffffffffffffffffffffffffffffffffff1614611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90613ffa565b600a55565b606b60005260016020527fd70e245266dfd722d237312ada32b3921705992efb298b14480ba0acaaa0765a5473ffffffffffffffffffffffffffffffffffffffff1690565b60408051600080825260208201928390529051909161203d91600c9190613840565b50604080516000815260208101918290525161205b91600d91613840565b50604080516000815260208101918290525161207991600e91613840565b5060005b80845111156125805760008482815181106120c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061211781613453565b1561252957600e805460018101825560009182527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b60048201548110156123045760008260040182815481106121d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600b909152604090912060028101549192509043146122ac5773ffffffffffffffffffffffffffffffffffffffff82166000818152600586016020526040812054600180850191909155818455436002850155600c805491820181559091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790556122ef565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600585016020526040812054600183018054919290916122e99084906141c2565b90915550505b505080806122fc90614267565b91505061218c565b5060005b6001820154811015612527576000826001018281548110612352577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600b909152604082209092509061238e61340e565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1846040518263ffffffff1660e01b81526004016123c69190613c2c565b60206040518083038186803b1580156123de57600080fd5b505afa1580156123f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124169190613c14565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260038701602090815260408083205460028a01909252822054929350909161245b908490614213565b61246591906141da565b9050438360020154146124f65760006001848101829055828555436002860155600d805491820181559091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055612510565b8083600001600082825461250a91906141c2565b90915550505b50505050808061251f90614267565b915050612308565b505b73ffffffffffffffffffffffffffffffffffffffff82166000908152600f60205260409020851561256a5761255d81613064565b61256790866141c2565b94505b505050808061257890614267565b91505061207d565b5092915050565b6000805b600c548110156126e0576000600c82815481106125d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600b909152604090912080546001820154929350909111156126cb578054600182015460009161262791614250565b90506126316128af565b73ffffffffffffffffffffffffffffffffffffffff166305883f7c84836040518363ffffffff1660e01b815260040161266b929190613c7e565b602060405180830381600087803b15801561268557600080fd5b505af1158015612699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bd9190613c14565b6126c790866141c2565b9450505b505080806126d890614267565b91505061258b565b5090565b6000805b600d548110156126e0576000600d828154811061272e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600b90915260409091206001810154815492935090911115612825576127796128af565b73ffffffffffffffffffffffffffffffffffffffff166305883f7c83836001015484600001546127a99190614250565b6040518363ffffffff1660e01b81526004016127c6929190613c7e565b602060405180830381600087803b1580156127e057600080fd5b505af11580156127f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128189190613c14565b61282290856141c2565b93505b5050808061283290614267565b9150506126e8565b600061284c8260040183600501613486565b90505b919050565b600061284c8260010183600201846003016135d4565b606560005260016020527f6def5a300acb6fcaa0dab3a41e9d6457b5147a641e641380f8cc4bf5308b16fe5473ffffffffffffffffffffffffffffffffffffffff1690565b606a60005260016020527fdd2cb9885bc4a6b7d63bce617b9a4981fb4dfc6d1957489e794070560e4e930d5473ffffffffffffffffffffffffffffffffffffffff1690565b60005b6001820154811015612992576000826001018281548110612941577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168252600285018152604080832083905560038601909152812055508061298a81614267565b9150506128f7565b5060005b6004820154811015612a565760008260040182815481106129e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168252600585018152604080832083905560068601909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555080612a4e81614267565b915050612996565b50612a656001820160006138c6565b612a736004820160006138c6565b50565b3390565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206009845290915290205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206004845290915290205460ff1690565b600081831115612af9575080612afc565b50815b92915050565b612b0a61340e565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260028601602090815260408083205460038901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892612b83929091879190600401614188565b602060405180830381600087803b158015612b9d57600080fd5b505af1158015612bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd59190613c14565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002850160205260409020819055612c0a908290614250565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002850160209081526040808320939093556005860190522054612c4b908290614250565b73ffffffffffffffffffffffffffffffffffffffff9092166000908152600590930160205250604090912055565b612c83838361367c565b612d98576001838101805491820181556000908152602090200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055612ce361340e565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1836040518263ffffffff1660e01b8152600401612d1b9190613c2c565b60206040518083038186803b158015612d3357600080fd5b505afa158015612d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6b9190613c14565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600385016020526040902055612e94565b612da061340e565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260028601602090815260408083205460038901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892612e19929091879190600401614188565b602060405180830381600087803b158015612e3357600080fd5b505af1158015612e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6b9190613c14565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002850160205260409020555b73ffffffffffffffffffffffffffffffffffffffff8216600090815260028401602052604081208054839290612ecb9084906141c2565b90915550612edc9050838383612f8d565b612ee5836133c3565b612f1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e9061408c565b505050565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600586016020526040902054612f53908390614250565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600587016020526040902055612f86858483612f8d565b5050505050565b612f9783836136aa565b612ff157600483018054600181018255600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600584016020526040812080548392906130289084906141c2565b9091555050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005840160205260409020548111159392505050565b60028101546000901561284f578154600090613097906130854360016141c2565b61308f9190614250565b601154612ae8565b905060006011548460020154836130ae9190614213565b6130b891906141da565b90506130c261286a565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed126130e56128af565b73ffffffffffffffffffffffffffffffffffffffff16631f1cb62b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561312a57600080fd5b505afa15801561313e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316291906139f7565b60038701546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526131b9929173ffffffffffffffffffffffffffffffffffffffff16908690600401613c4d565b602060405180830381600087803b1580156131d357600080fd5b505af11580156131e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320b9190613b97565b506000613216611fd6565b90506000601054838373ffffffffffffffffffffffffffffffffffffffff16630ad691506040518163ffffffff1660e01b815260040160206040518083038186803b15801561326457600080fd5b505afa158015613278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329c9190613c14565b6132a69190614213565b6132b091906141da565b600187015460038801546040517f0a45bc1b00000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff80861693630a45bc1b9361331793908316928792911690600401613ca4565b602060405180830381600087803b15801561333157600080fd5b505af1158015613345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133699190613c14565b506000600287018190556003870180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915581885560018801805490911690556133b9908490614250565b9695505050505050565b6000806133cf83612854565b905060006133dc8461283a565b9050600454826133ec9190614213565b6004546133fa9060016141c2565b6134049083614213565b1015949350505050565b606660005260016020527f8a7727369fa1a496cab5c3debb1ff9323f499df74f8bfc03a975054ef960ee6d5473ffffffffffffffffffffffffffffffffffffffff1690565b60008061345f83612854565b9050600061346c8461283a565b905061347a8261044c614213565b613404826103e8614213565b6000805b83548110156125805760008482815481106134ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1690506134fa6128af565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260208790526040908190205490517fe47109a9000000000000000000000000000000000000000000000000000000008152929091169163e47109a99161356291859190600401613c7e565b602060405180830381600087803b15801561357c57600080fd5b505af1158015613590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b49190613c14565b6135be90846141c2565b92505080806135cc90614267565b91505061348a565b6000805b845481101561163357600085828154811061361c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083529087905260409091205490915061365c908290866136d9565b61366690846141c2565b925050808061367490614267565b9150506135d8565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003919091016020526040902054151590565b73ffffffffffffffffffffffffffffffffffffffff166000908152600691909101602052604090205460ff1690565b6000806136e461340e565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1866040518263ffffffff1660e01b815260040161371c9190613c2c565b60206040518083038186803b15801561373457600080fd5b505afa158015613748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376c9190613c14565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260208590526040812054919250906137a08387614213565b6137aa91906141da565b90506137b46128af565b73ffffffffffffffffffffffffffffffffffffffff1663e47109a987836040518363ffffffff1660e01b81526004016137ee929190613c7e565b602060405180830381600087803b15801561380857600080fd5b505af115801561381c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133b99190613c14565b8280548282559060005260206000209081019282156138ba579160200282015b828111156138ba57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190613860565b506126e09291506138e0565b5080546000825590600052602060002090810190612a7391905b5b808211156126e057600081556001016138e1565b803561284f816142fe565b600082601f830112613910578081fd5b8135602067ffffffffffffffff8083111561392d5761392d6142cf565b8183026040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561396f5761396f6142cf565b6040528481528381019250868401828801850189101561398d578687fd5b8692505b858310156139b6576139a2816138f5565b845292840192600192909201918401613991565b50979650505050505050565b803561ffff8116811461284f57600080fd5b6000602082840312156139e5578081fd5b81356139f0816142fe565b9392505050565b600060208284031215613a08578081fd5b81516139f0816142fe565b600080600080600060a08688031215613a2a578081fd5b8535613a35816142fe565b94506020860135613a45816142fe565b93506040860135613a55816142fe565b94979396509394606081013594506080013592915050565b600080600060608486031215613a81578283fd5b8335613a8c816142fe565b92506020840135613a9c816142fe565b929592945050506040919091013590565b60008060408385031215613abf578182fd5b8235613aca816142fe565b9150613ad8602084016139c2565b90509250929050565b60008060408385031215613af3578182fd5b8235613afe816142fe565b946020939093013593505050565b600060208284031215613b1d578081fd5b813567ffffffffffffffff811115613b33578182fd5b613b3f84828501613900565b949350505050565b60008060408385031215613b59578182fd5b823567ffffffffffffffff811115613b6f578283fd5b613b7b85828601613900565b9250506020830135613b8c816142fe565b809150509250929050565b600060208284031215613ba8578081fd5b815180151581146139f0578182fd5b600060208284031215613bc8578081fd5b6139f0826139c2565b60008060408385031215613be3578182fd5b613bec836139c2565b91506020830135613b8c816142fe565b600060208284031215613c0d578081fd5b5035919050565b600060208284031215613c25578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681526020810192909252909116604082015260600190565b604080825283519082018190526000906020906060840190828701845b82811015613d2357815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101613cf1565b50505083810382850152845180825285830191830190845b81811015613d5757835183529284019291840191600101613d3b565b5090979650505050505050565b901515815260200190565b60208082526026908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420746f6b60408201527f656e206361700000000000000000000000000000000000000000000000000000606082015260800190565b60208082526039908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e20747261646572206167656e7400000000000000606082015260800190565b60208082526018908201527f43616e277420626f72726f772066756c6c20616d6f756e740000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e2074726164657200000000000000000000000000606082015260800190565b60208082526026908201527f4163636f756e742062616c616e636520697320746f6f206c6f7720746f20776960408201527f7468647261770000000000000000000000000000000000000000000000000000606082015260800190565b60208082526052908201527f546f2070726576656e742061747461636b7320796f75206d757374207761697460408201527f20756e74696c20796f757220636f6f6c696e67206f666620706572696f64206960608201527f73206f76657220746f2077697468647261770000000000000000000000000000608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526039908201527f457863656564696e6720676c6f62616c206578706f737572652063617020746f60408201527f20746f6b656e202d2d2074727920616761696e206c6174657200000000000000606082015260800190565b60208082526022908201527f43616e277420626f72726f773a20696e73756666696369656e742062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f43616c6c696e6720636f6e7472616374206e6f7420617574686f72697a65642060408201527f746f206465706f73697400000000000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b918252602082015260400190565b600082198211156141d5576141d56142a0565b500190565b60008261420e577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561424b5761424b6142a0565b500290565b600082821015614262576142626142a0565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614299576142996142a0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612a7357600080fdfea2646970667358221220a5ee8f333518cff41431a9b13a087bdf6f138faa68a5da07f57bbca5b3a57c6064736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9636,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "roles",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Roles)10026"
      },
      {
        "astId": 9640,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 9646,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "roleCache",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint16,t_bool))"
      },
      {
        "astId": 381,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4184,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "leverage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4186,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "liquidationThresholdPercent",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4191,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "marginAccounts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(CrossMarginAccount)4174_storage)"
      },
      {
        "astId": 4195,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "tokenCaps",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4199,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "totalShort",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4203,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "totalLong",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4205,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "coolingOffPeriod",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5352,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "liquidationAmounts",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(Liquidation)5347_storage)"
      },
      {
        "astId": 5355,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "sellTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5358,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "buyTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5361,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "tradersToLiquidate",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5375,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "stakeAttackRecords",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(MCRecord)5370_storage)"
      },
      {
        "astId": 5378,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "avgLiquidationPerBlock",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5381,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "mcAttackWindow",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Roles)10026": {
        "encoding": "inplace",
        "label": "contract Roles",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint16,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint16 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bool)"
      },
      "t_mapping(t_address,t_struct(CrossMarginAccount)4174_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(CrossMarginAccount)4174_storage"
      },
      "t_mapping(t_address,t_struct(Liquidation)5347_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginTrading.Liquidation)",
        "numberOfBytes": "32",
        "value": "t_struct(Liquidation)5347_storage"
      },
      "t_mapping(t_address,t_struct(MCRecord)5370_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginTrading.MCRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(MCRecord)5370_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(CrossMarginAccount)4174_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginAccount",
        "members": [
          {
            "astId": 4151,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "lastDepositBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4154,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4158,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowed",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4162,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowedYieldQuotientsFP",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4165,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdingTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4169,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdings",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4173,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdsToken",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Liquidation)5347_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginTrading.Liquidation",
        "members": [
          {
            "astId": 5342,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "buy",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5344,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "sell",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5346,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "blockNum",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MCRecord)5370_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginTrading.MCRecord",
        "members": [
          {
            "astId": 5363,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "blockNum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5365,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "loser",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5367,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5369,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "stakeAttacker",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}