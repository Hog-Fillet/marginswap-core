{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidationShortfall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUTHORIZED_FUND_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BORROWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_SOURCE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUND",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_DISTRIBUTION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCENTIVE_REPORTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LENDING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_CALLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_TRADING",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_CONTROLLER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_ACTIVATOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "liquidationCandidates",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "currentCaller",
          "type": "address"
        }
      ],
      "name": "callMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marginCallerCut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getBorrowAmounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "borrowTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "borrowAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getHoldingAmounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "holdingTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "holdingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getTradeBorrowAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationThresholdPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "registerBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "registerDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extinguishableDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "name": "registerTradeAndBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extinguishableDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "registerWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leverage",
          "type": "uint256"
        }
      ],
      "name": "setLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationThresholdPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "setTokenCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalLong",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalShort",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe552ffc757091cd9ec72089e8f366620e4afe469c3476b1f27a428b55485baf9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "3412986",
    "logsBloom": "0x
    "blockHash": "0x33b2a286e60f958911d7a66dbf30a4dfd635bc9b871a06ce68285301dc7b22cc",
    "transactionHash": "0xe552ffc757091cd9ec72089e8f366620e4afe469c3476b1f27a428b55485baf9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0xe552ffc757091cd9ec72089e8f366620e4afe469c3476b1f27a428b55485baf9",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x33b2a286e60f958911d7a66dbf30a4dfd635bc9b871a06ce68285301dc7b22cc"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "3412986",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x866eAFC9A8558Fb36C468ac572c72a50a1fE0FA4"
  ],
  "solcInputHash": "8bb334f16016ad7c7643d1215e32bec2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidationShortfall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORIZED_FUND_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BORROWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_SOURCE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCENTIVE_REPORTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LENDING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_CALLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_TRADING\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_CONTROLLER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ACTIVATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"liquidationCandidates\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"currentCaller\",\"type\":\"address\"}],\"name\":\"callMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marginCallerCut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getBorrowAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getHoldingAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"holdingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"holdingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTradeBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"registerBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"registerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extinguishableDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"name\":\"registerTradeAndBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extinguishableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"registerWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"}],\"name\":\"setLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setLiquidationThresholdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setTokenCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossMarginTrading.sol\":\"CrossMarginTrading\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./CrossMarginTrading.sol\\\";\\n\\nstruct MarginCallingStake {\\n    uint256 stake;\\n    address nextStaker;\\n}\\n\\ncontract Admin is RoleAware, Ownable {\\n    address MFI;\\n    mapping(address => uint256) public stakes;\\n    uint256 public totalStakes;\\n    mapping(address => uint256) public claimIds;\\n\\n    uint256 feesPer10k;\\n    mapping(address => uint256) public collectedFees;\\n\\n    uint256 public maintenanceStakePerBlock;\\n    mapping(address => MarginCallingStake) public maintenanceStakes;\\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\\n    address currentMaintenanceStaker;\\n    address prevMaintenanceStaker;\\n    uint256 currentMaintenanceStakerStartBlock;\\n\\n    // TODO initialize the above\\n\\n    constructor(\\n        uint256 _feesPer10k,\\n        address _MFI,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        feesPer10k = _feesPer10k;\\n        maintenanceStakePerBlock = 1 ether;\\n    }\\n\\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\\n        maintenanceStakePerBlock = amount;\\n    }\\n\\n    function _stake(address holder, uint256 amount) internal {\\n        require(\\n            Fund(fund()).depositFor(holder, MFI, amount),\\n            \\\"Could not deposit stake funds (perhaps make allowance to fund contract?\\\"\\n        );\\n        stakes[msg.sender] += amount;\\n        totalStakes += amount;\\n\\n        if (claimIds[holder] > 0) {\\n            IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\\n                0,\\n                claimIds[holder],\\n                amount\\n            );\\n        } else {\\n            uint256 claimId =\\n                IncentiveDistribution(incentiveDistributor()).startClaim(\\n                    0,\\n                    holder,\\n                    amount\\n                );\\n            claimIds[msg.sender] = claimId;\\n            require(claimId > 0, \\\"Distribution is over or paused\\\");\\n        }\\n    }\\n\\n    function depositStake(uint256 amount) external {\\n        _stake(msg.sender, amount);\\n    }\\n\\n    function _withdrawStake(address holder, uint256 amount) internal {\\n        uint256 stakeAmount = stakes[holder];\\n        // overflow failure desirable\\n        stakes[holder] = amount;\\n        totalStakes -= amount;\\n        require(\\n            Fund(fund()).withdraw(MFI, holder, amount),\\n            \\\"Insufficient funds -- something went really wrong.\\\"\\n        );\\n        if (stakeAmount == amount) {\\n            IncentiveDistribution(incentiveDistributor()).endClaim(\\n                0,\\n                claimIds[holder]\\n            );\\n            claimIds[holder] = 0;\\n        } else {\\n            IncentiveDistribution(incentiveDistributor())\\n                .subtractFromClaimAmount(0, claimIds[holder], amount);\\n        }\\n    }\\n\\n    function withdrawStake(uint256 amount) external {\\n        _withdrawStake(msg.sender, amount);\\n    }\\n\\n    function addTradingFees(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / 10_000;\\n        collectedFees[token] += fees;\\n    }\\n\\n    function subtractTradingFees(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / (10_000 + feesPer10k);\\n        collectedFees[token] += fees;\\n    }\\n\\n    function depositMaintenanceStake(uint256 amount) external {\\n        require(\\n            amount + maintenanceStakes[msg.sender].stake >=\\n                maintenanceStakePerBlock,\\n            \\\"Insufficient stake to call even one block\\\"\\n        );\\n        _stake(msg.sender, amount);\\n        if (maintenanceStakes[msg.sender].stake == 0) {\\n            // TODO make sure we delete from list when all is withdrawl again\\n            maintenanceStakes[msg.sender].stake = amount;\\n            maintenanceStakes[msg.sender]\\n                .nextStaker = getUpdatedCurrentStaker();\\n            maintenanceStakes[prevMaintenanceStaker].nextStaker = msg.sender;\\n        }\\n    }\\n\\n    function getUpdatedCurrentStaker() internal returns (address) {\\n        while (\\n            (block.number - currentMaintenanceStakerStartBlock) *\\n                maintenanceStakePerBlock >=\\n            maintenanceStakes[currentMaintenanceStaker].stake\\n        ) {\\n            currentMaintenanceStakerStartBlock +=\\n                maintenanceStakes[currentMaintenanceStaker].stake /\\n                maintenanceStakePerBlock;\\n            prevMaintenanceStaker = currentMaintenanceStaker;\\n            currentMaintenanceStaker = maintenanceStakes[\\n                currentMaintenanceStaker\\n            ]\\n                .nextStaker;\\n        }\\n        return currentMaintenanceStaker;\\n    }\\n\\n    function addDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = true;\\n    }\\n\\n    function removeDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = false;\\n    }\\n\\n    function isAuthorizedStaker(address caller)\\n        external\\n        returns (bool isAuthorized)\\n    {\\n        address currentStaker = getUpdatedCurrentStaker();\\n        isAuthorized =\\n            currentStaker == caller ||\\n            maintenanceDelegateTo[currentStaker][caller];\\n    }\\n}\\n\",\"keccak256\":\"0x18db401f8a06095acc9553fb3abad3fcc3b11c2afb446cd0f351035feada1a6a\",\"license\":\"GPL-2.0-only\"},\"contracts/BaseLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\nabstract contract BaseLending is RoleAware, Ownable {\\n    uint256 constant FP32 = 2**32;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    mapping(address => uint256) public totalLending;\\n    mapping(address => uint256) public totalBorrowed;\\n    // TODO init lending target with some amount out the gate\\n    mapping(address => uint256) public lendingTarget;\\n    mapping(address => uint256) public totalHourlyYieldFP;\\n    uint256 public yieldChangePerSecondFP;\\n\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    function updatedYieldFP(\\n        uint256 _yieldFP,\\n        uint256 lastUpdated,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketTarget,\\n        uint256 buying,\\n        uint256 withdrawing,\\n        uint256 bucketMaxYield\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = _yieldFP;\\n        uint256 timeDiff = block.timestamp - lastUpdated;\\n        uint256 yieldDiff = timeDiff * yieldChangePerSecondFP;\\n\\n        if (\\n            totalLendingInBucket >= bucketTarget ||\\n            // TODO is this too restrictive?\\n            (buying >= withdrawing &&\\n                buying - withdrawing >= bucketTarget - totalLendingInBucket)\\n        ) {\\n            // TODO underflow\\n            yieldFP -= yieldDiff;\\n            if (FP32 > yieldFP) {\\n                yieldFP = FP32;\\n            }\\n        } else if (\\n            bucketTarget > totalLendingInBucket &&\\n            (withdrawing > buying ||\\n                bucketTarget - totalLendingInBucket > buying - withdrawing)\\n        ) {\\n            yieldFP += yieldDiff;\\n            if (yieldFP > bucketMaxYield) {\\n                yieldFP = bucketMaxYield;\\n            }\\n        }\\n    }\\n\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xfd25ab876a6509123a782d3f2b6bab24af5b0ae501a4a9a5ec3d96de8158ad73\",\"license\":\"GPL-2.0-only\"},\"contracts/BondLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Bond {\\n    address holder;\\n    address token;\\n    uint256 originalPrice;\\n    uint256 returnAmount;\\n    uint256 maturityTimestamp;\\n    uint256 runtime;\\n    uint256 yieldFP;\\n}\\n\\nabstract contract BondLending is BaseLending {\\n    // CAUTION: minRuntime must be at least 1 hour\\n    uint256 public minRuntime;\\n    uint256 public maxRuntime;\\n    uint256 public diffMaxMinRuntime;\\n    // this is the numerator under runtimeWeights.\\n    // any excess left over is the weight of hourly bonds\\n    uint256 public weightTotal;\\n    uint256 public borrowingMarkupFP;\\n\\n    mapping(address => uint256[]) public maxYield;\\n    mapping(address => uint256[]) public runtimeWeights;\\n    mapping(address => uint256[]) public buyingSpeed;\\n    mapping(address => uint256[]) public lastBought;\\n    mapping(address => uint256[]) public withdrawingSpeed;\\n    mapping(address => uint256[]) public lastWithdrawn;\\n    mapping(address => uint256[]) public yieldLastUpdated;\\n\\n    mapping(uint256 => Bond) public bonds;\\n\\n    mapping(address => uint256[]) public totalLendingPerRuntime;\\n    mapping(address => uint256[]) runtimeYieldsFP;\\n    uint256 public nextBondIndex;\\n\\n    event LiquidityWarning(\\n        address indexed token,\\n        address indexed holder,\\n        uint256 value\\n    );\\n\\n    function buyBond(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) external returns (uint256 bondIndex) {\\n        if (\\n            lendingTarget[token] >= totalLending[token] + amount &&\\n            maxRuntime >= runtime &&\\n            runtime >= minRuntime\\n        ) {\\n            uint256 bucketIndex = getBucketIndex(token, runtime);\\n            uint256 yieldFP =\\n                calcBondYieldFP(\\n                    token,\\n                    amount + totalLendingPerRuntime[token][bucketIndex],\\n                    bucketIndex\\n                );\\n            uint256 bondReturn = (yieldFP * amount) / FP32;\\n            if (bondReturn >= minReturn) {\\n                if (Fund(fund()).depositFor(msg.sender, token, amount)) {\\n                    uint256 interpolatedAmount = (amount + bondReturn) / 2;\\n                    totalLending[token] += interpolatedAmount;\\n                    totalLendingPerRuntime[token][\\n                        bucketIndex\\n                    ] += interpolatedAmount;\\n                    // TODO overflow??\\n                    totalHourlyYieldFP[token] +=\\n                        (amount * yieldFP * (1 hours)) /\\n                        runtime;\\n                    bondIndex = nextBondIndex;\\n                    nextBondIndex++;\\n                    bonds[bondIndex] = Bond({\\n                        holder: msg.sender,\\n                        token: token,\\n                        originalPrice: amount,\\n                        returnAmount: bondReturn,\\n                        maturityTimestamp: block.timestamp + runtime,\\n                        runtime: runtime,\\n                        yieldFP: yieldFP\\n                    });\\n                    updateSpeed(\\n                        buyingSpeed[token],\\n                        lastBought[token],\\n                        bucketIndex,\\n                        amount\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function withdrawBond(uint256 bondId) external {\\n        Bond storage bond = bonds[bondId];\\n        require(msg.sender == bond.holder, \\\"Not holder of bond\\\");\\n        require(\\n            block.timestamp > bond.maturityTimestamp,\\n            \\\"bond is still immature\\\"\\n        );\\n\\n        address token = bond.token;\\n        uint256 bucketIndex = getBucketIndex(token, bond.runtime);\\n        uint256 interpolatedAmount =\\n            (bond.originalPrice + bond.returnAmount) / 2;\\n        totalLending[token] -= interpolatedAmount;\\n        totalLendingPerRuntime[token][bucketIndex] -= interpolatedAmount;\\n\\n        updateSpeed(\\n            withdrawingSpeed[token],\\n            lastWithdrawn[token],\\n            bucketIndex,\\n            bond.originalPrice\\n        );\\n\\n        if (\\n            totalBorrowed[token] > totalLending[token] ||\\n            !Fund(fund()).withdraw(token, bond.holder, bond.returnAmount)\\n        ) {\\n            // apparently there is a liquidity issue\\n            emit LiquidityWarning(token, bond.holder, bond.returnAmount);\\n            _makeFallbackBond(token, bond.holder, bond.returnAmount);\\n        }\\n    }\\n\\n    function getUpdatedBondYieldFP(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) internal returns (uint256 yieldFP, uint256 bucketIndex) {\\n        bucketIndex = getBucketIndex(token, runtime);\\n        yieldFP = calcBondYieldFP(\\n            token,\\n            amount + totalLendingPerRuntime[token][bucketIndex],\\n            bucketIndex\\n        );\\n        runtimeYieldsFP[token][bucketIndex] = yieldFP;\\n        yieldLastUpdated[token][bucketIndex] = block.timestamp;\\n    }\\n\\n    // TODO make sure yield changes can't get stuck under some circumstances\\n    function calcBondYieldFP(\\n        address token,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketIndex\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = runtimeYieldsFP[token][bucketIndex];\\n        uint256 lastUpdated = yieldLastUpdated[token][bucketIndex];\\n        uint256 bucketTarget =\\n            (lendingTarget[token] * runtimeWeights[token][bucketIndex]) /\\n                weightTotal;\\n        uint256 buying = buyingSpeed[token][bucketIndex];\\n        uint256 withdrawing = withdrawingSpeed[token][bucketIndex];\\n        uint256 bucketMaxYield = maxYield[token][bucketIndex];\\n\\n        yieldFP = updatedYieldFP(\\n            yieldFP,\\n            lastUpdated,\\n            totalLendingInBucket,\\n            bucketTarget,\\n            buying,\\n            withdrawing,\\n            bucketMaxYield\\n        );\\n    }\\n\\n    function viewBondReturn(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        return (yieldFP * amount) / FP32;\\n    }\\n\\n    function getAvgLendingYieldFP(address token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return totalHourlyYieldFP[token] / totalLending[token];\\n    }\\n\\n    function getHourlyBorrowYieldFP(address token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (getAvgLendingYieldFP(token) * borrowingMarkupFP) / FP32;\\n    }\\n\\n    function getBucketIndex(address token, uint256 runtime)\\n        internal\\n        view\\n        returns (uint256 bucketIndex)\\n    {\\n        uint256[] storage yieldsFP = runtimeYieldsFP[token];\\n        uint256 bucketSize = diffMaxMinRuntime / yieldsFP.length;\\n        bucketIndex = runtime / bucketSize;\\n    }\\n\\n    function updateSpeed(\\n        uint256[] storage speedRegister,\\n        uint256[] storage lastAction,\\n        uint256 bucketIndex,\\n        uint256 amount\\n    ) internal {\\n        uint256 bucketSize = diffMaxMinRuntime / speedRegister.length;\\n        uint256 runtime = bucketSize * bucketIndex;\\n        uint256 timeDiff = block.timestamp - lastAction[bucketIndex];\\n        uint256 currentSpeed = (amount * runtime) / timeDiff;\\n\\n        // TODO init speed with runtime\\n        speedRegister[bucketIndex] =\\n            (speedRegister[bucketIndex] * runtime + currentSpeed * timeDiff) /\\n            (runtime + timeDiff);\\n        lastAction[bucketIndex] = block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xcff6d26ccc5d4dfbfa76888c0e71a4a31d1148ee5db2a7ec14b71ba537aac15f\",\"license\":\"GPL-2.0-only\"},\"contracts/CrossMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"./Price.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\nstruct CrossMarginAccount {\\n    address[] borrowTokens;\\n    mapping(address => uint256) borrowed;\\n    mapping(address => uint256) borrowedYieldQuotientsFP;\\n    address[] holdingTokens;\\n    mapping(address => uint256) holdings;\\n    mapping(address => bool) holdsToken;\\n}\\n\\ncontract CrossMarginTrading is RoleAware, Ownable {\\n    event LiquidationShortfall(uint256 amount);\\n\\n    uint256 public leverage;\\n    uint256 public liquidationThresholdPercent;\\n    mapping(address => CrossMarginAccount) marginAccounts;\\n    mapping(address => uint256) public tokenCaps;\\n    mapping(address => uint256) public totalShort;\\n    mapping(address => uint256) public totalLong;\\n\\n    constructor(address _roles) RoleAware(_roles) Ownable() {\\n        liquidationThresholdPercent = 20;\\n    }\\n\\n    function setTokenCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set token cap\\\"\\n        );\\n        tokenCaps[token] = cap;\\n    }\\n\\n    function getHoldingAmounts(address trader)\\n        external\\n        view\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n        )\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        holdingTokens = account.holdingTokens;\\n\\n        holdingAmounts = new uint256[](account.holdingTokens.length);\\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\\n            address tokenAddress = holdingTokens[idx];\\n            holdingAmounts[idx] = account.holdings[tokenAddress];\\n        }\\n\\n        (holdingTokens, holdingAmounts);\\n    }\\n\\n    function getBorrowAmounts(address trader)\\n        external\\n        view\\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrowTokens = account.borrowTokens;\\n\\n        borrowAmounts = new uint256[](account.borrowTokens.length);\\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\\n            address tokenAddress = borrowTokens[idx];\\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\\n                account.borrowed[tokenAddress],\\n                tokenAddress,\\n                account.borrowedYieldQuotientsFP[tokenAddress]\\n            );\\n        }\\n\\n        (borrowTokens, borrowAmounts);\\n    }\\n\\n    function setLeverage(uint256 _leverage) external onlyOwner {\\n        leverage = _leverage;\\n    }\\n\\n    function setLiquidationThresholdPercent(uint256 threshold)\\n        external\\n        onlyOwner\\n    {\\n        liquidationThresholdPercent = threshold;\\n    }\\n\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 depositAmount\\n    ) external returns (uint256 extinguishableDebt) {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        totalLong[token] += depositAmount;\\n        require(\\n            tokenCaps[token] >= totalLong[token],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        addHolding(account, token, depositAmount);\\n        if (account.borrowed[token] > 0) {\\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\\n            extinguishDebt(account, token, extinguishableDebt);\\n            totalShort[token] -= extinguishableDebt;\\n        }\\n    }\\n\\n    function addHolding(\\n        CrossMarginAccount storage account,\\n        address token,\\n        uint256 depositAmount\\n    ) internal {\\n        if (!hasHoldingToken(account, token)) {\\n            account.holdingTokens.push(token);\\n        }\\n\\n        account.holdings[token] += depositAmount;\\n    }\\n\\n    function registerBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) external {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        totalShort[borrowToken] += borrowAmount;\\n        totalLong[borrowToken] += borrowAmount;\\n        require(\\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrow(account, borrowToken, borrowAmount);\\n    }\\n\\n    function borrow(\\n        CrossMarginAccount storage account,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) internal {\\n        if (!hasBorrowedToken(account, borrowToken)) {\\n            account.borrowTokens.push(borrowToken);\\n\\n            account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\\n                .viewBorrowingYield(borrowToken);\\n        } else {\\n            account.borrowed[borrowToken] = Lending(lending())\\n                .applyBorrowInterest(\\n                account.borrowed[borrowToken],\\n                borrowToken,\\n                account.borrowedYieldQuotientsFP[borrowToken]\\n            );\\n        }\\n        account.borrowed[borrowToken] += borrowAmount;\\n        addHolding(account, borrowToken, borrowAmount);\\n\\n        require(positiveBalance(account), \\\"Can't borrow: insufficient balance\\\");\\n    }\\n\\n    function registerWithdrawal(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    ) external {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n\\n        totalLong[withdrawToken] -= withdrawAmount;\\n        // throws on underflow\\n        account.holdings[withdrawToken] =\\n            account.holdings[withdrawToken] -\\n            withdrawAmount;\\n        require(\\n            positiveBalance(account),\\n            \\\"Account balance is too low to withdraw\\\"\\n        );\\n    }\\n\\n    function positiveBalance(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account);\\n        uint256 holdings = holdingsInPeg(account);\\n        // The following condition should hold:\\n        // holdings / loan >= (leverage + 1) / leverage\\n        // =>\\n        return holdings * (leverage + 1) >= loan * leverage;\\n    }\\n\\n    function extinguishDebt(\\n        CrossMarginAccount storage account,\\n        address debtToken,\\n        uint256 extinguishAmount\\n    ) internal {\\n        // will throw if insufficient funds\\n        account.borrowed[debtToken] = Lending(lending()).applyBorrowInterest(\\n            account.borrowed[debtToken],\\n            debtToken,\\n            account.borrowedYieldQuotientsFP[debtToken]\\n        );\\n        account.borrowed[debtToken] =\\n            account.borrowed[debtToken] -\\n            extinguishAmount;\\n        account.holdings[debtToken] =\\n            account.holdings[debtToken] -\\n            extinguishAmount;\\n    }\\n\\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.holdsToken[token];\\n    }\\n\\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.borrowedYieldQuotientsFP[token] > 0;\\n    }\\n\\n    function loanInPeg(CrossMarginAccount storage account)\\n        internal\\n        returns (uint256)\\n    {\\n        return\\n            sumTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP\\n            );\\n    }\\n\\n    function holdingsInPeg(CrossMarginAccount storage account)\\n        internal\\n        returns (uint256)\\n    {\\n        return sumTokensInPeg(account.holdingTokens, account.holdings);\\n    }\\n\\n    function marginCallable(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account);\\n        uint256 holdings = holdingsInPeg(account);\\n        // The following should hold:\\n        // holdings / loan >= (leverage + liquidationThresholdPercent / 100) / leverage\\n        // =>\\n        return\\n            holdings * leverage * 100 >=\\n            (100 * leverage + liquidationThresholdPercent) * loan;\\n    }\\n\\n    function canBorrow(\\n        CrossMarginAccount storage account,\\n        address token,\\n        uint256 amount\\n    ) internal view returns (bool) {\\n        return account.holdings[token] >= amount;\\n    }\\n\\n    function getTradeBorrowAmount(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 borrowAmount) {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader\\\"\\n        );\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrowAmount = amount - account.holdings[token];\\n        require(\\n            canBorrow(account, token, borrowAmount),\\n            \\\"Can't borrow full amount\\\"\\n        );\\n    }\\n\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) external returns (uint256 extinguishableDebt, uint256 borrowAmount) {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader agent\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n\\n        if (account.borrowed[tokenTo] > 0) {\\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\\n            extinguishDebt(account, tokenTo, extinguishableDebt);\\n            totalShort[tokenTo] -= extinguishableDebt;\\n        }\\n        totalLong[tokenFrom] -= inAmount;\\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\\n        require(\\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        uint256 sellAmount = inAmount;\\n        if (inAmount > account.holdings[tokenFrom]) {\\n            sellAmount = account.holdings[tokenFrom];\\n            borrowAmount = inAmount - sellAmount;\\n\\n            totalShort[tokenFrom] += borrowAmount;\\n            require(\\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\\n                \\\"Exceeding global exposure cap to token -- try again later\\\"\\n            );\\n\\n            borrow(account, tokenFrom, borrowAmount);\\n        }\\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\\n    }\\n\\n    function sumTokensInPeg(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += Price(price()).getUpdatedPriceInPeg(\\n                token,\\n                amounts[token]\\n            );\\n        }\\n    }\\n\\n    function sumTokensInPegWithYield(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += yieldTokenInPeg(\\n                token,\\n                amounts[token],\\n                yieldQuotientsFP\\n            );\\n        }\\n    }\\n\\n    function yieldTokenInPeg(\\n        address token,\\n        uint256 amount,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal returns (uint256) {\\n        uint256 yield = Lending(lending()).viewBorrowingYield(token);\\n        // 1 * FP / FP = 1\\n        uint256 amountInToken = (amount * yield) / yieldQuotientsFP[token];\\n        return Price(price()).getUpdatedPriceInPeg(token, amountInToken);\\n    }\\n\\n    function adjustAmounts(\\n        CrossMarginAccount storage account,\\n        address fromToken,\\n        address toToken,\\n        uint256 soldAmount,\\n        uint256 boughtAmount\\n    ) internal {\\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\\n        addHolding(account, toToken, boughtAmount);\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    struct Liquidation {\\n        uint256 buy;\\n        uint256 sell;\\n        uint256 blockNum;\\n    }\\n    mapping(address => Liquidation) liquidationAmounts;\\n    address[] sellTokens;\\n    address[] buyTokens;\\n    address[] tradersToLiquidate;\\n\\n    struct MCRecord {\\n        uint256 blockNum;\\n        uint256 amount;\\n        address stakeAttacker;\\n    }\\n    mapping(address => MCRecord) stakeAttackRecords;\\n\\n    uint256 mcAttackWindow = 80;\\n\\n    function calcLiquidationAmounts(\\n        address[] memory liquidationCandidates,\\n        bool isAuthorized\\n    ) internal returns (uint256 attackReturns) {\\n        sellTokens = new address[](0);\\n        buyTokens = new address[](0);\\n        tradersToLiquidate = new address[](0);\\n        // TODO test\\n        for (\\n            uint256 traderIndex = 0;\\n            liquidationCandidates.length > traderIndex;\\n            traderIndex++\\n        ) {\\n            address traderAddress = liquidationCandidates[traderIndex];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n            if (marginCallable(account)) {\\n                // TODO optimize maybe put in the whole account?\\n                // TODO unique?\\n                tradersToLiquidate.push(traderAddress);\\n                for (\\n                    uint256 sellIdx = 0;\\n                    account.holdingTokens.length > sellIdx;\\n                    sellIdx++\\n                ) {\\n                    address token = account.holdingTokens[sellIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n                    if (liquidation.blockNum != block.number) {\\n                        // TODO delete liquidationAmounts at end of call?\\n                        liquidation.sell = account.holdings[token];\\n                        liquidation.buy = 0;\\n                        liquidation.blockNum = block.number;\\n                        sellTokens.push(token);\\n                    } else {\\n                        liquidation.sell += account.holdings[token];\\n                    }\\n                }\\n                for (\\n                    uint256 buyIdx = 0;\\n                    account.borrowTokens.length > buyIdx;\\n                    buyIdx++\\n                ) {\\n                    address token = account.borrowTokens[buyIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    uint256 yield =\\n                        Lending(lending()).viewBorrowingYield(token);\\n                    uint256 loanAmount =\\n                        (account.borrowed[token] * yield) /\\n                            account.borrowedYieldQuotientsFP[token];\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = 0;\\n                        liquidation.buy = loanAmount;\\n                        liquidation.blockNum = block.number;\\n                        buyTokens.push(token);\\n                    } else {\\n                        liquidation.buy += loanAmount;\\n                    }\\n                }\\n            }\\n            MCRecord storage mcRecord = stakeAttackRecords[traderAddress];\\n            if (mcRecord.amount > 0 && isAuthorized) {\\n                // validate attack records, if any\\n                uint256 blockDif =\\n                    min(1 + block.number - mcRecord.blockNum, mcAttackWindow);\\n                uint256 attackerCut =\\n                    (blockDif * mcRecord.amount) / mcAttackWindow;\\n                Fund(fund()).withdraw(\\n                    Price(price()).peg(),\\n                    mcRecord.stakeAttacker,\\n                    attackerCut\\n                );\\n                attackReturns += mcRecord.amount - attackerCut;\\n                mcRecord.amount = 0;\\n                mcRecord.stakeAttacker = address(0);\\n                mcRecord.blockNum = 0;\\n            }\\n        }\\n    }\\n\\n    function liquidateFromPeg() internal returns (uint256 pegAmount) {\\n        for (uint256 tokenIdx = 0; buyTokens.length > tokenIdx; tokenIdx++) {\\n            address buyToken = buyTokens[tokenIdx];\\n            Liquidation storage liq = liquidationAmounts[buyToken];\\n            if (liq.buy > liq.sell) {\\n                pegAmount += Price(price()).liquidateToPeg(\\n                    buyToken,\\n                    liq.buy - liq.sell\\n                );\\n            }\\n        }\\n    }\\n\\n    function liquidateToPeg() internal returns (uint256 pegAmount) {\\n        for (\\n            uint256 tokenIndex = 0;\\n            sellTokens.length > tokenIndex;\\n            tokenIndex++\\n        ) {\\n            address token = sellTokens[tokenIndex];\\n            Liquidation storage liq = liquidationAmounts[token];\\n            if (liq.sell > liq.buy) {\\n                uint256 sellAmount = liq.sell - liq.buy;\\n                pegAmount += Price(price()).liquidateToPeg(token, sellAmount);\\n            }\\n        }\\n    }\\n\\n    function deleteAccount(CrossMarginAccount storage account) internal {\\n        for (\\n            uint256 borrowIdx = 0;\\n            account.borrowTokens.length > borrowIdx;\\n            borrowIdx++\\n        ) {\\n            address borrowToken = account.borrowTokens[borrowIdx];\\n            account.borrowed[borrowToken] = 0;\\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\\n        }\\n        for (\\n            uint256 holdingIdx = 0;\\n            account.holdingTokens.length > holdingIdx;\\n            holdingIdx++\\n        ) {\\n            address holdingToken = account.holdingTokens[holdingIdx];\\n            account.holdings[holdingToken] = 0;\\n            account.holdsToken[holdingToken] = false;\\n        }\\n        delete account.borrowTokens;\\n        delete account.holdingTokens;\\n    }\\n\\n    function callMargin(\\n        address[] memory liquidationCandidates,\\n        address currentCaller\\n    ) external returns (uint256 marginCallerCut) {\\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\\n        //(address[] memory sellTokens,\\n        //address[] memory buyTokens,\\n        // address[] memory tradersToLiquidate) =\\n        uint256 attackReturns2Authorized =\\n            calcLiquidationAmounts(liquidationCandidates, isAuthorized);\\n        marginCallerCut += attackReturns2Authorized;\\n\\n        uint256 sale2pegAmount = liquidateToPeg();\\n        uint256 peg2targetCost = liquidateFromPeg();\\n        // TODO add the mcCut to this\\n        if (peg2targetCost > sale2pegAmount) {\\n            emit LiquidationShortfall(peg2targetCost - sale2pegAmount);\\n        }\\n\\n        for (\\n            uint256 traderIdx = 0;\\n            tradersToLiquidate.length > traderIdx;\\n            traderIdx++\\n        ) {\\n            address traderAddress = tradersToLiquidate[traderIdx];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n\\n            uint256 holdingsValue = holdingsInPeg(account);\\n            uint256 borrowValue = loanInPeg(account);\\n            // half of the liquidation threshold\\n            uint256 mcCut4account =\\n                (borrowValue * liquidationThresholdPercent) /\\n                    100 /\\n                    leverage /\\n                    2;\\n            if (isAuthorized) {\\n                marginCallerCut += mcCut4account;\\n            } else {\\n                // This could theoretically lead to a previous attackers\\n                // record being overwritten, but only if the trader restarts\\n                // their account and goes back into the red within the short time window\\n                // which would be a costly attack requiring collusion without upside\\n                MCRecord storage mcRecord = stakeAttackRecords[traderAddress];\\n                mcRecord.amount = mcCut4account;\\n                mcRecord.stakeAttacker = currentCaller;\\n                mcRecord.blockNum = block.number;\\n            }\\n\\n            if (holdingsValue >= mcCut4account + borrowValue) {\\n                // send remaining funds back to trader\\n                Fund(fund()).withdraw(\\n                    Price(price()).peg(),\\n                    traderAddress,\\n                    holdingsValue - borrowValue - mcCut4account\\n                );\\n            } else {\\n                uint256 shortfall =\\n                    (borrowValue + mcCut4account) - holdingsValue;\\n                emit LiquidationShortfall(shortfall);\\n            }\\n\\n            deleteAccount(account);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa25b1ec54e71ad9d1897ac36f024499026888a0819b36e58e3a07ba2e86d25ba\",\"license\":\"GPL-2.0-only\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\ncontract Fund is RoleAware, Ownable {\\n    address public WETH;\\n    mapping(address => bool) public activeTokens;\\n\\n    constructor(address _WETH, address _roles) Ownable() RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    function activateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = true;\\n    }\\n\\n    function deactivateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = false;\\n    }\\n\\n    function deposit(address depositToken, uint256 depositAmount)\\n        external\\n        returns (bool)\\n    {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external returns (bool) {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        require(isWithdrawer(msg.sender), \\\"Contract not authorized to deposit\\\");\\n        return\\n            IERC20(depositToken).transferFrom(\\n                sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external returns (bool) {\\n        require(\\n            isWithdrawer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        return IERC20(withdrawalToken).transfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isWithdrawer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        payable(recipient).transfer(withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x0bb5339cb309267349880a96a90781bfc988c418ef69eb1d5cf09403bc4bb3d9\",\"license\":\"GPL-2.0-only\"},\"contracts/HourlyBondSubscriptionLending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct YieldAccumulator {\\n    uint256 accumulatorFP;\\n    uint256 lastUpdated;\\n    uint256 hourlyYieldFP;\\n}\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n}\\n\\n// TODO totalHourlyYieldFP\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    uint256 constant WITHDRAWAL_WINDOW = 10 minutes;\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n    mapping(address => YieldAccumulator) public hourlyBondYieldAccumulators;\\n    mapping(address => uint256) public totalHourlyBond;\\n    mapping(address => uint256) public hourlyBondBuyingSpeed;\\n    mapping(address => uint256) public hourlyBondWithdrawingSpeed;\\n    uint256 public hourlyMaxYield;\\n\\n    function buyHourlyBondSubscription(address token, uint256 amount) external {\\n        if (lendingTarget[token] >= totalLending[token] + amount) {\\n            require(\\n                Fund(fund()).deposit(token, amount),\\n                \\\"Could not transfer bond deposit token to fund\\\"\\n            );\\n            _makeHourlyBond(token, msg.sender, amount);\\n        }\\n    }\\n\\n    function _makeHourlyBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[token][holder];\\n        updateHourlyBondAmount(token, bond);\\n        bond.yieldQuotientFP = hourlyBondYieldAccumulators[token].accumulatorFP;\\n        bond.moduloHour = block.timestamp % (1 hours);\\n        bond.amount += amount;\\n        totalHourlyBond[token] += amount;\\n        totalLending[token] += amount;\\n    }\\n\\n    function updateHourlyBondAmount(address token, HourlyBond storage bond)\\n        internal\\n    {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            YieldAccumulator storage yA =\\n                getUpdatedCumulativeYield(\\n                    token,\\n                    hourlyBondYieldAccumulators,\\n                    block.timestamp\\n                );\\n\\n            uint256 oldAmount = bond.amount;\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            totalHourlyBond[token] += deltaAmount;\\n            totalLending[token] += deltaAmount;\\n            // TODO make a similar update for borrowing!\\n        }\\n    }\\n\\n    function withdrawHourlyBond(address token, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        _withdrawHourlyBond(token, bond, msg.sender, amount);\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address token,\\n        HourlyBond storage bond,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            WITHDRAWAL_WINDOW >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        require(\\n            Fund(fund()).withdraw(token, recipient, amount),\\n            \\\"Insufficient liquidity\\\"\\n        );\\n\\n        bond.amount -= amount;\\n        totalHourlyBond[token] -= amount;\\n        totalLending[token] -= amount;\\n    }\\n\\n    function closeHourlyBondAccount(address token) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        _withdrawHourlyBond(token, bond, msg.sender, bond.amount);\\n        bond.amount = 0;\\n        bond.yieldQuotientFP = 0;\\n        bond.moduloHour = 0;\\n    }\\n\\n    function calcCumulativeYield(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // accumulator * hourly_yield == seconds_per_hour * accumulator * hourly_yield / seconds_per_hour\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            (yieldAccumulator.accumulatorFP *\\n                yieldAccumulator.hourlyYieldFP *\\n                secondsDelta) /\\n            (FP32 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            // This loop should hardly ever 1 or more unless something bad happened\\n            // In which case it costs gas but there isn't overflow\\n            for (uint256 i = 0; hoursDelta > i; i++) {\\n                // FP32 * FP32 / FP32 = FP32\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP32;\\n            }\\n        }\\n    }\\n\\n    function getUpdatedCumulativeYield(\\n        address token,\\n        mapping(address => YieldAccumulator) storage yieldAccumulators,\\n        uint256 timestamp\\n    ) internal returns (YieldAccumulator storage accumulator) {\\n        accumulator = yieldAccumulators[token];\\n        accumulator.hourlyYieldFP = updatedYieldFP(\\n            accumulator.hourlyYieldFP,\\n            accumulator.lastUpdated,\\n            totalLending[token],\\n            lendingTarget[token],\\n            hourlyBondBuyingSpeed[token],\\n            hourlyBondWithdrawingSpeed[token],\\n            hourlyMaxYield\\n        );\\n\\n        uint256 timeDelta = (timestamp - accumulator.lastUpdated);\\n        accumulator.accumulatorFP = calcCumulativeYield(accumulator, timeDelta);\\n    }\\n\\n    function viewCumulativeYield(\\n        address token,\\n        mapping(address => YieldAccumulator) storage yieldAccumulators,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yieldAccumulators[token].lastUpdated);\\n        return calcCumulativeYield(yieldAccumulators[token], timeDelta);\\n    }\\n}\\n\",\"keccak256\":\"0xdd45192085a8db261f9e764a08ae0b847c3e9ffbb1eaab642ef1b4478574dd65\",\"license\":\"GPL-2.0-only\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    address recipient;\\n    uint256 amount;\\n}\\n\\ncontract IncentiveDistribution is RoleAware, Ownable {\\n    // fixed point number factor\\n    uint256 constant FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    uint256 constant contractionPerMil = 999;\\n    // the period for which claims are batch updated\\n    uint256 constant period = 4 hours;\\n    uint256 constant periodsPerDay = 24 hours / period;\\n    address MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n        lastDailyDistributionUpdate = block.timestamp / (1 days);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n    // last day on which we updated currentDailyDistribution\\n    uint256 lastDailyDistributionUpdate;\\n    // portion of daily distribution per each tranche\\n    mapping(uint8 => uint256) public trancheShare;\\n    uint256 public trancheShareTotal;\\n\\n    // tranche => claim totals for the period we're currently aggregating\\n    mapping(uint8 => uint256) public currentPeriodTotals;\\n    // tranche => timestamp / period of last update\\n    mapping(uint8 => uint256) public lastUpdatedPeriods;\\n\\n    // how each claim unit would get if they had staked from the dawn of time\\n    // expressed as fixed point number\\n    // claim amounts are expressed relative to this ongoing aggregate\\n    mapping(uint8 => uint256) public aggregatePeriodicRewardRateFP;\\n    // claim records\\n    mapping(uint256 => Claim) public claims;\\n    uint256 public nextClaimId = 1;\\n\\n    function setTrancheShare(uint8 tranche, uint256 share) external onlyOwner {\\n        require(\\n            lastUpdatedPeriods[tranche] > 0,\\n            \\\"Tranche is not initialized, please initialize first\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint8 tranche, uint256 share) internal {\\n        if (share > trancheShare[tranche]) {\\n            trancheShareTotal += share - trancheShare[tranche];\\n        } else {\\n            trancheShareTotal -= trancheShare[tranche] - share;\\n        }\\n        trancheShare[tranche] = share;\\n    }\\n\\n    function initTranche(uint8 tranche, uint256 share) external onlyOwner {\\n        _setTrancheShare(tranche, share);\\n\\n        lastUpdatedPeriods[tranche] = block.timestamp / period;\\n        // simply initialize to 1.0\\n        aggregatePeriodicRewardRateFP[tranche] = FP32;\\n    }\\n\\n    function updatePeriodTotals(uint8 tranche) internal {\\n        uint256 currentPeriod = block.timestamp / period;\\n\\n        // update the amount that gets distributed per day, if there has been\\n        // a day transition\\n        updateCurrentDailyDistribution();\\n        // Do a bunch of updating of periodic variables when the period changes\\n        uint256 lU = lastUpdatedPeriods[tranche];\\n        uint256 periodDiff = currentPeriod - lU;\\n\\n        if (periodDiff > 0) {\\n            aggregatePeriodicRewardRateFP[tranche] +=\\n                currentPeriodicRewardRateFP(tranche) *\\n                periodDiff;\\n        }\\n\\n        lastUpdatedPeriods[tranche] = currentPeriod;\\n    }\\n\\n    function forcePeriodTotalUpdate(uint8 tranche) external {\\n        updatePeriodTotals(tranche);\\n    }\\n\\n    function updateCurrentDailyDistribution() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastDailyDistributionUpdate;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n        }\\n        // now update this memo\\n        lastDailyDistributionUpdate = nowDay;\\n    }\\n\\n    function currentPeriodicRewardRateFP(uint8 tranche)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // scale daily distribution down to tranche share\\n        uint256 tranchePeriodDistributionFP =\\n            (FP32 * currentDailyDistribution * trancheShare[tranche]) /\\n                trancheShareTotal /\\n                periodsPerDay;\\n\\n        // rate = (total_reward / total_claims) per period\\n        return tranchePeriodDistributionFP / currentPeriodTotals[tranche];\\n    }\\n\\n    function startClaim(\\n        uint8 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external returns (uint256) {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += claimAmount;\\n\\n            claims[nextClaimId] = Claim({\\n                startingRewardRateFP: aggregatePeriodicRewardRateFP[tranche],\\n                recipient: recipient,\\n                amount: claimAmount\\n            });\\n            nextClaimId += 1;\\n            return nextClaimId - 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function addToClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 additionalAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += additionalAmount;\\n\\n            Claim storage claim = claims[claimId];\\n            require(\\n                claim.startingRewardRateFP > 0,\\n                \\\"Trying to add to non-existant claim\\\"\\n            );\\n            _withdrawReward(tranche, claim);\\n            claim.amount += additionalAmount;\\n        }\\n    }\\n\\n    function subtractFromClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n\\n        currentPeriodTotals[tranche] -= subtractAmount;\\n\\n        Claim storage claim = claims[claimId];\\n        _withdrawReward((tranche), claim);\\n        claim.amount -= subtractAmount;\\n    }\\n\\n    function endClaim(uint8 tranche, uint256 claimId) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n\\n        if (claim.startingRewardRateFP > 0) {\\n            _withdrawReward(tranche, claim);\\n            delete claim.recipient;\\n            delete claim.startingRewardRateFP;\\n            delete claim.amount;\\n        }\\n    }\\n\\n    function calcRewardAmount(uint8 tranche, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (claim.amount *\\n                (aggregatePeriodicRewardRateFP[tranche] -\\n                    claim.startingRewardRateFP)) / FP32;\\n    }\\n\\n    function viewRewardAmount(uint8 tranche, uint256 claimId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return calcRewardAmount(tranche, claims[claimId]);\\n    }\\n\\n    function withdrawReward(uint8 tranche, uint256 claimId)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n        return _withdrawReward(tranche, claim);\\n    }\\n\\n    function _withdrawReward(uint8 tranche, Claim storage claim)\\n        internal\\n        returns (uint256 rewardAmount)\\n    {\\n        rewardAmount = calcRewardAmount(tranche, claim);\\n\\n        require(\\n            Fund(fund()).withdraw(MFI, claim.recipient, rewardAmount),\\n            \\\"There seems to be a lack of MFI in the incentive fund!\\\"\\n        );\\n\\n        claim.startingRewardRateFP = aggregatePeriodicRewardRateFP[tranche];\\n    }\\n}\\n\",\"keccak256\":\"0x18fda58acf66d325873d876d87856ded2f93017a3caba64f182c76a319d9ca0c\",\"license\":\"GPL-2.0-only\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"./BondLending.sol\\\";\\n\\ncontract Lending is BaseLending, HourlyBondSubscriptionLending, BondLending {\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    constructor(address _roles) RoleAware(_roles) Ownable() {}\\n\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256) {\\n        YieldAccumulator storage yA =\\n            getUpdatedCumulativeYield(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n        return applyInterest(balance, yA.accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    function viewBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYield(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    function registerBorrow(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        require(Fund(fund()).activeTokens(token), \\\"Not an approved token\\\");\\n        totalBorrowed[token] += amount;\\n        require(\\n            totalLending[token] >= totalBorrowed[token],\\n            \\\"Insufficient capital to lend, try again later!\\\"\\n        );\\n    }\\n\\n    function payOff(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        totalBorrowed[token] -= amount;\\n    }\\n\\n    function viewBorrowingYield(address token) external view returns (uint256) {\\n        return\\n            viewCumulativeYield(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n    }\\n\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal override {\\n        _makeHourlyBond(token, holder, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4c8328ed53fa7784948b1b2074ba1beaacb621e3cd0c84b1a77e79e95371410f\",\"license\":\"GPL-2.0-only\"},\"contracts/MarginRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./CrossMarginTrading.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./Admin.sol\\\";\\n\\nenum AMM {uni, sushi, compare, split}\\n\\ncontract MarginRouter is RoleAware {\\n    mapping(AMM => address) factories;\\n    address WETH;\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"UniswapV2Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address uniswapFactory,\\n        address sushiswapFactory,\\n        address _WETH,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        factories[AMM.uni] = uniswapFactory;\\n        factories[AMM.sushi] = sushiswapFactory;\\n        WETH = _WETH;\\n    }\\n\\n    function crossDeposit(address depositToken, uint256 depositAmount)\\n        external\\n        noIntermediary\\n    {\\n        require(\\n            Fund(fund()).depositFor(msg.sender, depositToken, depositAmount),\\n            \\\"Cannot transfer deposit to margin account\\\"\\n        );\\n        uint256 extinguishAmount =\\n            CrossMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                depositToken,\\n                depositAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(depositToken, extinguishAmount);\\n        }\\n    }\\n\\n    function crossDepositETH() external payable noIntermediary {\\n        Fund(fund()).depositToWETH{value: msg.value}();\\n        uint256 extinguishAmount =\\n            CrossMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                WETH,\\n                msg.value\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(WETH, extinguishAmount);\\n        }\\n    }\\n\\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\\n        external\\n        noIntermediary\\n    {\\n        CrossMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            withdrawToken,\\n            withdrawAmount\\n        );\\n        require(\\n            Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount),\\n            \\\"Could not withdraw from fund\\\"\\n        );\\n    }\\n\\n    function crossWithdrawETH(uint256 withdrawAmount) external noIntermediary {\\n        CrossMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            WETH,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\\n    }\\n\\n    function crossBorrow(address borrowToken, uint256 borrowAmount)\\n        external\\n        noIntermediary\\n    {\\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\\n        CrossMarginTrading(marginTrading()).registerBorrow(\\n            msg.sender,\\n            borrowToken,\\n            borrowAmount\\n        );\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0\\n                    ? (uint256(0), amountOut)\\n                    : (amountOut, uint256(0));\\n            address to =\\n                i < path.length - 2\\n                    ? UniswapV2Library.pairFor(factory, output, path[i + 2])\\n                    : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output))\\n                .swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    function _swapExactT4T(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) internal returns (uint256[] memory amounts) {\\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        require(\\n            Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            ),\\n            \\\"MarginRouter: Insufficient lending funds\\\"\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    function authorizedSwapExactT4T(\\n        AMM amm,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external returns (uint256[] memory) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        return _swapExactT4T(factories[amm], amountIn, amountOutMin, path);\\n    }\\n\\n    function _swapT4ExactT(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) internal returns (uint256[] memory amounts) {\\n        // TODO minimum trade?\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        require(\\n            Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n            ),\\n            \\\"MarginRouter: Insufficient lending funds\\\"\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    function authorizedSwapT4ExactT(\\n        AMM amm,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) external returns (uint256[] memory) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        return _swapT4ExactT(factories[amm], amountOut, amountInMax, path);\\n    }\\n\\n    // deposit\\n    // borrow\\n    // auto-borrow for margin trades\\n    // auto-extinguish? yeah, why not\\n\\n    // fees from fee controller / admin\\n    // clear trade w/ margintrading\\n    // make trade\\n    // register trade w/ margintrading (register within transaction)\\n\\n    function crossSwapExactTokensForTokens(\\n        AMM amm,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    )\\n        external\\n        noIntermediary\\n        ensure(deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).subtractTradingFees(path[0], amountIn);\\n\\n        // swap\\n        amounts = _swapExactT4T(\\n            factories[amm],\\n            amountIn - fees,\\n            amountOutMin,\\n            path\\n        );\\n\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amountIn,\\n            amounts[amounts.length - 1]\\n        );\\n    }\\n\\n    function crossSwapTokensForExactTokens(\\n        AMM amm,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    )\\n        external\\n        noIntermediary\\n        ensure(deadline)\\n        returns (uint256[] memory amounts)\\n    {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).addTradingFees(\\n                path[path.length - 1],\\n                amountOut\\n            );\\n\\n        // swap\\n        amounts = _swapT4ExactT(\\n            factories[amm],\\n            amountOut + fees,\\n            amountInMax,\\n            path\\n        );\\n\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amounts[0],\\n            amountOut\\n        );\\n    }\\n\\n    function registerTrade(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        (uint256 extinguishAmount, uint256 borrowAmount) =\\n            CrossMarginTrading(marginTrading()).registerTradeAndBorrow(\\n                trader,\\n                inToken,\\n                outToken,\\n                inAmount,\\n                outAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(outToken, extinguishAmount);\\n        }\\n        if (borrowAmount > 0) {\\n            Lending(lending()).registerBorrow(outToken, borrowAmount);\\n        }\\n    }\\n\\n    function getAmountsOut(\\n        AMM amm,\\n        uint256 inAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        address factory = factories[amm];\\n        return UniswapV2Library.getAmountsOut(factory, inAmount, path);\\n    }\\n\\n    function getAmountsIn(\\n        AMM amm,\\n        uint256 outAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        address factory = factories[amm];\\n        return UniswapV2Library.getAmountsIn(factory, outAmount, path);\\n    }\\n}\\n\\n// TODO use cached prices or borrow and write prices before registering trade\\n\",\"keccak256\":\"0x96b04cd1eb125f886c0019b83445ecefe4f0c05dee1b2c67a9ffd40428973ad7\",\"license\":\"GPL-2.0-only\"},\"contracts/Price.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\n\\n// Token price with rolling window\\nstruct TokenPrice {\\n    uint256 blockLastUpdated;\\n    uint256[] tokenPer1kHistory;\\n    uint256 currentPriceIndex;\\n    address[] liquidationPath;\\n    address[] inverseLiquidationPath;\\n}\\n\\ncontract Price is RoleAware, Ownable {\\n    address public peg;\\n    mapping(address => TokenPrice) tokenPrices;\\n    uint256 constant PRICE_HIST_LENGTH = 30;\\n\\n    constructor(address _peg, address _roles) RoleAware(_roles) Ownable() {\\n        peg = _peg;\\n    }\\n\\n    function getCurrentPriceInPeg(address token, uint256 inAmount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TokenPrice storage tokenPrice = tokenPrices[token];\\n        require(\\n            tokenPrice.liquidationPath.length > 1,\\n            \\\"Token does not have a liquidation path\\\"\\n        );\\n        return\\n            (inAmount * 1000 ether) /\\n            tokenPrice.tokenPer1kHistory[tokenPrice.currentPriceIndex];\\n    }\\n\\n    function getUpdatedPriceInPeg(address token, uint256 inAmount)\\n        external\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return inAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            require(\\n                tokenPrice.liquidationPath.length > 1,\\n                \\\"Token does not have a liquidation path\\\"\\n            );\\n            uint256[] memory pathAmounts =\\n                MarginRouter(router()).getAmountsOut(\\n                    AMM.uni,\\n                    inAmount,\\n                    tokenPrice.liquidationPath\\n                );\\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\\n            tokenPrice.currentPriceIndex =\\n                (tokenPrice.currentPriceIndex + 1) %\\n                tokenPrice.tokenPer1kHistory.length;\\n            tokenPrice.tokenPer1kHistory[tokenPrice.currentPriceIndex] =\\n                (1000 ether * inAmount) /\\n                outAmount;\\n            return outAmount;\\n        }\\n    }\\n\\n    // TODO rename to amounts in / out\\n    function getCostInPeg(address token, uint256 outAmount)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return outAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            require(\\n                tokenPrice.inverseLiquidationPath.length > 1,\\n                \\\"Token does not have a liquidation path\\\"\\n            );\\n\\n            uint256[] memory pathAmounts =\\n                MarginRouter(router()).getAmountsIn(\\n                    AMM.uni,\\n                    outAmount,\\n                    tokenPrice.inverseLiquidationPath\\n                );\\n            uint256 inAmount = pathAmounts[0];\\n            return inAmount;\\n        }\\n    }\\n\\n    // add path from token to current liquidation peg (i.e. USDC)\\n    function setLiquidationPath(address[] memory path) external onlyOwner {\\n        // TODO\\n        // make sure paths aren't excessively long\\n        // add the inverse as well\\n    }\\n\\n    function liquidateToPeg(address token, uint256 amount)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isLiquidator(msg.sender),\\n            \\\"Calling contract is not authorized to liquidate\\\"\\n        );\\n        if (token == peg) {\\n            return amount;\\n        } else {\\n            TokenPrice memory tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapExactT4T(\\n                    AMM.uni,\\n                    amount,\\n                    0,\\n                    tP.liquidationPath\\n                );\\n            return amounts[amounts.length - 1];\\n        }\\n    }\\n\\n    function liquidateFromPeg(address token, uint256 targetAmount)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isLiquidator(msg.sender),\\n            \\\"Calling contract is not authorized to liquidate\\\"\\n        );\\n        if (token == peg) {\\n            return targetAmount;\\n        } else {\\n            TokenPrice memory tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapT4ExactT(\\n                    AMM.uni,\\n                    targetAmount,\\n                    // TODO set an actual max peg input value\\n                    0,\\n                    tP.inverseLiquidationPath\\n                );\\n            return amounts[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd181690f6288dcb1fa7ea3970af4bcd316c3eb76e74b36b5261bf8743be35db6\",\"license\":\"GPL-2.0-only\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract RoleAware {\\n    uint16 public constant WITHDRAWER = 1;\\n    uint16 public constant MARGIN_CALLER = 2;\\n    uint16 public constant BORROWER = 3;\\n    uint16 public constant MARGIN_TRADER = 4;\\n    uint16 public constant FEE_SOURCE = 5;\\n    uint16 public constant LIQUIDATOR = 6;\\n    uint16 public constant AUTHORIZED_FUND_TRADER = 7;\\n    uint16 public constant INCENTIVE_REPORTER = 8;\\n    uint16 public constant TOKEN_ACTIVATOR = 9;\\n\\n    uint16 public constant FUND = 101;\\n    uint16 public constant LENDING = 102;\\n    uint16 public constant ROUTER = 103;\\n    uint16 public constant MARGIN_TRADING = 104;\\n    uint16 public constant FEE_CONTROLLER = 105;\\n    uint16 public constant PRICE_CONTROLLER = 106;\\n    uint16 public constant ADMIN = 107;\\n    uint16 public constant INCENTIVE_DISTRIBUTION = 108;\\n\\n    Roles public roles;\\n\\n    constructor(address _roles) {\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return roles.mainCharacters(FUND);\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return roles.mainCharacters(LENDING);\\n    }\\n\\n    function router() internal view returns (address) {\\n        return roles.mainCharacters(ROUTER);\\n    }\\n\\n    function marginTrading() internal view returns (address) {\\n        return roles.mainCharacters(MARGIN_TRADING);\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return roles.mainCharacters(FEE_CONTROLLER);\\n    }\\n\\n    function price() internal view returns (address) {\\n        return roles.mainCharacters(PRICE_CONTROLLER);\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return roles.mainCharacters(ADMIN);\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return roles.mainCharacters(INCENTIVE_DISTRIBUTION);\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roles.getRole(BORROWER, contr);\\n    }\\n\\n    function isWithdrawer(address contr) internal view returns (bool) {\\n        return roles.getRole(WITHDRAWER, contr);\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roles.getRole(MARGIN_TRADER, contr);\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roles.getRole(FEE_SOURCE, contr);\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roles.getRole(MARGIN_CALLER, contr);\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roles.getRole(LIQUIDATOR, contr);\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roles.getRole(AUTHORIZED_FUND_TRADER, contr);\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roles.getRole(INCENTIVE_REPORTER, contr);\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roles.getRole(TOKEN_ACTIVATOR, contr);\\n    }\\n}\\n\",\"keccak256\":\"0x933fb92e5d0a05c1152f74fe81e1467db81a51f7a382f82112a5887111340900\",\"license\":\"GPL-2.0-only\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint16 => bool)) public roles;\\n    mapping(uint16 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][9] = true;\\n    }\\n\\n    function giveRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint16 role, address actor) external onlyOwner {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint16 role, address actor) external onlyOwner {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint16 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n}\\n\",\"keccak256\":\"0x7437a9ae57cabebc07d13141ac137ffbc5a3ed8c68f2f7f7685608a2bd6a6847\",\"license\":\"GPL-2.0-only\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"},\"libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            bytes20(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) - 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d78664942fa3474ad9b20e71a55c0b55cf2cf8e86ecabdc7261dc1c76c95005\"}},\"version\":1}",
  "bytecode": "0x60806040526050600d553480156200001657600080fd5b5060405162003c8938038062003c898339810160408190526200003991620000bc565b600080546001600160a01b0319166001600160a01b0383161781556200005e620000b8565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350506014600355620000ec565b3390565b600060208284031215620000ce578081fd5b81516001600160a01b0381168114620000e5578182fd5b9392505050565b613b8d80620000fc6000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c80635c275a3911610160578063a94c7c34116100d8578063d0eb66531161008c578063d5d7ed7f11610071578063d5d7ed7f14610469578063e0f3871f14610471578063f2fde38b1461048457610277565b8063d0eb665314610443578063d510c5351461045657610277565b8063bc44dcbc116100bd578063bc44dcbc14610420578063c76139d014610433578063cacf8d451461043b57610277565b8063a94c7c3414610410578063a9cc05361461041857610277565b806379575b231161012f57806383a49c7c1161011457806383a49c7c146103f85780638da5cb5b14610400578063a0098d691461040857610277565b806379575b23146103dd57806381ca6600146103f057610277565b80635c275a39146103b25780636612ce35146103ba57806366941984146103cd578063715018a6146103d557610277565b806332fe7b26116101f3578063409fdb72116101c257806348fb27b8116101a757806348fb27b814610384578063498d55eb1461038c57806352a664d91461039f57610277565b8063409fdb721461035b57806346b887961461037c57610277565b806332fe7b261461030a5780633500aa0b14610312578063387ccdc614610333578063392f5f641461034657610277565b806320c271261161024a5780632c86d98e1161022f5780632c86d98e146102f25780632fe94def146102fa578063320d2fa01461030257610277565b806320c27126146102ca5780632a0acc6a146102ea57610277565b8063065d570f1461027c57806316317e7e1461029a5780631bc5d81d146102af5780631d47e4a3146102b7575b600080fd5b610284610497565b604051610291919061397d565b60405180910390f35b6102ad6102a83660046134f1565b61049c565b005b61028461051d565b6102ad6102c53660046133b0565b610522565b6102dd6102d83660046132d7565b61058a565b60405161029191906139b6565b61028461059c565b6102dd6105a1565b6102846105a7565b6102dd6105ac565b6102846105b2565b610325610320366004613316565b6105b7565b6040516102919291906139eb565b6102dd6103413660046133db565b6108cb565b61034e610ce4565b6040516102919190613521565b61036e6103693660046132d7565b610d00565b604051610291929190613599565b610284610ef6565b610284610efb565b6102ad61039a366004613370565b610f00565b6102dd6103ad366004613370565b61108f565b610284611254565b6102dd6103c8366004613370565b611259565b61028461131d565b6102ad611322565b6102ad6103eb3660046134f1565b611404565b61028461147c565b610284611481565b61034e611486565b6102846114a2565b6102846114a7565b6102846114ac565b6102dd61042e3660046132d7565b6114b1565b6102846114c3565b6102846114c8565b6102ad610451366004613370565b6114cd565b61036e6104643660046132d7565b6115f0565b610284611868565b6102dd61047f3660046132d7565b61186d565b6102ad6104923660046132d7565b61187f565b600381565b6104a46119cd565b73ffffffffffffffffffffffffffffffffffffffff166104c2611486565b73ffffffffffffffffffffffffffffffffffffffff1614610518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613831565b60405180910390fd5b600355565b600881565b61052b336119d1565b610561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613629565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260056020526040902055565b60076020526000908152604090205481565b606b81565b60025481565b606981565b60035481565b606781565b6000806105c333611a83565b6105f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613686565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152600460209081526040808320938916835260018401909152902054156106b15773ffffffffffffffffffffffffffffffffffffffff86166000908152600182016020526040902054610669908590611adc565b9250610676818785611af6565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260066020526040812080548592906106ab908490613a87565b90915550505b73ffffffffffffffffffffffffffffffffffffffff8716600090815260076020526040812080548792906106e6908490613a87565b909155506106f690508385613a87565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600760205260408120805490919061072b9084906139f9565b909155505073ffffffffffffffffffffffffffffffffffffffff8616600090815260076020908152604080832054600590925290912054101561079a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613866565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260048201602052604090205485908111156108b2575073ffffffffffffffffffffffffffffffffffffffff871660009081526004820160205260409020546107fe8187613a87565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600660205260408120805492955085929091906108389084906139f9565b909155505073ffffffffffffffffffffffffffffffffffffffff881660009081526006602090815260408083205460059092529091205410156108a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613866565b6108b2828985611c6d565b6108bf8289898489611f10565b50509550959350505050565b6000806108d6611f7d565b73ffffffffffffffffffffffffffffffffffffffff16637b23cbce336040518263ffffffff1660e01b815260040161090e9190613521565b602060405180830381600087803b15801561092857600080fd5b505af115801561093c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096091906134d1565b9050600061096e858361202a565b905061097a81846139f9565b9250600061098661277b565b905060006109926128d8565b9050818111156109dd577f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc6109c78383613a87565b6040516109d491906139b6565b60405180910390a15b60005b600b54811015610cd9576000600b8281548110610a26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835260049091526040822090925090610a6382612a2e565b90506000610a7083612a40565b9050600060028054606460035485610a889190613a4a565b610a929190613a11565b610a9c9190613a11565b610aa69190613a11565b90508915610abf57610ab8818c6139f9565b9a50610b22565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600c60205260409020600181018390556002810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928f16929092179091554390555b610b2c82826139f9565b8310610c6657610b3a612a53565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed12610b5d612aab565b73ffffffffffffffffffffffffffffffffffffffff16631f1cb62b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba257600080fd5b505afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda91906132fa565b8784610be68789613a87565b610bf09190613a87565b6040518463ffffffff1660e01b8152600401610c0e93929190613542565b602060405180830381600087803b158015610c2857600080fd5b505af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6091906134d1565b50610cb8565b600083610c7383856139f9565b610c7d9190613a87565b90507f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc81604051610cae91906139b6565b60405180910390a1505b610cc184612b03565b50505050508080610cd190613a9e565b9150506109e0565b505050505092915050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260046020908152604091829020600381018054845181850281018501909552808552606094859490929190830182828015610d8d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610d62575b5050506003840154929550505067ffffffffffffffff811115610dd9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e02578160200160208202803683370190505b50915060005b8084511115610eef576000848281518110610e4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508260040160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054848381518110610ed1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101525080610ee781613a9e565b915050610e08565b5050915091565b600681565b606681565b610f0933611a83565b610f3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613920565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604081208054839290610f749084906139f9565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604081208054839290610fae9084906139f9565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526006602090815260408083205460059092529091205410801590611023575073ffffffffffffffffffffffffffffffffffffffff821660009081526007602090815260408083205460059092529091205410155b611059576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613866565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020611089818484611c6d565b50505050565b600061109a33611a83565b6110d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613920565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260076020526040812080548492906111059084906139f9565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600760209081526040808320546005909252909120541015611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613866565b73ffffffffffffffffffffffffffffffffffffffff841660009081526004602052604090206111a4818585612c7f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526001820160205260409020541561124c5773ffffffffffffffffffffffffffffffffffffffff84166000908152600182016020526040902054611204908490611adc565b9150611211818584611af6565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602052604081208054849290611246908490613a87565b90915550505b509392505050565b606581565b600061126433611a83565b61129a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613777565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600460208181526040808420948816845291840190529020546112da9084613a87565b91506112e7818584612d24565b61124c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f906136e3565b600181565b61132a6119cd565b73ffffffffffffffffffffffffffffffffffffffff16611348611486565b73ffffffffffffffffffffffffffffffffffffffff1614611395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613831565b60015460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b61140c6119cd565b73ffffffffffffffffffffffffffffffffffffffff1661142a611486565b73ffffffffffffffffffffffffffffffffffffffff1614611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613831565b600255565b606a81565b600981565b60015473ffffffffffffffffffffffffffffffffffffffff1690565b600281565b600581565b606881565b60066020526000908152604090205481565b606c81565b600481565b6114d633611a83565b61150c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613920565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526004602090815260408083209386168352600790915281208054849290611551908490613a87565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600482016020526040902054611589908390613a87565b73ffffffffffffffffffffffffffffffffffffffff841660009081526004830160205260409020556115ba81612d56565b611089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f906137d4565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260046020908152604091829020805483518184028101840190945280845260609384939091839183018282801561167957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161164e575b50508454939650505067ffffffffffffffff82111590506116c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116ec578160200160208202803683370190505b50915060005b8084511115610eef576000848281518110611736577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611748612da1565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260018601602090815260408083205460028901909252918290205491517f687680ed000000000000000000000000000000000000000000000000000000008152939092169263687680ed926117c19290918691906004016139bf565b60206040518083038186803b1580156117d957600080fd5b505afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118119190613509565b84838151811061184a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152508061186081613a9e565b9150506116f2565b600781565b60056020526000908152604090205481565b6118876119cd565b73ffffffffffffffffffffffffffffffffffffffff166118a5611486565b73ffffffffffffffffffffffffffffffffffffffff16146118f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613831565b73ffffffffffffffffffffffffffffffffffffffff811661193f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f9061371a565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3390565b600080546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290611a2b90600990869060040161398c565b60206040518083038186803b158015611a4357600080fd5b505afa158015611a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7b91906134d1565b90505b919050565b600080546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290611a2b906004908690820161398c565b600081831115611aed575080611af0565b50815b92915050565b611afe612da1565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260018601602090815260408083205460028901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892611b779290918791906004016139bf565b602060405180830381600087803b158015611b9157600080fd5b505af1158015611ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc99190613509565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001850160205260409020819055611bfe908290613a87565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001850160209081526040808320939093556004860190522054611c3f908290613a87565b73ffffffffffffffffffffffffffffffffffffffff9092166000908152600490930160205250604090912055565b611c778383612df9565b611d885782546001810184556000848152602090200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055611cd3612da1565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1836040518263ffffffff1660e01b8152600401611d0b9190613521565b60206040518083038186803b158015611d2357600080fd5b505afa158015611d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5b9190613509565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600285016020526040902055611e84565b611d90612da1565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260018601602090815260408083205460028901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892611e099290918791906004016139bf565b602060405180830381600087803b158015611e2357600080fd5b505af1158015611e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5b9190613509565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001850160205260409020555b73ffffffffffffffffffffffffffffffffffffffff8216600090815260018401602052604081208054839290611ebb9084906139f9565b90915550611ecc9050838383612c7f565b611ed583612d56565b611f0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f906138c3565b505050565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600486016020526040902054611f43908390613a87565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600487016020526040902055611f76858483612c7f565b5050505050565b600080546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90611fd590606b9060040161397d565b60206040518083038186803b158015611fed57600080fd5b505afa158015612001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202591906132fa565b905090565b60408051600080825260208201928390529051909161204c9160099190613217565b50604080516000815260208101918290525161206a91600a91613217565b50604080516000815260208101918290525161208891600b91613217565b5060005b80845111156127745760008482815181106120d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061212681612e27565b1561253557600b805460018101825560009182527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b60038201548110156123135760008260030182815481106121e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526008909152604090912060028101549192509043146122bb5773ffffffffffffffffffffffffffffffffffffffff821660008181526004860160205260408120546001808501919091558184554360028501556009805491820181559091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790556122fe565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600485016020526040812054600183018054919290916122f89084906139f9565b90915550505b5050808061230b90613a9e565b91505061219b565b5060005b815481101561253357600082600001828154811061235e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526008909152604082209092509061239a612da1565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1846040518263ffffffff1660e01b81526004016123d29190613521565b60206040518083038186803b1580156123ea57600080fd5b505afa1580156123fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124229190613509565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260028701602090815260408083205460018a019092528220549293509091612467908490613a4a565b6124719190613a11565b9050438360020154146125025760006001848101829055828555436002860155600a805491820181559091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861617905561251c565b8083600001600082825461251691906139f9565b90915550505b50505050808061252b90613a9e565b915050612317565b505b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020526040902060018101541580159061256a5750855b1561275e578054600090612595906125834360016139f9565b61258d9190613a87565b600d54611adc565b90506000600d548360010154836125ac9190613a4a565b6125b69190613a11565b90506125c0612a53565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed126125e3612aab565b73ffffffffffffffffffffffffffffffffffffffff16631f1cb62b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561262857600080fd5b505afa15801561263c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266091906132fa565b60028601546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526126b7929173ffffffffffffffffffffffffffffffffffffffff16908690600401613542565b602060405180830381600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270991906134d1565b5080836001015461271a9190613a87565b61272490886139f9565b6000600185018190556002850180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690558455965050505b505050808061276c90613a9e565b91505061208c565b5092915050565b6000805b6009548110156128d4576000600982815481106127c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526008909152604090912080546001820154929350909111156128bf578054600182015460009161281b91613a87565b9050612825612aab565b73ffffffffffffffffffffffffffffffffffffffff166305883f7c84836040518363ffffffff1660e01b815260040161285f929190613573565b602060405180830381600087803b15801561287957600080fd5b505af115801561288d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b19190613509565b6128bb90866139f9565b9450505b505080806128cc90613a9e565b91505061277f565b5090565b6000805b600a548110156128d4576000600a8281548110612922577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600890915260409091206001810154815492935090911115612a195761296d612aab565b73ffffffffffffffffffffffffffffffffffffffff166305883f7c838360010154846000015461299d9190613a87565b6040518363ffffffff1660e01b81526004016129ba929190613573565b602060405180830381600087803b1580156129d457600080fd5b505af11580156129e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0c9190613509565b612a1690856139f9565b93505b50508080612a2690613a9e565b9150506128dc565b6000611a7b8260030183600401612e81565b6000611a7b826001810160028201612fcf565b600080546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90611fd59060659060040161397d565b600080546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90611fd590606a9060040161397d565b60005b8154811015612b9e576000826000018281548110612b4d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1682526001850181526040808320839055600286019091528120555080612b9681613a9e565b915050612b06565b5060005b6003820154811015612c62576000826003018281548110612bec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168252600485018152604080832083905560058601909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555080612c5a81613a9e565b915050612ba2565b50612c6e81600061329d565b612c7c60038201600061329d565b50565b612c898383613077565b612ce357600383018054600181018255600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b73ffffffffffffffffffffffffffffffffffffffff8216600090815260048401602052604081208054839290612d1a9084906139f9565b9091555050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004840160205260409020548111159392505050565b600080612d6283612a40565b90506000612d6f84612a2e565b905060025482612d7f9190613a4a565b600254612d8d9060016139f9565b612d979083613a4a565b1015949350505050565b600080546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90611fd59060669060040161397d565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002919091016020526040902054151590565b600080612e3383612a40565b90506000612e4084612a2e565b9050816003546002546064612e559190613a4a565b612e5f91906139f9565b612e699190613a4a565b600254612e769083613a4a565b612d97906064613a4a565b6000805b8354811015612774576000848281548110612ec9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169050612ef5612aab565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260208790526040908190205490517fe47109a9000000000000000000000000000000000000000000000000000000008152929091169163e47109a991612f5d91859190600401613573565b602060405180830381600087803b158015612f7757600080fd5b505af1158015612f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612faf9190613509565b612fb990846139f9565b9250508080612fc790613a9e565b915050612e85565b6000805b845481101561124c576000858281548110613017577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835290879052604090912054909150613057908290866130a6565b61306190846139f9565b925050808061306f90613a9e565b915050612fd3565b73ffffffffffffffffffffffffffffffffffffffff166000908152600591909101602052604090205460ff1690565b6000806130b1612da1565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1866040518263ffffffff1660e01b81526004016130e99190613521565b60206040518083038186803b15801561310157600080fd5b505afa158015613115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131399190613509565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602085905260408120549192509061316d8387613a4a565b6131779190613a11565b9050613181612aab565b73ffffffffffffffffffffffffffffffffffffffff1663e47109a987836040518363ffffffff1660e01b81526004016131bb929190613573565b602060405180830381600087803b1580156131d557600080fd5b505af11580156131e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320d9190613509565b9695505050505050565b828054828255906000526020600020908101928215613291579160200282015b8281111561329157825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190613237565b506128d49291506132b7565b5080546000825590600052602060002090810190612c7c91905b5b808211156128d457600081556001016132b8565b8035611a7e81613b35565b6000602082840312156132e8578081fd5b81356132f381613b35565b9392505050565b60006020828403121561330b578081fd5b81516132f381613b35565b600080600080600060a0868803121561332d578081fd5b853561333881613b35565b9450602086013561334881613b35565b9350604086013561335881613b35565b94979396509394606081013594506080013592915050565b600080600060608486031215613384578283fd5b833561338f81613b35565b9250602084013561339f81613b35565b929592945050506040919091013590565b600080604083850312156133c2578182fd5b82356133cd81613b35565b946020939093013593505050565b600080604083850312156133ed578182fd5b823567ffffffffffffffff80821115613404578384fd5b818501915085601f830112613417578384fd5b813560208282111561342b5761342b613b06565b8082026040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110868211171561346d5761346d613b06565b604052838152828101945085830182870184018b101561348b578889fd5b8896505b848710156134b4576134a0816132cc565b86526001969096019594830194830161348f565b5096506134c490508782016132cc565b9450505050509250929050565b6000602082840312156134e2578081fd5b815180151581146132f3578182fd5b600060208284031215613502578081fd5b5035919050565b60006020828403121561351a578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b828110156135e857815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016135b6565b50505083810382850152845180825285830191830190845b8181101561361c57835183529284019291840191600101613600565b5090979650505050505050565b60208082526026908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420746f6b60408201527f656e206361700000000000000000000000000000000000000000000000000000606082015260800190565b60208082526039908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e20747261646572206167656e7400000000000000606082015260800190565b60208082526018908201527f43616e277420626f72726f772066756c6c20616d6f756e740000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e2074726164657200000000000000000000000000606082015260800190565b60208082526026908201527f4163636f756e742062616c616e636520697320746f6f206c6f7720746f20776960408201527f7468647261770000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526039908201527f457863656564696e6720676c6f62616c206578706f737572652063617020746f60408201527f20746f6b656e202d2d2074727920616761696e206c6174657200000000000000606082015260800190565b60208082526022908201527f43616e277420626f72726f773a20696e73756666696369656e742062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f43616c6c696e6720636f6e7472616374206e6f7420617574686f72697a65642060408201527f746f206465706f73697400000000000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b918252602082015260400190565b60008219821115613a0c57613a0c613ad7565b500190565b600082613a45577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a8257613a82613ad7565b500290565b600082821015613a9957613a99613ad7565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ad057613ad0613ad7565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612c7c57600080fdfea26469706673582212201ef0e940c4b88e8b2658ad476a57c031337d41ca370cfec26b092378e60915e264736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c80635c275a3911610160578063a94c7c34116100d8578063d0eb66531161008c578063d5d7ed7f11610071578063d5d7ed7f14610469578063e0f3871f14610471578063f2fde38b1461048457610277565b8063d0eb665314610443578063d510c5351461045657610277565b8063bc44dcbc116100bd578063bc44dcbc14610420578063c76139d014610433578063cacf8d451461043b57610277565b8063a94c7c3414610410578063a9cc05361461041857610277565b806379575b231161012f57806383a49c7c1161011457806383a49c7c146103f85780638da5cb5b14610400578063a0098d691461040857610277565b806379575b23146103dd57806381ca6600146103f057610277565b80635c275a39146103b25780636612ce35146103ba57806366941984146103cd578063715018a6146103d557610277565b806332fe7b26116101f3578063409fdb72116101c257806348fb27b8116101a757806348fb27b814610384578063498d55eb1461038c57806352a664d91461039f57610277565b8063409fdb721461035b57806346b887961461037c57610277565b806332fe7b261461030a5780633500aa0b14610312578063387ccdc614610333578063392f5f641461034657610277565b806320c271261161024a5780632c86d98e1161022f5780632c86d98e146102f25780632fe94def146102fa578063320d2fa01461030257610277565b806320c27126146102ca5780632a0acc6a146102ea57610277565b8063065d570f1461027c57806316317e7e1461029a5780631bc5d81d146102af5780631d47e4a3146102b7575b600080fd5b610284610497565b604051610291919061397d565b60405180910390f35b6102ad6102a83660046134f1565b61049c565b005b61028461051d565b6102ad6102c53660046133b0565b610522565b6102dd6102d83660046132d7565b61058a565b60405161029191906139b6565b61028461059c565b6102dd6105a1565b6102846105a7565b6102dd6105ac565b6102846105b2565b610325610320366004613316565b6105b7565b6040516102919291906139eb565b6102dd6103413660046133db565b6108cb565b61034e610ce4565b6040516102919190613521565b61036e6103693660046132d7565b610d00565b604051610291929190613599565b610284610ef6565b610284610efb565b6102ad61039a366004613370565b610f00565b6102dd6103ad366004613370565b61108f565b610284611254565b6102dd6103c8366004613370565b611259565b61028461131d565b6102ad611322565b6102ad6103eb3660046134f1565b611404565b61028461147c565b610284611481565b61034e611486565b6102846114a2565b6102846114a7565b6102846114ac565b6102dd61042e3660046132d7565b6114b1565b6102846114c3565b6102846114c8565b6102ad610451366004613370565b6114cd565b61036e6104643660046132d7565b6115f0565b610284611868565b6102dd61047f3660046132d7565b61186d565b6102ad6104923660046132d7565b61187f565b600381565b6104a46119cd565b73ffffffffffffffffffffffffffffffffffffffff166104c2611486565b73ffffffffffffffffffffffffffffffffffffffff1614610518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613831565b60405180910390fd5b600355565b600881565b61052b336119d1565b610561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613629565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260056020526040902055565b60076020526000908152604090205481565b606b81565b60025481565b606981565b60035481565b606781565b6000806105c333611a83565b6105f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613686565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152600460209081526040808320938916835260018401909152902054156106b15773ffffffffffffffffffffffffffffffffffffffff86166000908152600182016020526040902054610669908590611adc565b9250610676818785611af6565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260066020526040812080548592906106ab908490613a87565b90915550505b73ffffffffffffffffffffffffffffffffffffffff8716600090815260076020526040812080548792906106e6908490613a87565b909155506106f690508385613a87565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600760205260408120805490919061072b9084906139f9565b909155505073ffffffffffffffffffffffffffffffffffffffff8616600090815260076020908152604080832054600590925290912054101561079a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613866565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260048201602052604090205485908111156108b2575073ffffffffffffffffffffffffffffffffffffffff871660009081526004820160205260409020546107fe8187613a87565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600660205260408120805492955085929091906108389084906139f9565b909155505073ffffffffffffffffffffffffffffffffffffffff881660009081526006602090815260408083205460059092529091205410156108a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613866565b6108b2828985611c6d565b6108bf8289898489611f10565b50509550959350505050565b6000806108d6611f7d565b73ffffffffffffffffffffffffffffffffffffffff16637b23cbce336040518263ffffffff1660e01b815260040161090e9190613521565b602060405180830381600087803b15801561092857600080fd5b505af115801561093c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096091906134d1565b9050600061096e858361202a565b905061097a81846139f9565b9250600061098661277b565b905060006109926128d8565b9050818111156109dd577f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc6109c78383613a87565b6040516109d491906139b6565b60405180910390a15b60005b600b54811015610cd9576000600b8281548110610a26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835260049091526040822090925090610a6382612a2e565b90506000610a7083612a40565b9050600060028054606460035485610a889190613a4a565b610a929190613a11565b610a9c9190613a11565b610aa69190613a11565b90508915610abf57610ab8818c6139f9565b9a50610b22565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600c60205260409020600181018390556002810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016928f16929092179091554390555b610b2c82826139f9565b8310610c6657610b3a612a53565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed12610b5d612aab565b73ffffffffffffffffffffffffffffffffffffffff16631f1cb62b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba257600080fd5b505afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda91906132fa565b8784610be68789613a87565b610bf09190613a87565b6040518463ffffffff1660e01b8152600401610c0e93929190613542565b602060405180830381600087803b158015610c2857600080fd5b505af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6091906134d1565b50610cb8565b600083610c7383856139f9565b610c7d9190613a87565b90507f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc81604051610cae91906139b6565b60405180910390a1505b610cc184612b03565b50505050508080610cd190613a9e565b9150506109e0565b505050505092915050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260046020908152604091829020600381018054845181850281018501909552808552606094859490929190830182828015610d8d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610d62575b5050506003840154929550505067ffffffffffffffff811115610dd9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610e02578160200160208202803683370190505b50915060005b8084511115610eef576000848281518110610e4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508260040160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054848381518110610ed1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101525080610ee781613a9e565b915050610e08565b5050915091565b600681565b606681565b610f0933611a83565b610f3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613920565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604081208054839290610f749084906139f9565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604081208054839290610fae9084906139f9565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526006602090815260408083205460059092529091205410801590611023575073ffffffffffffffffffffffffffffffffffffffff821660009081526007602090815260408083205460059092529091205410155b611059576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613866565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020611089818484611c6d565b50505050565b600061109a33611a83565b6110d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613920565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260076020526040812080548492906111059084906139f9565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600760209081526040808320546005909252909120541015611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613866565b73ffffffffffffffffffffffffffffffffffffffff841660009081526004602052604090206111a4818585612c7f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526001820160205260409020541561124c5773ffffffffffffffffffffffffffffffffffffffff84166000908152600182016020526040902054611204908490611adc565b9150611211818584611af6565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602052604081208054849290611246908490613a87565b90915550505b509392505050565b606581565b600061126433611a83565b61129a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613777565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600460208181526040808420948816845291840190529020546112da9084613a87565b91506112e7818584612d24565b61124c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f906136e3565b600181565b61132a6119cd565b73ffffffffffffffffffffffffffffffffffffffff16611348611486565b73ffffffffffffffffffffffffffffffffffffffff1614611395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613831565b60015460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b61140c6119cd565b73ffffffffffffffffffffffffffffffffffffffff1661142a611486565b73ffffffffffffffffffffffffffffffffffffffff1614611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613831565b600255565b606a81565b600981565b60015473ffffffffffffffffffffffffffffffffffffffff1690565b600281565b600581565b606881565b60066020526000908152604090205481565b606c81565b600481565b6114d633611a83565b61150c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613920565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526004602090815260408083209386168352600790915281208054849290611551908490613a87565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600482016020526040902054611589908390613a87565b73ffffffffffffffffffffffffffffffffffffffff841660009081526004830160205260409020556115ba81612d56565b611089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f906137d4565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260046020908152604091829020805483518184028101840190945280845260609384939091839183018282801561167957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161164e575b50508454939650505067ffffffffffffffff82111590506116c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116ec578160200160208202803683370190505b50915060005b8084511115610eef576000848281518110611736577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050611748612da1565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260018601602090815260408083205460028901909252918290205491517f687680ed000000000000000000000000000000000000000000000000000000008152939092169263687680ed926117c19290918691906004016139bf565b60206040518083038186803b1580156117d957600080fd5b505afa1580156117ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118119190613509565b84838151811061184a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152508061186081613a9e565b9150506116f2565b600781565b60056020526000908152604090205481565b6118876119cd565b73ffffffffffffffffffffffffffffffffffffffff166118a5611486565b73ffffffffffffffffffffffffffffffffffffffff16146118f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90613831565b73ffffffffffffffffffffffffffffffffffffffff811661193f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f9061371a565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3390565b600080546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290611a2b90600990869060040161398c565b60206040518083038186803b158015611a4357600080fd5b505afa158015611a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7b91906134d1565b90505b919050565b600080546040517fd87fefd200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063d87fefd290611a2b906004908690820161398c565b600081831115611aed575080611af0565b50815b92915050565b611afe612da1565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260018601602090815260408083205460028901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892611b779290918791906004016139bf565b602060405180830381600087803b158015611b9157600080fd5b505af1158015611ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc99190613509565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001850160205260409020819055611bfe908290613a87565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001850160209081526040808320939093556004860190522054611c3f908290613a87565b73ffffffffffffffffffffffffffffffffffffffff9092166000908152600490930160205250604090912055565b611c778383612df9565b611d885782546001810184556000848152602090200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055611cd3612da1565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1836040518263ffffffff1660e01b8152600401611d0b9190613521565b60206040518083038186803b158015611d2357600080fd5b505afa158015611d37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5b9190613509565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600285016020526040902055611e84565b611d90612da1565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260018601602090815260408083205460028901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892611e099290918791906004016139bf565b602060405180830381600087803b158015611e2357600080fd5b505af1158015611e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5b9190613509565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001850160205260409020555b73ffffffffffffffffffffffffffffffffffffffff8216600090815260018401602052604081208054839290611ebb9084906139f9565b90915550611ecc9050838383612c7f565b611ed583612d56565b611f0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f906138c3565b505050565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600486016020526040902054611f43908390613a87565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600487016020526040902055611f76858483612c7f565b5050505050565b600080546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90611fd590606b9060040161397d565b60206040518083038186803b158015611fed57600080fd5b505afa158015612001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202591906132fa565b905090565b60408051600080825260208201928390529051909161204c9160099190613217565b50604080516000815260208101918290525161206a91600a91613217565b50604080516000815260208101918290525161208891600b91613217565b5060005b80845111156127745760008482815181106120d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061212681612e27565b1561253557600b805460018101825560009182527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b60038201548110156123135760008260030182815481106121e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526008909152604090912060028101549192509043146122bb5773ffffffffffffffffffffffffffffffffffffffff821660008181526004860160205260408120546001808501919091558184554360028501556009805491820181559091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790556122fe565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600485016020526040812054600183018054919290916122f89084906139f9565b90915550505b5050808061230b90613a9e565b91505061219b565b5060005b815481101561253357600082600001828154811061235e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526008909152604082209092509061239a612da1565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1846040518263ffffffff1660e01b81526004016123d29190613521565b60206040518083038186803b1580156123ea57600080fd5b505afa1580156123fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124229190613509565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260028701602090815260408083205460018a019092528220549293509091612467908490613a4a565b6124719190613a11565b9050438360020154146125025760006001848101829055828555436002860155600a805491820181559091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861617905561251c565b8083600001600082825461251691906139f9565b90915550505b50505050808061252b90613a9e565b915050612317565b505b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020526040902060018101541580159061256a5750855b1561275e578054600090612595906125834360016139f9565b61258d9190613a87565b600d54611adc565b90506000600d548360010154836125ac9190613a4a565b6125b69190613a11565b90506125c0612a53565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed126125e3612aab565b73ffffffffffffffffffffffffffffffffffffffff16631f1cb62b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561262857600080fd5b505afa15801561263c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266091906132fa565b60028601546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526126b7929173ffffffffffffffffffffffffffffffffffffffff16908690600401613542565b602060405180830381600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270991906134d1565b5080836001015461271a9190613a87565b61272490886139f9565b6000600185018190556002850180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690558455965050505b505050808061276c90613a9e565b91505061208c565b5092915050565b6000805b6009548110156128d4576000600982815481106127c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168083526008909152604090912080546001820154929350909111156128bf578054600182015460009161281b91613a87565b9050612825612aab565b73ffffffffffffffffffffffffffffffffffffffff166305883f7c84836040518363ffffffff1660e01b815260040161285f929190613573565b602060405180830381600087803b15801561287957600080fd5b505af115801561288d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b19190613509565b6128bb90866139f9565b9450505b505080806128cc90613a9e565b91505061277f565b5090565b6000805b600a548110156128d4576000600a8281548110612922577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600890915260409091206001810154815492935090911115612a195761296d612aab565b73ffffffffffffffffffffffffffffffffffffffff166305883f7c838360010154846000015461299d9190613a87565b6040518363ffffffff1660e01b81526004016129ba929190613573565b602060405180830381600087803b1580156129d457600080fd5b505af11580156129e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0c9190613509565b612a1690856139f9565b93505b50508080612a2690613a9e565b9150506128dc565b6000611a7b8260030183600401612e81565b6000611a7b826001810160028201612fcf565b600080546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90611fd59060659060040161397d565b600080546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90611fd590606a9060040161397d565b60005b8154811015612b9e576000826000018281548110612b4d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1682526001850181526040808320839055600286019091528120555080612b9681613a9e565b915050612b06565b5060005b6003820154811015612c62576000826003018281548110612bec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168252600485018152604080832083905560058601909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555080612c5a81613a9e565b915050612ba2565b50612c6e81600061329d565b612c7c60038201600061329d565b50565b612c898383613077565b612ce357600383018054600181018255600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b73ffffffffffffffffffffffffffffffffffffffff8216600090815260048401602052604081208054839290612d1a9084906139f9565b9091555050505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004840160205260409020548111159392505050565b600080612d6283612a40565b90506000612d6f84612a2e565b905060025482612d7f9190613a4a565b600254612d8d9060016139f9565b612d979083613a4a565b1015949350505050565b600080546040517f3c9c8f9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690633c9c8f9c90611fd59060669060040161397d565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002919091016020526040902054151590565b600080612e3383612a40565b90506000612e4084612a2e565b9050816003546002546064612e559190613a4a565b612e5f91906139f9565b612e699190613a4a565b600254612e769083613a4a565b612d97906064613a4a565b6000805b8354811015612774576000848281548110612ec9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169050612ef5612aab565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260208790526040908190205490517fe47109a9000000000000000000000000000000000000000000000000000000008152929091169163e47109a991612f5d91859190600401613573565b602060405180830381600087803b158015612f7757600080fd5b505af1158015612f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612faf9190613509565b612fb990846139f9565b9250508080612fc790613a9e565b915050612e85565b6000805b845481101561124c576000858281548110613017577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835290879052604090912054909150613057908290866130a6565b61306190846139f9565b925050808061306f90613a9e565b915050612fd3565b73ffffffffffffffffffffffffffffffffffffffff166000908152600591909101602052604090205460ff1690565b6000806130b1612da1565b73ffffffffffffffffffffffffffffffffffffffff1663e7bde5c1866040518263ffffffff1660e01b81526004016130e99190613521565b60206040518083038186803b15801561310157600080fd5b505afa158015613115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131399190613509565b73ffffffffffffffffffffffffffffffffffffffff86166000908152602085905260408120549192509061316d8387613a4a565b6131779190613a11565b9050613181612aab565b73ffffffffffffffffffffffffffffffffffffffff1663e47109a987836040518363ffffffff1660e01b81526004016131bb929190613573565b602060405180830381600087803b1580156131d557600080fd5b505af11580156131e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320d9190613509565b9695505050505050565b828054828255906000526020600020908101928215613291579160200282015b8281111561329157825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190613237565b506128d49291506132b7565b5080546000825590600052602060002090810190612c7c91905b5b808211156128d457600081556001016132b8565b8035611a7e81613b35565b6000602082840312156132e8578081fd5b81356132f381613b35565b9392505050565b60006020828403121561330b578081fd5b81516132f381613b35565b600080600080600060a0868803121561332d578081fd5b853561333881613b35565b9450602086013561334881613b35565b9350604086013561335881613b35565b94979396509394606081013594506080013592915050565b600080600060608486031215613384578283fd5b833561338f81613b35565b9250602084013561339f81613b35565b929592945050506040919091013590565b600080604083850312156133c2578182fd5b82356133cd81613b35565b946020939093013593505050565b600080604083850312156133ed578182fd5b823567ffffffffffffffff80821115613404578384fd5b818501915085601f830112613417578384fd5b813560208282111561342b5761342b613b06565b8082026040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110868211171561346d5761346d613b06565b604052838152828101945085830182870184018b101561348b578889fd5b8896505b848710156134b4576134a0816132cc565b86526001969096019594830194830161348f565b5096506134c490508782016132cc565b9450505050509250929050565b6000602082840312156134e2578081fd5b815180151581146132f3578182fd5b600060208284031215613502578081fd5b5035919050565b60006020828403121561351a578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b604080825283519082018190526000906020906060840190828701845b828110156135e857815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016135b6565b50505083810382850152845180825285830191830190845b8181101561361c57835183529284019291840191600101613600565b5090979650505050505050565b60208082526026908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420746f6b60408201527f656e206361700000000000000000000000000000000000000000000000000000606082015260800190565b60208082526039908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e20747261646572206167656e7400000000000000606082015260800190565b60208082526018908201527f43616e277420626f72726f772066756c6c20616d6f756e740000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526033908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e2074726164657200000000000000000000000000606082015260800190565b60208082526026908201527f4163636f756e742062616c616e636520697320746f6f206c6f7720746f20776960408201527f7468647261770000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526039908201527f457863656564696e6720676c6f62616c206578706f737572652063617020746f60408201527f20746f6b656e202d2d2074727920616761696e206c6174657200000000000000606082015260800190565b60208082526022908201527f43616e277420626f72726f773a20696e73756666696369656e742062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f43616c6c696e6720636f6e7472616374206e6f7420617574686f72697a65642060408201527f746f206465706f73697400000000000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b61ffff92909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b918252602082015260400190565b60008219821115613a0c57613a0c613ad7565b500190565b600082613a45577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a8257613a82613ad7565b500290565b600082821015613a9957613a99613ad7565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ad057613ad0613ad7565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612c7c57600080fdfea26469706673582212201ef0e940c4b88e8b2658ad476a57c031337d41ca370cfec26b092378e60915e264736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9085,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "roles",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Roles)9424"
      },
      {
        "astId": 381,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4152,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "leverage",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4154,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "liquidationThresholdPercent",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4159,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "marginAccounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(CrossMarginAccount)4142_storage)"
      },
      {
        "astId": 4163,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "tokenCaps",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4167,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "totalShort",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4171,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "totalLong",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5291,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "liquidationAmounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Liquidation)5286_storage)"
      },
      {
        "astId": 5294,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "sellTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5297,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "buyTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5300,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "tradersToLiquidate",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5312,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "stakeAttackRecords",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(MCRecord)5307_storage)"
      },
      {
        "astId": 5315,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "mcAttackWindow",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Roles)9424": {
        "encoding": "inplace",
        "label": "contract Roles",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(CrossMarginAccount)4142_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(CrossMarginAccount)4142_storage"
      },
      "t_mapping(t_address,t_struct(Liquidation)5286_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginTrading.Liquidation)",
        "numberOfBytes": "32",
        "value": "t_struct(Liquidation)5286_storage"
      },
      "t_mapping(t_address,t_struct(MCRecord)5307_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginTrading.MCRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(MCRecord)5307_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CrossMarginAccount)4142_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginAccount",
        "members": [
          {
            "astId": 4122,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4126,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowed",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4130,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowedYieldQuotientsFP",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4133,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdingTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4137,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdings",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4141,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdsToken",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Liquidation)5286_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginTrading.Liquidation",
        "members": [
          {
            "astId": 5281,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "buy",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5283,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "sell",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5285,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "blockNum",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MCRecord)5307_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginTrading.MCRecord",
        "members": [
          {
            "astId": 5302,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "blockNum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5304,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5306,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "stakeAttacker",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}